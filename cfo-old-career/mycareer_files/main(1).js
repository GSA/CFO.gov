(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash -o ./dist/lodash.compat.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used internally to indicate various things */
  var indicatorObject = {};

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to fix the JScript [[DontEnum]] bug */
  var shadowedProps = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      errorClass = '[object Error]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used as the data object for `iteratorTemplate` */
  var iteratorData = {
    'args': '',
    'array': null,
    'bottom': '',
    'firstArg': '',
    'init': '',
    'keys': null,
    'loop': '',
    'shadowedProps': null,
    'support': null,
    'top': '',
    'useHas': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Checks if `value` is a DOM node in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if the `value` is a DOM node, else `false`.
   */
  function isNode(value) {
    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
    // methods that are `typeof` "string" and still can coerce nodes to strings
    return typeof value.toString != 'function' && typeof (value + '') == 'string';
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var errorProto = Error.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /** Used to avoid iterating non-enumerable properties in IE < 9 */
    var nonEnumProps = {};
    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
    nonEnumProps[objectClass] = { 'constructor': true };

    (function() {
      var length = shadowedProps.length;
      while (length--) {
        var key = shadowedProps[length];
        for (var className in nonEnumProps) {
          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {
            nonEnumProps[className][key] = false;
          }
        }
      }
    }());

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function() {
      var ctor = function() { this.x = 1; },
          object = { '0': 1, 'length': 1 },
          props = [];

      ctor.prototype = { 'valueOf': 1, 'y': 1 };
      for (var key in new ctor) { props.push(key); }
      for (key in arguments) { }

      /**
       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsClass = toString.call(arguments) == argsClass;

      /**
       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);

      /**
       * Detect if `name` or `message` properties of `Error.prototype` are
       * enumerable by default. (IE < 9, Safari < 5.1)
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

      /**
       * Detect if `prototype` properties are enumerable by default.
       *
       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
       * (if the prototype or a property on the prototype has been set)
       * incorrectly sets a function's `prototype` property [[Enumerable]]
       * value to `true`.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if `arguments` object indexes are non-enumerable
       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumArgs = key != 0;

      /**
       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
       *
       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumShadows = !/valueOf/.test(props);

      /**
       * Detect if own properties are iterated after inherited properties (all but IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.ownLast = props[0] != 'x';

      /**
       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.
       *
       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
       * and `splice()` functions that fail to remove the last element, `value[0]`,
       * of array-like objects even though the `length` property is set to `0`.
       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);

      /**
       * Detect lack of support for accessing string characters by index.
       *
       * IE < 8 can't access characters by index and IE 8 can only access
       * characters by index on string literals.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';

      /**
       * Detect if a DOM node's [[Class]] is resolvable (all but IE < 9)
       * and that the JS engine errors when attempting to coerce an object to
       * a string without a `toString` function.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.nodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
      } catch(e) {
        support.nodeClass = true;
      }
    }(1));

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The template used to create iterator functions.
     *
     * @private
     * @param {Object} data The data object used to populate the text.
     * @returns {string} Returns the interpolated text.
     */
    var iteratorTemplate = function(obj) {

      var __p = 'var index, iterable = ' +
      (obj.firstArg) +
      ', result = ' +
      (obj.init) +
      ';\nif (!iterable) return result;\n' +
      (obj.top) +
      ';';
       if (obj.array) {
      __p += '\nvar length = iterable.length; index = -1;\nif (' +
      (obj.array) +
      ') {  ';
       if (support.unindexedChars) {
      __p += '\n  if (isString(iterable)) {\n    iterable = iterable.split(\'\')\n  }  ';
       }
      __p += '\n  while (++index < length) {\n    ' +
      (obj.loop) +
      ';\n  }\n}\nelse {  ';
       } else if (support.nonEnumArgs) {
      __p += '\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += \'\';\n      ' +
      (obj.loop) +
      ';\n    }\n  } else {  ';
       }

       if (support.enumPrototypes) {
      __p += '\n  var skipProto = typeof iterable == \'function\';\n  ';
       }

       if (support.enumErrorProps) {
      __p += '\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n  ';
       }

          var conditions = [];    if (support.enumPrototypes) { conditions.push('!(skipProto && index == "prototype")'); }    if (support.enumErrorProps)  { conditions.push('!(skipErrorProps && (index == "message" || index == "name"))'); }

       if (obj.useHas && obj.keys) {
      __p += '\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\n      length = ownProps ? ownProps.length : 0;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n';
          if (conditions.length) {
      __p += '    if (' +
      (conditions.join(' && ')) +
      ') {\n  ';
       }
      __p +=
      (obj.loop) +
      ';    ';
       if (conditions.length) {
      __p += '\n    }';
       }
      __p += '\n  }  ';
       } else {
      __p += '\n  for (index in iterable) {\n';
          if (obj.useHas) { conditions.push("hasOwnProperty.call(iterable, index)"); }    if (conditions.length) {
      __p += '    if (' +
      (conditions.join(' && ')) +
      ') {\n  ';
       }
      __p +=
      (obj.loop) +
      ';    ';
       if (conditions.length) {
      __p += '\n    }';
       }
      __p += '\n  }    ';
       if (support.nonEnumShadows) {
      __p += '\n\n  if (iterable !== objectProto) {\n    var ctor = iterable.constructor,\n        isProto = iterable === (ctor && ctor.prototype),\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n        nonEnum = nonEnumProps[className];\n      ';
       for (k = 0; k < 7; k++) {
      __p += '\n    index = \'' +
      (obj.shadowedProps[k]) +
      '\';\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))';
              if (!obj.useHas) {
      __p += ' || (!nonEnum[index] && iterable[index] !== objectProto[index])';
       }
      __p += ') {\n      ' +
      (obj.loop) +
      ';\n    }      ';
       }
      __p += '\n  }    ';
       }

       }

       if (obj.array || support.nonEnumArgs) {
      __p += '\n}';
       }
      __p +=
      (obj.bottom) +
      ';\nreturn result';

      return __p
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className] || (!support.nodeClass && isNode(value))) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? baseEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
            ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Creates compiled iteration functions.
     *
     * @private
     * @param {...Object} [options] The compile options object(s).
     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.
     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.
     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.
     * @param {string} [options.args] A comma separated string of iteration function arguments.
     * @param {string} [options.top] Code to execute before the iteration branches.
     * @param {string} [options.loop] Code to execute in the object loop.
     * @param {string} [options.bottom] Code to execute after the iteration branches.
     * @returns {Function} Returns the compiled function.
     */
    function createIterator() {
      // data properties
      iteratorData.shadowedProps = shadowedProps;

      // iterator options
      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';
      iteratorData.init = 'iterable';
      iteratorData.useHas = true;

      // merge options into a template data object
      for (var object, index = 0; object = arguments[index]; index++) {
        for (var key in object) {
          iteratorData[key] = object[key];
        }
      }
      var args = iteratorData.args;
      iteratorData.firstArg = /^[^,]+/.exec(args)[0];

      // create the function factory
      var factory = Function(
          'baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' +
          'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' +
          'objectTypes, nonEnumProps, stringClass, stringProto, toString',
        'return function(' + args + ') {\n' + iteratorTemplate(iteratorData) + '\n}'
      );

      // return the compiled function
      return factory(
        baseCreateCallback, errorClass, errorProto, hasOwnProperty,
        indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto,
        objectTypes, nonEnumProps, stringClass, stringProto, toString
      );
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)) ||
          (!support.argsClass && isArguments(value)) ||
          (!support.nodeClass && isNode(value))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      if (support.ownLast) {
        forIn(value, function(value, key, object) {
          result = hasOwnProperty.call(object, key);
          return false;
        });
        return result !== false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }
    // fallback for browsers that can't detect `arguments` objects by [[Class]]
    if (!support.argsClass) {
      isArguments = function(value) {
        return value && typeof value == 'object' && typeof value.length == 'number' &&
          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;
      };
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = createIterator({
      'args': 'object',
      'init': '[]',
      'top': 'if (!(objectTypes[typeof object])) return result',
      'loop': 'result.push(index)'
    });

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      if ((support.enumPrototypes && typeof object == 'function') ||
          (support.nonEnumArgs && object.length && isArguments(object))) {
        return shimKeys(object);
      }
      return nativeKeys(object);
    };

    /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */
    var eachIteratorOptions = {
      'args': 'collection, callback, thisArg',
      'top': "callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)",
      'array': "typeof length == 'number'",
      'keys': keys,
      'loop': 'if (callback(iterable[index], index, collection) === false) return result'
    };

    /** Reusable iterator options for `assign` and `defaults` */
    var defaultsIteratorOptions = {
      'args': 'object, source, guard',
      'top':
        'var args = arguments,\n' +
        '    argsIndex = 0,\n' +
        "    argsLength = typeof guard == 'number' ? 2 : args.length;\n" +
        'while (++argsIndex < argsLength) {\n' +
        '  iterable = args[argsIndex];\n' +
        '  if (iterable && objectTypes[typeof iterable]) {',
      'keys': keys,
      'loop': "if (typeof result[index] == 'undefined') result[index] = iterable[index]",
      'bottom': '  }\n}'
    };

    /** Reusable iterator options for `forIn` and `forOwn` */
    var forOwnIteratorOptions = {
      'top': 'if (!objectTypes[typeof iterable]) return result;\n' + eachIteratorOptions.top,
      'array': false
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /**
     * A function compiled to iterate `arguments` objects, arrays, objects, and
     * strings consistenly across environments, executing the callback for each
     * element in the collection. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index|key, collection). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @private
     * @type Function
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createIterator(eachIteratorOptions);

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = createIterator(defaultsIteratorOptions, {
      'top':
        defaultsIteratorOptions.top.replace(';',
          ';\n' +
          "if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n" +
          '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n' +
          "} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n" +
          '  callback = args[--argsLength];\n' +
          '}'
        ),
      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'
    });

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = createIterator(defaultsIteratorOptions);

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {
      'useHas': false
    });

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass ||
          (support.argsClass ? className == argsClass : isArguments(value))) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }
    // fallback for older versions of Chrome and Safari
    if (isFunction(/x/)) {
      isFunction = function(value) {
        return typeof value == 'function' && toString.call(value) == funcClass;
      };
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass) || (!support.argsClass && isArguments(value))) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? baseEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      if (support.unindexedChars && isString(collection)) {
        collection = collection.split('');
      }
      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        baseEach(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      if (callback && typeof thisArg == 'undefined' && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        baseEach(collection, callback, thisArg);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var iterable = collection,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (isArray(collection)) {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        if (typeof length != 'number') {
          var props = keys(collection);
          length = props.length;
        } else if (support.unindexedChars && isString(collection)) {
          iterable = collection.split('');
        }
        baseEach(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(iterable[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      callback = lodash.createCallback(callback, thisArg, 3);
      if (isArray(collection)) {
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      } else if (support.unindexedChars && isString(collection)) {
        collection = collection.split('');
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      if (isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return (support.unindexedChars && isString(collection))
          ? collection.split('')
          : slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    baseEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    baseEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    // avoid array-like object bugs with `Array#shift` and `Array#splice`
    // in IE < 9, Firefox < 10, Narwhal, and RingoJS
    if (!support.spliceObjects) {
      baseEach(['pop', 'shift', 'splice'], function(methodName) {
        var func = arrayRef[methodName],
            isSplice = methodName == 'splice';

        lodash.prototype[methodName] = function() {
          var chainAll = this.__chain__,
              value = this.__wrapped__,
              result = func.apply(value, arguments);

          if (value.length === 0) {
            delete value[0];
          }
          return (chainAll || isSplice)
            ? new lodashWrapper(result, chainAll)
            : result;
        };
      });
    }

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
!function(){"use strict";var VERSION="2.0.1";var ENTITIES={};var latin_map={"Á":"A","Ă":"A","Ắ":"A","Ặ":"A","Ằ":"A","Ẳ":"A","Ẵ":"A","Ǎ":"A","Â":"A","Ấ":"A","Ậ":"A","Ầ":"A","Ẩ":"A","Ẫ":"A","Ä":"A","Ǟ":"A","Ȧ":"A","Ǡ":"A","Ạ":"A","Ȁ":"A","À":"A","Ả":"A","Ȃ":"A","Ā":"A","Ą":"A","Å":"A","Ǻ":"A","Ḁ":"A","Ⱥ":"A","Ã":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ḃ":"B","Ḅ":"B","Ɓ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ć":"C","Č":"C","Ç":"C","Ḉ":"C","Ĉ":"C","Ċ":"C","Ƈ":"C","Ȼ":"C","Ď":"D","Ḑ":"D","Ḓ":"D","Ḋ":"D","Ḍ":"D","Ɗ":"D","Ḏ":"D","ǲ":"D","ǅ":"D","Đ":"D","Ƌ":"D","Ǳ":"DZ","Ǆ":"DZ","É":"E","Ĕ":"E","Ě":"E","Ȩ":"E","Ḝ":"E","Ê":"E","Ế":"E","Ệ":"E","Ề":"E","Ể":"E","Ễ":"E","Ḙ":"E","Ë":"E","Ė":"E","Ẹ":"E","Ȅ":"E","È":"E","Ẻ":"E","Ȇ":"E","Ē":"E","Ḗ":"E","Ḕ":"E","Ę":"E","Ɇ":"E","Ẽ":"E","Ḛ":"E","Ꝫ":"ET","Ḟ":"F","Ƒ":"F","Ǵ":"G","Ğ":"G","Ǧ":"G","Ģ":"G","Ĝ":"G","Ġ":"G","Ɠ":"G","Ḡ":"G","Ǥ":"G","Ḫ":"H","Ȟ":"H","Ḩ":"H","Ĥ":"H","Ⱨ":"H","Ḧ":"H","Ḣ":"H","Ḥ":"H","Ħ":"H","Í":"I","Ĭ":"I","Ǐ":"I","Î":"I","Ï":"I","Ḯ":"I","İ":"I","Ị":"I","Ȉ":"I","Ì":"I","Ỉ":"I","Ȋ":"I","Ī":"I","Į":"I","Ɨ":"I","Ĩ":"I","Ḭ":"I","Ꝺ":"D","Ꝼ":"F","Ᵹ":"G","Ꞃ":"R","Ꞅ":"S","Ꞇ":"T","Ꝭ":"IS","Ĵ":"J","Ɉ":"J","Ḱ":"K","Ǩ":"K","Ķ":"K","Ⱪ":"K","Ꝃ":"K","Ḳ":"K","Ƙ":"K","Ḵ":"K","Ꝁ":"K","Ꝅ":"K","Ĺ":"L","Ƚ":"L","Ľ":"L","Ļ":"L","Ḽ":"L","Ḷ":"L","Ḹ":"L","Ⱡ":"L","Ꝉ":"L","Ḻ":"L","Ŀ":"L","Ɫ":"L","ǈ":"L","Ł":"L","Ǉ":"LJ","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ń":"N","Ň":"N","Ņ":"N","Ṋ":"N","Ṅ":"N","Ṇ":"N","Ǹ":"N","Ɲ":"N","Ṉ":"N","Ƞ":"N","ǋ":"N","Ñ":"N","Ǌ":"NJ","Ó":"O","Ŏ":"O","Ǒ":"O","Ô":"O","Ố":"O","Ộ":"O","Ồ":"O","Ổ":"O","Ỗ":"O","Ö":"O","Ȫ":"O","Ȯ":"O","Ȱ":"O","Ọ":"O","Ő":"O","Ȍ":"O","Ò":"O","Ỏ":"O","Ơ":"O","Ớ":"O","Ợ":"O","Ờ":"O","Ở":"O","Ỡ":"O","Ȏ":"O","Ꝋ":"O","Ꝍ":"O","Ō":"O","Ṓ":"O","Ṑ":"O","Ɵ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Õ":"O","Ṍ":"O","Ṏ":"O","Ȭ":"O","Ƣ":"OI","Ꝏ":"OO","Ɛ":"E","Ɔ":"O","Ȣ":"OU","Ṕ":"P","Ṗ":"P","Ꝓ":"P","Ƥ":"P","Ꝕ":"P","Ᵽ":"P","Ꝑ":"P","Ꝙ":"Q","Ꝗ":"Q","Ŕ":"R","Ř":"R","Ŗ":"R","Ṙ":"R","Ṛ":"R","Ṝ":"R","Ȑ":"R","Ȓ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꜿ":"C","Ǝ":"E","Ś":"S","Ṥ":"S","Š":"S","Ṧ":"S","Ş":"S","Ŝ":"S","Ș":"S","Ṡ":"S","Ṣ":"S","Ṩ":"S","ẞ":"SS","Ť":"T","Ţ":"T","Ṱ":"T","Ț":"T","Ⱦ":"T","Ṫ":"T","Ṭ":"T","Ƭ":"T","Ṯ":"T","Ʈ":"T","Ŧ":"T","Ɐ":"A","Ꞁ":"L","Ɯ":"M","Ʌ":"V","Ꜩ":"TZ","Ú":"U","Ŭ":"U","Ǔ":"U","Û":"U","Ṷ":"U","Ü":"U","Ǘ":"U","Ǚ":"U","Ǜ":"U","Ǖ":"U","Ṳ":"U","Ụ":"U","Ű":"U","Ȕ":"U","Ù":"U","Ủ":"U","Ư":"U","Ứ":"U","Ự":"U","Ừ":"U","Ử":"U","Ữ":"U","Ȗ":"U","Ū":"U","Ṻ":"U","Ų":"U","Ů":"U","Ũ":"U","Ṹ":"U","Ṵ":"U","Ꝟ":"V","Ṿ":"V","Ʋ":"V","Ṽ":"V","Ꝡ":"VY","Ẃ":"W","Ŵ":"W","Ẅ":"W","Ẇ":"W","Ẉ":"W","Ẁ":"W","Ⱳ":"W","Ẍ":"X","Ẋ":"X","Ý":"Y","Ŷ":"Y","Ÿ":"Y","Ẏ":"Y","Ỵ":"Y","Ỳ":"Y","Ƴ":"Y","Ỷ":"Y","Ỿ":"Y","Ȳ":"Y","Ɏ":"Y","Ỹ":"Y","Ź":"Z","Ž":"Z","Ẑ":"Z","Ⱬ":"Z","Ż":"Z","Ẓ":"Z","Ȥ":"Z","Ẕ":"Z","Ƶ":"Z","Ĳ":"IJ","Œ":"OE","ᴀ":"A","ᴁ":"AE","ʙ":"B","ᴃ":"B","ᴄ":"C","ᴅ":"D","ᴇ":"E","ꜰ":"F","ɢ":"G","ʛ":"G","ʜ":"H","ɪ":"I","ʁ":"R","ᴊ":"J","ᴋ":"K","ʟ":"L","ᴌ":"L","ᴍ":"M","ɴ":"N","ᴏ":"O","ɶ":"OE","ᴐ":"O","ᴕ":"OU","ᴘ":"P","ʀ":"R","ᴎ":"N","ᴙ":"R","ꜱ":"S","ᴛ":"T","ⱻ":"E","ᴚ":"R","ᴜ":"U","ᴠ":"V","ᴡ":"W","ʏ":"Y","ᴢ":"Z","á":"a","ă":"a","ắ":"a","ặ":"a","ằ":"a","ẳ":"a","ẵ":"a","ǎ":"a","â":"a","ấ":"a","ậ":"a","ầ":"a","ẩ":"a","ẫ":"a","ä":"a","ǟ":"a","ȧ":"a","ǡ":"a","ạ":"a","ȁ":"a","à":"a","ả":"a","ȃ":"a","ā":"a","ą":"a","ᶏ":"a","ẚ":"a","å":"a","ǻ":"a","ḁ":"a","ⱥ":"a","ã":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ḃ":"b","ḅ":"b","ɓ":"b","ḇ":"b","ᵬ":"b","ᶀ":"b","ƀ":"b","ƃ":"b","ɵ":"o","ć":"c","č":"c","ç":"c","ḉ":"c","ĉ":"c","ɕ":"c","ċ":"c","ƈ":"c","ȼ":"c","ď":"d","ḑ":"d","ḓ":"d","ȡ":"d","ḋ":"d","ḍ":"d","ɗ":"d","ᶑ":"d","ḏ":"d","ᵭ":"d","ᶁ":"d","đ":"d","ɖ":"d","ƌ":"d","ı":"i","ȷ":"j","ɟ":"j","ʄ":"j","ǳ":"dz","ǆ":"dz","é":"e","ĕ":"e","ě":"e","ȩ":"e","ḝ":"e","ê":"e","ế":"e","ệ":"e","ề":"e","ể":"e","ễ":"e","ḙ":"e","ë":"e","ė":"e","ẹ":"e","ȅ":"e","è":"e","ẻ":"e","ȇ":"e","ē":"e","ḗ":"e","ḕ":"e","ⱸ":"e","ę":"e","ᶒ":"e","ɇ":"e","ẽ":"e","ḛ":"e","ꝫ":"et","ḟ":"f","ƒ":"f","ᵮ":"f","ᶂ":"f","ǵ":"g","ğ":"g","ǧ":"g","ģ":"g","ĝ":"g","ġ":"g","ɠ":"g","ḡ":"g","ᶃ":"g","ǥ":"g","ḫ":"h","ȟ":"h","ḩ":"h","ĥ":"h","ⱨ":"h","ḧ":"h","ḣ":"h","ḥ":"h","ɦ":"h","ẖ":"h","ħ":"h","ƕ":"hv","í":"i","ĭ":"i","ǐ":"i","î":"i","ï":"i","ḯ":"i","ị":"i","ȉ":"i","ì":"i","ỉ":"i","ȋ":"i","ī":"i","į":"i","ᶖ":"i","ɨ":"i","ĩ":"i","ḭ":"i","ꝺ":"d","ꝼ":"f","ᵹ":"g","ꞃ":"r","ꞅ":"s","ꞇ":"t","ꝭ":"is","ǰ":"j","ĵ":"j","ʝ":"j","ɉ":"j","ḱ":"k","ǩ":"k","ķ":"k","ⱪ":"k","ꝃ":"k","ḳ":"k","ƙ":"k","ḵ":"k","ᶄ":"k","ꝁ":"k","ꝅ":"k","ĺ":"l","ƚ":"l","ɬ":"l","ľ":"l","ļ":"l","ḽ":"l","ȴ":"l","ḷ":"l","ḹ":"l","ⱡ":"l","ꝉ":"l","ḻ":"l","ŀ":"l","ɫ":"l","ᶅ":"l","ɭ":"l","ł":"l","ǉ":"lj","ſ":"s","ẜ":"s","ẛ":"s","ẝ":"s","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ᵯ":"m","ᶆ":"m","ń":"n","ň":"n","ņ":"n","ṋ":"n","ȵ":"n","ṅ":"n","ṇ":"n","ǹ":"n","ɲ":"n","ṉ":"n","ƞ":"n","ᵰ":"n","ᶇ":"n","ɳ":"n","ñ":"n","ǌ":"nj","ó":"o","ŏ":"o","ǒ":"o","ô":"o","ố":"o","ộ":"o","ồ":"o","ổ":"o","ỗ":"o","ö":"o","ȫ":"o","ȯ":"o","ȱ":"o","ọ":"o","ő":"o","ȍ":"o","ò":"o","ỏ":"o","ơ":"o","ớ":"o","ợ":"o","ờ":"o","ở":"o","ỡ":"o","ȏ":"o","ꝋ":"o","ꝍ":"o","ⱺ":"o","ō":"o","ṓ":"o","ṑ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","õ":"o","ṍ":"o","ṏ":"o","ȭ":"o","ƣ":"oi","ꝏ":"oo","ɛ":"e","ᶓ":"e","ɔ":"o","ᶗ":"o","ȣ":"ou","ṕ":"p","ṗ":"p","ꝓ":"p","ƥ":"p","ᵱ":"p","ᶈ":"p","ꝕ":"p","ᵽ":"p","ꝑ":"p","ꝙ":"q","ʠ":"q","ɋ":"q","ꝗ":"q","ŕ":"r","ř":"r","ŗ":"r","ṙ":"r","ṛ":"r","ṝ":"r","ȑ":"r","ɾ":"r","ᵳ":"r","ȓ":"r","ṟ":"r","ɼ":"r","ᵲ":"r","ᶉ":"r","ɍ":"r","ɽ":"r","ↄ":"c","ꜿ":"c","ɘ":"e","ɿ":"r","ś":"s","ṥ":"s","š":"s","ṧ":"s","ş":"s","ŝ":"s","ș":"s","ṡ":"s","ṣ":"s","ṩ":"s","ʂ":"s","ᵴ":"s","ᶊ":"s","ȿ":"s","ɡ":"g","ß":"ss","ᴑ":"o","ᴓ":"o","ᴝ":"u","ť":"t","ţ":"t","ṱ":"t","ț":"t","ȶ":"t","ẗ":"t","ⱦ":"t","ṫ":"t","ṭ":"t","ƭ":"t","ṯ":"t","ᵵ":"t","ƫ":"t","ʈ":"t","ŧ":"t","ᵺ":"th","ɐ":"a","ᴂ":"ae","ǝ":"e","ᵷ":"g","ɥ":"h","ʮ":"h","ʯ":"h","ᴉ":"i","ʞ":"k","ꞁ":"l","ɯ":"m","ɰ":"m","ᴔ":"oe","ɹ":"r","ɻ":"r","ɺ":"r","ⱹ":"r","ʇ":"t","ʌ":"v","ʍ":"w","ʎ":"y","ꜩ":"tz","ú":"u","ŭ":"u","ǔ":"u","û":"u","ṷ":"u","ü":"u","ǘ":"u","ǚ":"u","ǜ":"u","ǖ":"u","ṳ":"u","ụ":"u","ű":"u","ȕ":"u","ù":"u","ủ":"u","ư":"u","ứ":"u","ự":"u","ừ":"u","ử":"u","ữ":"u","ȗ":"u","ū":"u","ṻ":"u","ų":"u","ᶙ":"u","ů":"u","ũ":"u","ṹ":"u","ṵ":"u","ᵫ":"ue","ꝸ":"um","ⱴ":"v","ꝟ":"v","ṿ":"v","ʋ":"v","ᶌ":"v","ⱱ":"v","ṽ":"v","ꝡ":"vy","ẃ":"w","ŵ":"w","ẅ":"w","ẇ":"w","ẉ":"w","ẁ":"w","ⱳ":"w","ẘ":"w","ẍ":"x","ẋ":"x","ᶍ":"x","ý":"y","ŷ":"y","ÿ":"y","ẏ":"y","ỵ":"y","ỳ":"y","ƴ":"y","ỷ":"y","ỿ":"y","ȳ":"y","ẙ":"y","ɏ":"y","ỹ":"y","ź":"z","ž":"z","ẑ":"z","ʑ":"z","ⱬ":"z","ż":"z","ẓ":"z","ȥ":"z","ẕ":"z","ᵶ":"z","ᶎ":"z","ʐ":"z","ƶ":"z","ɀ":"z","ﬀ":"ff","ﬃ":"ffi","ﬄ":"ffl","ﬁ":"fi","ﬂ":"fl","ĳ":"ij","œ":"oe","ﬆ":"st","ₐ":"a","ₑ":"e","ᵢ":"i","ⱼ":"j","ₒ":"o","ᵣ":"r","ᵤ":"u","ᵥ":"v","ₓ":"x"};function initialize(object,s){if(s!==null&&s!==undefined){if(typeof s==="string")object.s=s;else object.s=s.toString()}else{object.s=s}object.orig=s;if(s!==null&&s!==undefined){if(object.__defineGetter__){object.__defineGetter__("length",function(){return object.s.length})}else{object.length=s.length}}else{object.length=-1}}function S(s){initialize(this,s)}var __nsp=String.prototype;var __sp=S.prototype={between:function(left,right){var s=this.s;var startPos=s.indexOf(left);var endPos=s.indexOf(right,startPos+left.length);if(endPos==-1&&right!=null)return new this.constructor("");else if(endPos==-1&&right==null)return new this.constructor(s.substring(startPos+left.length));else return new this.constructor(s.slice(startPos+left.length,endPos))},camelize:function(){var s=this.trim().s.replace(/(\-|_|\s)+(.)?/g,function(mathc,sep,c){return c?c.toUpperCase():""});return new this.constructor(s)},capitalize:function(){return new this.constructor(this.s.substr(0,1).toUpperCase()+this.s.substring(1).toLowerCase())},charAt:function(index){return this.s.charAt(index)},chompLeft:function(prefix){var s=this.s;if(s.indexOf(prefix)===0){s=s.slice(prefix.length);return new this.constructor(s)}else{return this}},chompRight:function(suffix){if(this.endsWith(suffix)){var s=this.s;s=s.slice(0,s.length-suffix.length);return new this.constructor(s)}else{return this}},collapseWhitespace:function(){var s=this.s.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"");return new this.constructor(s)},contains:function(ss){return this.s.indexOf(ss)>=0},count:function(ss){var count=0,pos=this.s.indexOf(ss);while(pos>=0){count+=1;pos=this.s.indexOf(ss,pos+1)}return count},dasherize:function(){var s=this.trim().s.replace(/[_\s]+/g,"-").replace(/([A-Z])/g,"-$1").replace(/-+/g,"-").toLowerCase();return new this.constructor(s)},latinise:function(){var s=this.replace(/[^A-Za-z0-9\[\] ]/g,function(x){return latin_map[x]||x});return new this.constructor(s)},decodeHtmlEntities:function(){var s=this.s;s=s.replace(/&#(\d+);?/g,function(_,code){return String.fromCharCode(code)}).replace(/&#[xX]([A-Fa-f0-9]+);?/g,function(_,hex){return String.fromCharCode(parseInt(hex,16))}).replace(/&([^;\W]+;?)/g,function(m,e){var ee=e.replace(/;$/,"");var target=ENTITIES[e]||e.match(/;$/)&&ENTITIES[ee];if(typeof target==="number"){return String.fromCharCode(target)}else if(typeof target==="string"){return target}else{return m}});return new this.constructor(s)},endsWith:function(suffix){var l=this.s.length-suffix.length;return l>=0&&this.s.indexOf(suffix,l)===l},escapeHTML:function(){return new this.constructor(this.s.replace(/[&<>"']/g,function(m){return"&"+reversedEscapeChars[m]+";"}))},ensureLeft:function(prefix){var s=this.s;if(s.indexOf(prefix)===0){return this}else{return new this.constructor(prefix+s)}},ensureRight:function(suffix){var s=this.s;if(this.endsWith(suffix)){return this}else{return new this.constructor(s+suffix)}},humanize:function(){if(this.s===null||this.s===undefined)return new this.constructor("");var s=this.underscore().replace(/_id$/,"").replace(/_/g," ").trim().capitalize();return new this.constructor(s)},isAlpha:function(){return!/[^a-z\xDF-\xFF]|^$/.test(this.s.toLowerCase())},isAlphaNumeric:function(){return!/[^0-9a-z\xDF-\xFF]/.test(this.s.toLowerCase())},isEmpty:function(){return this.s===null||this.s===undefined?true:/^[\s\xa0]*$/.test(this.s)},isLower:function(){return this.isAlpha()&&this.s.toLowerCase()===this.s},isNumeric:function(){return!/[^0-9]/.test(this.s)},isUpper:function(){return this.isAlpha()&&this.s.toUpperCase()===this.s},left:function(N){if(N>=0){var s=this.s.substr(0,N);return new this.constructor(s)}else{return this.right(-N)}},lines:function(){return this.replaceAll("\r\n","\n").s.split("\n")},pad:function(len,ch){if(ch==null)ch=" ";if(this.s.length>=len)return new this.constructor(this.s);len=len-this.s.length;var left=Array(Math.ceil(len/2)+1).join(ch);var right=Array(Math.floor(len/2)+1).join(ch);return new this.constructor(left+this.s+right)},padLeft:function(len,ch){if(ch==null)ch=" ";if(this.s.length>=len)return new this.constructor(this.s);return new this.constructor(Array(len-this.s.length+1).join(ch)+this.s)},padRight:function(len,ch){if(ch==null)ch=" ";if(this.s.length>=len)return new this.constructor(this.s);return new this.constructor(this.s+Array(len-this.s.length+1).join(ch))},parseCSV:function(delimiter,qualifier,escape,lineDelimiter){delimiter=delimiter||",";escape=escape||"\\";if(typeof qualifier=="undefined")qualifier='"';var i=0,fieldBuffer=[],fields=[],len=this.s.length,inField=false,inUnqualifiedString=false,self=this;var ca=function(i){return self.s.charAt(i)};if(typeof lineDelimiter!=="undefined")var rows=[];if(!qualifier)inField=true;while(i<len){var current=ca(i);switch(current){case escape:if(inField&&(escape!==qualifier||ca(i+1)===qualifier)){i+=1;fieldBuffer.push(ca(i));break}if(escape!==qualifier)break;case qualifier:inField=!inField;break;case delimiter:if(inUnqualifiedString){inField=false;inUnqualifiedString=false}if(inField&&qualifier)fieldBuffer.push(current);else{fields.push(fieldBuffer.join(""));fieldBuffer.length=0}break;case lineDelimiter:if(inUnqualifiedString){inField=false;inUnqualifiedString=false;fields.push(fieldBuffer.join(""));rows.push(fields);fields=[];fieldBuffer.length=0}else if(inField){fieldBuffer.push(current)}else{if(rows){fields.push(fieldBuffer.join(""));rows.push(fields);fields=[];fieldBuffer.length=0}}break;case" ":if(inField)fieldBuffer.push(current);break;default:if(inField)fieldBuffer.push(current);else if(current!==qualifier){fieldBuffer.push(current);inField=true;inUnqualifiedString=true}break}i+=1}fields.push(fieldBuffer.join(""));if(rows){rows.push(fields);return rows}return fields},replaceAll:function(ss,r){var s=this.s.split(ss).join(r);return new this.constructor(s)},right:function(N){if(N>=0){var s=this.s.substr(this.s.length-N,N);return new this.constructor(s)}else{return this.left(-N)}},setValue:function(s){initialize(this,s);return this},slugify:function(){var sl=new S(new S(this.s).latinise().s.replace(/[^\w\s-]/g,"").toLowerCase()).dasherize().s;if(sl.charAt(0)==="-")sl=sl.substr(1);return new this.constructor(sl)},startsWith:function(prefix){return this.s.lastIndexOf(prefix,0)===0},stripPunctuation:function(){return new this.constructor(this.s.replace(/[^\w\s]|_/g,"").replace(/\s+/g," "))},stripTags:function(){var s=this.s,args=arguments.length>0?arguments:[""];multiArgs(args,function(tag){s=s.replace(RegExp("</?"+tag+"[^<>]*>","gi"),"")});return new this.constructor(s)},template:function(values,opening,closing){var s=this.s;var opening=opening||Export.TMPL_OPEN;var closing=closing||Export.TMPL_CLOSE;var open=opening.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$");var close=closing.replace(/[-[\]()*\s]/g,"\\$&").replace(/\$/g,"\\$");var r=new RegExp(open+"(.+?)"+close,"g");var matches=s.match(r)||[];matches.forEach(function(match){var key=match.substring(opening.length,match.length-closing.length);if(typeof values[key]!="undefined")s=s.replace(match,values[key])});return new this.constructor(s)},times:function(n){return new this.constructor(new Array(n+1).join(this.s))},toBoolean:function(){if(typeof this.orig==="string"){var s=this.s.toLowerCase();return s==="true"||s==="yes"||s==="on"||s==="1"}else return this.orig===true||this.orig===1},toFloat:function(precision){var num=parseFloat(this.s);if(precision)return parseFloat(num.toFixed(precision));else return num},toInt:function(){return/^\s*-?0x/i.test(this.s)?parseInt(this.s,16):parseInt(this.s,10)},trim:function(){var s;if(typeof __nsp.trim==="undefined")s=this.s.replace(/(^\s*|\s*$)/g,"");else s=this.s.trim();return new this.constructor(s)},trimLeft:function(){var s;if(__nsp.trimLeft)s=this.s.trimLeft();else s=this.s.replace(/(^\s*)/g,"");return new this.constructor(s)},trimRight:function(){var s;if(__nsp.trimRight)s=this.s.trimRight();else s=this.s.replace(/\s+$/,"");return new this.constructor(s)},truncate:function(length,pruneStr){var str=this.s;length=~~length;pruneStr=pruneStr||"...";if(str.length<=length)return new this.constructor(str);var tmpl=function(c){return c.toUpperCase()!==c.toLowerCase()?"A":" "},template=str.slice(0,length+1).replace(/.(?=\W*\w*$)/g,tmpl);if(template.slice(template.length-2).match(/\w\w/))template=template.replace(/\s*\S+$/,"");else template=new S(template.slice(0,template.length-1)).trimRight().s;return(template+pruneStr).length>str.length?new S(str):new S(str.slice(0,template.length)+pruneStr)},toCSV:function(){var delim=",",qualifier='"',escape="\\",encloseNumbers=true,keys=false;var dataArray=[];function hasVal(it){return it!==null&&it!==""}if(typeof arguments[0]==="object"){delim=arguments[0].delimiter||delim;delim=arguments[0].separator||delim;qualifier=arguments[0].qualifier||qualifier;encloseNumbers=!!arguments[0].encloseNumbers;escape=arguments[0].escape||escape;keys=!!arguments[0].keys}else if(typeof arguments[0]==="string"){delim=arguments[0]}if(typeof arguments[1]==="string")qualifier=arguments[1];if(arguments[1]===null)qualifier=null;if(this.orig instanceof Array)dataArray=this.orig;else{for(var key in this.orig)if(this.orig.hasOwnProperty(key))if(keys)dataArray.push(key);else dataArray.push(this.orig[key])}var rep=escape+qualifier;var buildString=[];for(var i=0;i<dataArray.length;++i){var shouldQualify=hasVal(qualifier);if(typeof dataArray[i]=="number")shouldQualify&=encloseNumbers;if(shouldQualify)buildString.push(qualifier);if(dataArray[i]!==null&&dataArray[i]!==undefined){var d=new S(dataArray[i]).replaceAll(qualifier,rep).s;buildString.push(d)}else buildString.push("");if(shouldQualify)buildString.push(qualifier);if(delim)buildString.push(delim)}buildString.length=buildString.length-1;return new this.constructor(buildString.join(""))},toString:function(){return this.s},underscore:function(){var s=this.trim().s.replace(/([a-z\d])([A-Z]+)/g,"$1_$2").replace(/[-\s]+/g,"_").toLowerCase();if(new S(this.s.charAt(0)).isUpper()){s="_"+s}return new this.constructor(s)},unescapeHTML:function(){return new this.constructor(this.s.replace(/\&([^;]+);/g,function(entity,entityCode){var match;if(entityCode in escapeChars){return escapeChars[entityCode]}else if(match=entityCode.match(/^#x([\da-fA-F]+)$/)){return String.fromCharCode(parseInt(match[1],16))}else if(match=entityCode.match(/^#(\d+)$/)){return String.fromCharCode(~~match[1])}else{return entity}}))},valueOf:function(){return this.s.valueOf()},wrapHTML:function(tagName,tagAttrs){var s=this.s,el=tagName==null?"span":tagName,elAttr="",wrapped="";if(typeof tagAttrs=="object")for(var prop in tagAttrs)elAttr+=" "+prop+'="'+new this.constructor(tagAttrs[prop]).escapeHTML()+'"';s=wrapped.concat("<",el,elAttr,">",this,"</",el,">");return new this.constructor(s)}};var methodsAdded=[];function extendPrototype(){for(var name in __sp){(function(name){var func=__sp[name];if(!__nsp.hasOwnProperty(name)){methodsAdded.push(name);__nsp[name]=function(){String.prototype.s=this;return func.apply(this,arguments)}}})(name)}}function restorePrototype(){for(var i=0;i<methodsAdded.length;++i)delete String.prototype[methodsAdded[i]];methodsAdded.length=0}var nativeProperties=getNativeStringProperties();for(var name in nativeProperties){(function(name){var stringProp=__nsp[name];if(typeof stringProp=="function"){if(!__sp[name]){if(nativeProperties[name]==="string"){__sp[name]=function(){return new this.constructor(stringProp.apply(this,arguments))}}else{__sp[name]=stringProp}}}})(name)}__sp.repeat=__sp.times;__sp.include=__sp.contains;__sp.toInteger=__sp.toInt;__sp.toBool=__sp.toBoolean;__sp.decodeHTMLEntities=__sp.decodeHtmlEntities;__sp.constructor=S;function getNativeStringProperties(){var names=getNativeStringPropertyNames();var retObj={};for(var i=0;i<names.length;++i){var name=names[i];var func=__nsp[name];try{var type=typeof func.apply("teststring",[]);retObj[name]=type}catch(e){}}return retObj}function getNativeStringPropertyNames(){var results=[];if(Object.getOwnPropertyNames){results=Object.getOwnPropertyNames(__nsp);results.splice(results.indexOf("valueOf"),1);results.splice(results.indexOf("toString"),1);return results}else{var stringNames={};var objectNames=[];for(var name in String.prototype)stringNames[name]=name;for(var name in Object.prototype)delete stringNames[name];for(var name in stringNames){results.push(name)}return results}}function Export(str){return new S(str)}Export.extendPrototype=extendPrototype;Export.restorePrototype=restorePrototype;Export.VERSION=VERSION;Export.TMPL_OPEN="{{";Export.TMPL_CLOSE="}}";Export.ENTITIES=ENTITIES;if(typeof module!=="undefined"&&typeof module.exports!=="undefined"){module.exports=Export}else{if(typeof define==="function"&&define.amd){define([],function(){return Export})}else{window.S=Export}}function multiArgs(args,fn){var result=[],i;for(i=0;i<args.length;i++){result.push(args[i]);if(fn)fn.call(args,args[i],i)}return result}var escapeChars={lt:"<",gt:">",quot:'"',apos:"'",amp:"&"};var reversedEscapeChars={};for(var key in escapeChars){reversedEscapeChars[escapeChars[key]]=key}ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,"OElig;":338,"oelig;":339,"Scaron;":352,"scaron;":353,"Yuml;":376,"fnof;":402,"circ;":710,"tilde;":732,"Alpha;":913,"Beta;":914,"Gamma;":915,"Delta;":916,"Epsilon;":917,"Zeta;":918,"Eta;":919,"Theta;":920,"Iota;":921,"Kappa;":922,"Lambda;":923,"Mu;":924,"Nu;":925,"Xi;":926,"Omicron;":927,"Pi;":928,"Rho;":929,"Sigma;":931,"Tau;":932,"Upsilon;":933,"Phi;":934,"Chi;":935,"Psi;":936,"Omega;":937,"alpha;":945,"beta;":946,"gamma;":947,"delta;":948,"epsilon;":949,"zeta;":950,"eta;":951,"theta;":952,"iota;":953,"kappa;":954,"lambda;":955,"mu;":956,"nu;":957,"xi;":958,"omicron;":959,"pi;":960,"rho;":961,"sigmaf;":962,"sigma;":963,"tau;":964,"upsilon;":965,"phi;":966,"chi;":967,"psi;":968,"omega;":969,"thetasym;":977,"upsih;":978,"piv;":982,"ensp;":8194,"emsp;":8195,"thinsp;":8201,"zwnj;":8204,"zwj;":8205,"lrm;":8206,"rlm;":8207,"ndash;":8211,"mdash;":8212,"lsquo;":8216,"rsquo;":8217,"sbquo;":8218,"ldquo;":8220,"rdquo;":8221,"bdquo;":8222,"dagger;":8224,"Dagger;":8225,"bull;":8226,"hellip;":8230,"permil;":8240,"prime;":8242,"Prime;":8243,"lsaquo;":8249,"rsaquo;":8250,"oline;":8254,"frasl;":8260,"euro;":8364,"image;":8465,"weierp;":8472,"real;":8476,"trade;":8482,"alefsym;":8501,"larr;":8592,"uarr;":8593,"rarr;":8594,"darr;":8595,"harr;":8596,"crarr;":8629,"lArr;":8656,"uArr;":8657,"rArr;":8658,"dArr;":8659,"hArr;":8660,"forall;":8704,"part;":8706,"exist;":8707,"empty;":8709,"nabla;":8711,"isin;":8712,"notin;":8713,"ni;":8715,"prod;":8719,"sum;":8721,"minus;":8722,"lowast;":8727,"radic;":8730,"prop;":8733,"infin;":8734,"ang;":8736,"and;":8743,"or;":8744,"cap;":8745,"cup;":8746,"int;":8747,"there4;":8756,"sim;":8764,"cong;":8773,"asymp;":8776,"ne;":8800,"equiv;":8801,"le;":8804,"ge;":8805,"sub;":8834,"sup;":8835,"nsub;":8836,"sube;":8838,"supe;":8839,"oplus;":8853,"otimes;":8855,"perp;":8869,"sdot;":8901,"lceil;":8968,"rceil;":8969,"lfloor;":8970,"rfloor;":8971,"lang;":9001,"rang;":9002,"loz;":9674,"spades;":9824,"clubs;":9827,"hearts;":9829,"diams;":9830}}.call(this);
},{}],3:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresAnimationBlockCtrlModule', []).controller('ceresAnimationBlockCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],4:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresButtonOutlineCtrlModule', []).controller('ceresButtonOutlineCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],5:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresButtonSolidCtrlModule', []).controller('ceresButtonSolidCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],6:[function(require,module,exports){
'use strict';
var snazzy = require('./snazzy');
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");

// home module
angular.module('ceresGoogleMapCtrlModule', []).controller('ceresGoogleMapCtrl', [
    '$scope',
    '$window',
    '$element',
    '$log',
    function ($scope, $window, $element, $log) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        $scope.map = {
            center: {
                latitude: data.location_lat,
                longitude: data.location_long
            },
            zoom: data.map_zoom,
            draggable: data.draggable
        };

        var value =
            _.find(snazzy.styles, function (style) {
                return style.name == data.styling;
            });

        $scope.options = {};
        if (value) {
            $scope.options.styles = value.json
        }

        $scope.options.mapTypeId = $window.google.maps.MapTypeId[data.map_type];
        $scope.options.scrollwheel = !data.display_map_zoom_scroll;
        $scope.options.mapTypeControl = data.map_type_control;
        $scope.options.panControl = data.pan_control;

        $scope.options.streetViewControl = data.street_view_control;

        $scope.options.zoomControl = data.zoom_control;
        var zoomSize = data.zoom_control_size.toUpperCase();
        $scope.options.zoomControlOptions = {
            style: $window.google.maps.ZoomControlStyle[zoomSize]
        };

    }
]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./snazzy":7}],7:[function(require,module,exports){
module.exports = {
    styles: [
        {"name": "Default", "json": []},
        {"id": 15, "name": "Subtle Grayscale", "json": [
            {"featureType": "landscape", "stylers": [
                {"saturation": -100},
                {"lightness": 65},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "stylers": [
                {"saturation": -100},
                {"lightness": 51},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"saturation": -100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"saturation": -100},
                {"lightness": 30},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"saturation": -100},
                {"lightness": 40},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "stylers": [
                {"saturation": -100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative.province", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"visibility": "on"},
                {"lightness": -25},
                {"saturation": -100}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"hue": "#ffff00"},
                {"lightness": -25},
                {"saturation": -97}
            ]}
        ]},
        {"id": 1, "name": "Pale Dawn", "json": [
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"color": "#acbcc9"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#f2e5d4"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#c5c6c6"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#e4d7c6"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#fbfaf7"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"color": "#c5dac6"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "on"},
                {"lightness": 33}
            ]},
            {"featureType": "road"},
            {"featureType": "poi.park", "elementType": "labels", "stylers": [
                {"visibility": "on"},
                {"lightness": 20}
            ]},
            {},
            {"featureType": "road", "stylers": [
                {"lightness": 20}
            ]}
        ]},
        {"id": 25, "name": "Blue water", "json": [
            {"featureType": "water", "stylers": [
                {"color": "#46bcec"},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#f2f2f2"}
            ]},
            {"featureType": "road", "stylers": [
                {"saturation": -100},
                {"lightness": 45}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.fill", "stylers": [
                {"color": "#444444"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 38, "name": "Shades of Grey", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#000000"},
                {"lightness": 17}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#000000"},
                {"lightness": 20}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#000000"},
                {"lightness": 17}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000000"},
                {"lightness": 29},
                {"weight": 0.2}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#000000"},
                {"lightness": 18}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#000000"},
                {"lightness": 16}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#000000"},
                {"lightness": 21}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "on"},
                {"color": "#000000"},
                {"lightness": 16}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"saturation": 36},
                {"color": "#000000"},
                {"lightness": 40}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#000000"},
                {"lightness": 19}
            ]},
            {"featureType": "administrative", "elementType": "geometry.fill", "stylers": [
                {"color": "#000000"},
                {"lightness": 20}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000000"},
                {"lightness": 17},
                {"weight": 1.2}
            ]}
        ]},
        {"id": 2, "name": "Midnight Commander", "json": [
            {"featureType": "water", "stylers": [
                {"color": "#021019"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#08304b"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#0c4152"},
                {"lightness": 5}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#000000"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#0b434f"},
                {"lightness": 25}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#000000"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"color": "#0b3d51"},
                {"lightness": 16}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#000000"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"color": "#000000"},
                {"lightness": 13}
            ]},
            {"featureType": "transit", "stylers": [
                {"color": "#146474"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.fill", "stylers": [
                {"color": "#000000"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"color": "#144b53"},
                {"lightness": 14},
                {"weight": 1.4}
            ]}
        ]},

        {"id": 18, "name": "Retro", "json": [
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#84afa3"},
                {"lightness": 52}
            ]},
            {"stylers": [
                {"saturation": -17},
                {"gamma": 0.36}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"color": "#3f518c"}
            ]}
        ]},
        {"id": 29, "name": "Light Monochrome", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#e9ebed"},
                {"saturation": -78},
                {"lightness": 67},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"hue": "#bbc0c4"},
                {"saturation": -93},
                {"lightness": 31},
                {"visibility": "simplified"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"hue": "#e9ebed"},
                {"saturation": -90},
                {"lightness": -8},
                {"visibility": "simplified"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"hue": "#e9ebed"},
                {"saturation": 10},
                {"lightness": 69},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.locality", "elementType": "all", "stylers": [
                {"hue": "#2c2e33"},
                {"saturation": 7},
                {"lightness": 19},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"hue": "#bbc0c4"},
                {"saturation": -93},
                {"lightness": 31},
                {"visibility": "on"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels", "stylers": [
                {"hue": "#bbc0c4"},
                {"saturation": -93},
                {"lightness": -2},
                {"visibility": "simplified"}
            ]}
        ]},
        {"id": 39, "name": "Paper", "json": [
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#5f94ff"},
                {"lightness": 26},
                {"gamma": 5.86}
            ]},
            {},
            {"featureType": "road.highway", "stylers": [
                {"weight": 0.6},
                {"saturation": -85},
                {"lightness": 61}
            ]},
            {"featureType": "road"},
            {},
            {"featureType": "landscape", "stylers": [
                {"hue": "#0066ff"},
                {"saturation": 74},
                {"lightness": 100}
            ]}
        ]},
        {"id": 42, "name": "Apple Maps-esque", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#a2daf2"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry", "stylers": [
                {"color": "#f7f1df"}
            ]},
            {"featureType": "landscape.natural", "elementType": "geometry", "stylers": [
                {"color": "#d0e3b4"}
            ]},
            {"featureType": "landscape.natural.terrain", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"color": "#bde6ab"}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.medical", "elementType": "geometry", "stylers": [
                {"color": "#fbd3da"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffe15f"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#efd151"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.fill", "stylers": [
                {"color": "black"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "geometry.fill", "stylers": [
                {"color": "#cfb2db"}
            ]}
        ]},
        {"id": 20, "name": "Gowalla", "json": [
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "simplified"},
                {"lightness": 20}
            ]},
            {"featureType": "administrative.land_parcel", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "labels", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#a1cdfc"},
                {"saturation": 30},
                {"lightness": 49}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"hue": "#f49935"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"hue": "#fad959"}
            ]}
        ]},
        {"id": 5, "name": "Greyscale", "json": [
            {"featureType": "all", "stylers": [
                {"saturation": -100},
                {"gamma": 0.5}
            ]}
        ]},
        {"id": 19, "name": "Subtle", "json": [
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"stylers": [
                {"saturation": -70},
                {"lightness": 37},
                {"gamma": 1.15}
            ]},
            {"elementType": "labels", "stylers": [
                {"gamma": 0.26},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "stylers": [
                {"lightness": 0},
                {"saturation": 0},
                {"hue": "#ffffff"},
                {"gamma": 0}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"lightness": 20}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"lightness": 50},
                {"saturation": 0},
                {"hue": "#ffffff"}
            ]},
            {"featureType": "administrative.province", "stylers": [
                {"visibility": "on"},
                {"lightness": -50}
            ]},
            {"featureType": "administrative.province", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.province", "elementType": "labels.text", "stylers": [
                {"lightness": 20}
            ]}
        ]},
        {"id": 53, "name": "Flat Map", "json": [
            {"stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "on"},
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"visibility": "on"},
                {"color": "#fee379"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"visibility": "on"},
                {"color": "#fee379"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "on"},
                {"color": "#f3f4f4"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"color": "#7fc8ed"}
            ]},
            {},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#83cead"}
            ]},
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry", "stylers": [
                {"weight": 0.9},
                {"visibility": "off"}
            ]}
        ]},
        {"id": 13, "name": "Neutral Blue", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#193341"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#2c5a71"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"color": "#29768a"},
                {"lightness": -37}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#406d80"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#406d80"}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "on"},
                {"color": "#3e606f"},
                {"weight": 2},
                {"gamma": 0.84}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"weight": 0.6},
                {"color": "#1a3541"}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"color": "#2c5a71"}
            ]}
        ]},
        {"id": 27, "name": "Shift Worker", "json": [
            {"stylers": [
                {"saturation": -100},
                {"gamma": 1}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.business", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.business", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.place_of_worship", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.place_of_worship", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"saturation": 50},
                {"gamma": 0},
                {"hue": "#50a5d1"}
            ]},
            {"featureType": "administrative.neighborhood", "elementType": "labels.text.fill", "stylers": [
                {"color": "#333333"}
            ]},
            {"featureType": "road.local", "elementType": "labels.text", "stylers": [
                {"weight": 0.5},
                {"color": "#333333"}
            ]},
            {"featureType": "transit.station", "elementType": "labels.icon", "stylers": [
                {"gamma": 1},
                {"saturation": 50}
            ]}
        ]},
        {"id": 44, "name": "MapBox", "json": [
            {"featureType": "water", "stylers": [
                {"saturation": 43},
                {"lightness": -11},
                {"hue": "#0088ff"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"hue": "#ff0000"},
                {"saturation": -100},
                {"lightness": 99}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"color": "#808080"},
                {"lightness": 54}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.fill", "stylers": [
                {"color": "#ece2d9"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry.fill", "stylers": [
                {"color": "#ccdca1"}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"color": "#767676"}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.natural", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#b8cb93"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "poi.sports_complex", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "poi.medical", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"visibility": "simplified"}
            ]}
        ]},
        {"id": 54, "name": "RouteXL", "json": [
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"visibility": "on"},
                {"saturation": -100},
                {"lightness": 20}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"visibility": "on"},
                {"saturation": -100},
                {"lightness": 40}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": [
                {"visibility": "on"},
                {"saturation": -10},
                {"lightness": 30}
            ]},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": [
                {"visibility": "simplified"},
                {"saturation": -60},
                {"lightness": 10}
            ]},
            {"featureType": "landscape.natural", "elementType": "all", "stylers": [
                {"visibility": "simplified"},
                {"saturation": -60},
                {"lightness": 60}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"visibility": "off"},
                {"saturation": -100},
                {"lightness": 60}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"visibility": "off"},
                {"saturation": -100},
                {"lightness": 60}
            ]}
        ]},
        {"id": 37, "name": "Lunar Landscape", "json": [
            {"stylers": [
                {"hue": "#ff1a00"},
                {"invert_lightness": true},
                {"saturation": -100},
                {"lightness": 33},
                {"gamma": 0.5}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#2D333C"}
            ]}
        ]},
        {"id": 35, "name": "Avocado World", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#aee2e0"}
            ]},
            {"featureType": "landscape", "elementType": "geometry.fill", "stylers": [
                {"color": "#abce83"}
            ]},
            {"featureType": "poi", "elementType": "geometry.fill", "stylers": [
                {"color": "#769E72"}
            ]},
            {"featureType": "poi", "elementType": "labels.text.fill", "stylers": [
                {"color": "#7B8758"}
            ]},
            {"featureType": "poi", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#EBF4A4"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"},
                {"color": "#8dab68"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"color": "#5B5B3F"}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ABCE83"}
            ]},
            {"featureType": "road", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#A4C67D"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#9BBF72"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#EBF4A4"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "on"},
                {"color": "#87ae79"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.fill", "stylers": [
                {"color": "#7f2200"},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "on"},
                {"weight": 4.1}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.fill", "stylers": [
                {"color": "#495421"}
            ]},
            {"featureType": "administrative.neighborhood", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 17, "name": "Bright &amp; Bubbly", "json": [
            {"featureType": "water", "stylers": [
                {"color": "#19a0d8"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"},
                {"weight": 6}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.fill", "stylers": [
                {"color": "#e85113"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#efe9e4"},
                {"lightness": -40}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"color": "#efe9e4"},
                {"lightness": -20}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"lightness": 100}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"lightness": -100}
            ]},
            {"featureType": "road.highway", "elementType": "labels.icon"},
            {"featureType": "landscape", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"lightness": 20},
                {"color": "#efe9e4"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "labels.text.stroke", "stylers": [
                {"lightness": 100}
            ]},
            {"featureType": "water", "elementType": "labels.text.fill", "stylers": [
                {"lightness": -100}
            ]},
            {"featureType": "poi", "elementType": "labels.text.fill", "stylers": [
                {"hue": "#11ff00"}
            ]},
            {"featureType": "poi", "elementType": "labels.text.stroke", "stylers": [
                {"lightness": 100}
            ]},
            {"featureType": "poi", "elementType": "labels.icon", "stylers": [
                {"hue": "#4cff00"},
                {"saturation": 58}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#f0e4d3"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#efe9e4"},
                {"lightness": -25}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#efe9e4"},
                {"lightness": -10}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "simplified"}
            ]}
        ]},
        {"id": 80, "name": "Cool Grey", "json": [
            {"featureType": "landscape", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"stylers": [
                {"hue": "#00aaff"},
                {"saturation": -100},
                {"gamma": 2.15},
                {"lightness": 12}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"visibility": "on"},
                {"lightness": 24}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 57}
            ]}
        ]},
        {"id": 6, "name": "Countries", "json": [
            {"featureType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"lightness": -100}
            ]}
        ]},
        {"id": 43, "name": "Bentley", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#F1FF00"},
                {"saturation": -27.4},
                {"lightness": 9.4},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#0099FF"},
                {"saturation": -20},
                {"lightness": 36.4},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#00FF4F"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#FFB300"},
                {"saturation": -38},
                {"lightness": 11.2},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00B6FF"},
                {"saturation": 4.2},
                {"lightness": -63.4},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#9FFF00"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]}
        ]},
        {"id": 22, "name": "Old Timey", "json": [
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#84afa3"},
                {"lightness": 52}
            ]},
            {"stylers": [
                {"saturation": -77}
            ]},
            {"featureType": "road"}
        ]},
        {"id": 7, "name": "Icy Blue", "json": [
            {"stylers": [
                {"hue": "#2c3e50"},
                {"saturation": 250}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 50},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 74, "name": "becomeadinosaur", "json": [
            {"elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.natural", "elementType": "geometry.fill", "stylers": [
                {"color": "#f5f5f2"},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.attraction", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.medical", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.place_of_worship", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.school", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.sports_complex", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"visibility": "simplified"},
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.icon", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "poi.park", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#71c8d4"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#e5e8e7"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"color": "#8ba129"}
            ]},
            {"featureType": "road", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "poi.sports_complex", "elementType": "geometry", "stylers": [
                {"color": "#c7c7c7"},
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#a0d3d3"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"color": "#91b65d"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"gamma": 1.51}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "poi.government", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road"},
            {"featureType": "road"},
            {},
            {"featureType": "road.highway"}
        ]},
        {"id": 61, "name": "Blue Essence", "json": [
            {"featureType": "landscape.natural", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#e0efef"}
            ]},
            {"featureType": "poi", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"hue": "#1900ff"},
                {"color": "#c0e8e8"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.fill"},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#7dcdcd"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"lightness": 700}
            ]}
        ]},
        {"id": 12, "name": "Snazzy Maps", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#333739"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#2ecc71"}
            ]},
            {"featureType": "poi", "stylers": [
                {"color": "#2ecc71"},
                {"lightness": -7}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#2ecc71"},
                {"lightness": -28}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#2ecc71"},
                {"visibility": "on"},
                {"lightness": -15}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#2ecc71"},
                {"lightness": -18}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#2ecc71"},
                {"lightness": -34}
            ]},
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#333739"},
                {"weight": 0.8}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"color": "#2ecc71"}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"color": "#333739"},
                {"weight": 0.3},
                {"lightness": 10}
            ]}
        ]},
        {"id": 60, "name": "Blue Gray", "json": [
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"color": "#b5cbe4"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#efefef"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#83a5b0"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#bdcdd3"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"color": "#e3eed3"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "on"},
                {"lightness": 33}
            ]},
            {"featureType": "road"},
            {"featureType": "poi.park", "elementType": "labels", "stylers": [
                {"visibility": "on"},
                {"lightness": 20}
            ]},
            {},
            {"featureType": "road", "stylers": [
                {"lightness": 20}
            ]}
        ]},
        {"id": 55, "name": "Subtle Greyscale Map", "json": [
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"hue": "#000000"},
                {"saturation": 0},
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "elementType": "labels", "stylers": [
                {"hue": "#000000"},
                {"saturation": 0},
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "elementType": "labels", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"hue": "#bbbbbb"},
                {"saturation": -100},
                {"lightness": 26},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"hue": "#dddddd"},
                {"saturation": -100},
                {"lightness": -3},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 30, "name": "Cobalt", "json": [
            {"featureType": "all", "elementType": "all", "stylers": [
                {"invert_lightness": true},
                {"saturation": 10},
                {"lightness": 30},
                {"gamma": 0.5},
                {"hue": "#435158"}
            ]}
        ]},
        {"id": 79, "name": "Black and White", "json": [
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"color": "#000000"},
                {"weight": 1}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000000"},
                {"weight": 0.8}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "labels.text", "stylers": [
                {"visibility": "on"}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#000000"}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "on"}
            ]}
        ]},
        {"id": 31, "name": "Red Hues", "json": [
            {"stylers": [
                {"hue": "#dd0d0d"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 100},
                {"visibility": "simplified"}
            ]}
        ]},
        {"id": 21, "name": "Hopper", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"hue": "#165c64"},
                {"saturation": 34},
                {"lightness": -69},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"hue": "#b7caaa"},
                {"saturation": -14},
                {"lightness": -18},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": [
                {"hue": "#cbdac1"},
                {"saturation": -6},
                {"lightness": -9},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"hue": "#8d9b83"},
                {"saturation": -89},
                {"lightness": -12},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"hue": "#d4dad0"},
                {"saturation": -88},
                {"lightness": 54},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"hue": "#bdc5b6"},
                {"saturation": -89},
                {"lightness": -3},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"hue": "#bdc5b6"},
                {"saturation": -89},
                {"lightness": -26},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"hue": "#c17118"},
                {"saturation": 61},
                {"lightness": -45},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.park", "elementType": "all", "stylers": [
                {"hue": "#8ba975"},
                {"saturation": -46},
                {"lightness": -28},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"hue": "#a43218"},
                {"saturation": 74},
                {"lightness": -51},
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative.province", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative.neighborhood", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.land_parcel", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"hue": "#3a3935"},
                {"saturation": 5},
                {"lightness": -57},
                {"visibility": "off"}
            ]},
            {"featureType": "poi.medical", "elementType": "geometry", "stylers": [
                {"hue": "#cba923"},
                {"saturation": 50},
                {"lightness": -46},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 47, "name": "Nature", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#FFA800"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#53FF00"},
                {"saturation": -73},
                {"lightness": 40},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#FBFF00"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#00FFFD"},
                {"saturation": 0},
                {"lightness": 30},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00BFFF"},
                {"saturation": 6},
                {"lightness": 8},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#679714"},
                {"saturation": 33.4},
                {"lightness": -25.4},
                {"gamma": 1}
            ]}
        ]},
        {"id": 77, "name": "Clean Cut", "json": [
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#C6E2FF"}
            ]},
            {"featureType": "poi", "elementType": "geometry.fill", "stylers": [
                {"color": "#C5E3BF"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"color": "#D1D1B8"}
            ]}
        ]},
        {"id": 16, "name": "Unimposed Topography", "json": [
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#727D82"},
                {"lightness": -30},
                {"saturation": -80}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": [
                {"visibility": "simplified"},
                {"hue": "#F3F4F4"},
                {"lightness": 80},
                {"saturation": -80}
            ]}
        ]},
        {"id": 36, "name": "Flat green", "json": [
            {"stylers": [
                {"hue": "#bbff00"},
                {"weight": 0.5},
                {"gamma": 0.5}
            ]},
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"color": "#a4cc48"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "on"},
                {"weight": 1}
            ]},
            {"featureType": "administrative", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"visibility": "simplified"},
                {"gamma": 1.14},
                {"saturation": -18}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "labels", "stylers": [
                {"saturation": 30},
                {"gamma": 0.76}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "simplified"},
                {"weight": 0.4},
                {"lightness": -8}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#4aaecc"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"color": "#718e32"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"saturation": 68},
                {"lightness": -61}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels.text.stroke", "stylers": [
                {"weight": 2.7},
                {"color": "#f4f9e8"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.stroke", "stylers": [
                {"weight": 1.5},
                {"color": "#e53013"},
                {"saturation": -42},
                {"lightness": 28}
            ]}
        ]},
        {"id": 3, "name": "Red Alert", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#ffdfa6"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#b52127"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#c5531b"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#74001b"},
                {"lightness": -10}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#da3c3c"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#74001b"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"color": "#da3c3c"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.fill", "stylers": [
                {"color": "#990c19"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"color": "#74001b"},
                {"lightness": -8}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#6a0d10"},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"color": "#ffdfa6"},
                {"weight": 0.4}
            ]},
            {"featureType": "road.local", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 8, "name": "Turquoise Water", "json": [
            {"stylers": [
                {"hue": "#16a085"},
                {"saturation": 0}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 14, "name": "Vintage", "json": [
            {"stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"color": "#2f343b"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "on"},
                {"color": "#703030"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "on"},
                {"color": "#2f343b"},
                {"weight": 1}
            ]}
        ]},
        {"id": 52, "name": "Souldisco", "json": [
            {"stylers": [
                {"saturation": -100},
                {"gamma": 0.8},
                {"lightness": 4},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"visibility": "on"},
                {"color": "#5dff00"},
                {"gamma": 4.97},
                {"lightness": -5},
                {"saturation": 100}
            ]}
        ]},
        {"id": 28, "name": "Bluish", "json": [
            {"stylers": [
                {"hue": "#007fff"},
                {"saturation": 89}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "administrative.country", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 83, "name": "Muted Blue", "json": [
            {"featureType": "all", "stylers": [
                {"saturation": 0},
                {"hue": "#e7ecf0"}
            ]},
            {"featureType": "road", "stylers": [
                {"saturation": -70}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"},
                {"saturation": -60}
            ]}
        ]},
        {"id": 58, "name": "Simple Labels", "json": [
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 46, "name": "Homage to Toner", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": -100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#FFFFFF"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": []},
            {"featureType": "landscape.natural", "elementType": "all", "stylers": []},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#333333"},
                {"saturation": -100},
                {"lightness": -69},
                {"visibility": "simplified"}
            ]},
            {"featureType": "poi.attraction", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "poi.government", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]}
        ]},
        {"id": 65, "name": "Just places", "json": [
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#fffffa"}
            ]},
            {"featureType": "water", "stylers": [
                {"lightness": 50}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"lightness": 40}
            ]}
        ]},
        {"id": 40, "name": "Vitamin C", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#004358"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#1f8a70"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#1f8a70"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#fd7400"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#1f8a70"},
                {"lightness": -20}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#1f8a70"},
                {"lightness": -17}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "on"},
                {"weight": 0.9}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#ffffff"}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#1f8a70"},
                {"lightness": -10}
            ]},
            {},
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"color": "#1f8a70"},
                {"weight": 0.7}
            ]}
        ]},
        {"id": 82, "name": "Grass is greener. Water is bluer.", "json": [
            {"stylers": [
                {"saturation": -100}
            ]},
            {"featureType": "water", "elementType": "geometry.fill", "stylers": [
                {"color": "#0099dd"}
            ]},
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry.fill", "stylers": [
                {"color": "#aadd55"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels.text", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "labels.text", "stylers": [
                {"visibility": "on"}
            ]},
            {}
        ]},
        {"id": 75, "name": "Shade of green", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#76aee3"},
                {"saturation": 38},
                {"lightness": -11},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "all", "stylers": [
                {"hue": "#8dc749"},
                {"saturation": -47},
                {"lightness": -17},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.park", "elementType": "all", "stylers": [
                {"hue": "#c6e3a4"},
                {"saturation": 17},
                {"lightness": -2},
                {"visibility": "on"}
            ]},
            {"featureType": "road.arterial", "elementType": "all", "stylers": [
                {"hue": "#cccccc"},
                {"saturation": -100},
                {"lightness": 13},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.land_parcel", "elementType": "all", "stylers": [
                {"hue": "#5f5855"},
                {"saturation": 6},
                {"lightness": -31},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": []}
        ]},
        {"id": 26, "name": "Vintage Blue", "json": [
            {"featureType": "road", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.province", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#004b76"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"visibility": "on"},
                {"color": "#fff6cb"}
            ]},
            {"featureType": "administrative.country", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "on"},
                {"color": "#7f7d7a"},
                {"lightness": 10},
                {"weight": 1}
            ]}
        ]},
        {"id": 68, "name": "Aqua", "json": [
            {"featureType": "landscape", "stylers": [
                {"color": "#6c8080"},
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"color": "#d98080"},
                {"hue": "#eeff00"},
                {"lightness": 100},
                {"weight": 1.5}
            ]}
        ]},
        {"id": 84, "name": "Pastel Tones", "json": [
            {"featureType": "landscape", "stylers": [
                {"saturation": -100},
                {"lightness": 60}
            ]},
            {"featureType": "road.local", "stylers": [
                {"saturation": -100},
                {"lightness": 40},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "stylers": [
                {"saturation": -100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative.province", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"lightness": 30}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#ef8c25"},
                {"lightness": 40}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry.fill", "stylers": [
                {"color": "#b6c54c"},
                {"lightness": 40},
                {"saturation": -40}
            ]},
            {}
        ]},
        {"id": 41, "name": "Hints of Gold", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#252525"},
                {"saturation": -100},
                {"lightness": -81},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#666666"},
                {"saturation": -100},
                {"lightness": -55},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"hue": "#555555"},
                {"saturation": -100},
                {"lightness": -57},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#777777"},
                {"saturation": -100},
                {"lightness": -6},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"hue": "#cc9900"},
                {"saturation": 100},
                {"lightness": -22},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"hue": "#444444"},
                {"saturation": 0},
                {"lightness": -64},
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"hue": "#555555"},
                {"saturation": -100},
                {"lightness": -57},
                {"visibility": "off"}
            ]}
        ]},
        {"id": 102, "name": "Clean Grey", "json": [
            {"featureType": "administrative", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.country", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.province", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#e3e3e3"}
            ]},
            {"featureType": "landscape.natural", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"color": "#cccccc"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.line", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#FFFFFF"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 9, "name": "Chilled", "json": [
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": 149},
                {"saturation": -78},
                {"lightness": 0}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": -31},
                {"saturation": -40},
                {"lightness": 2.8}
            ]},
            {"featureType": "poi", "elementType": "label", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"hue": 163},
                {"saturation": -26},
                {"lightness": -1.1}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": 3},
                {"saturation": -24.24},
                {"lightness": -38.57}
            ]}
        ]},
        {"id": 24, "name": "Hot Pink", "json": [
            {"stylers": [
                {"hue": "#ff61a6"},
                {"visibility": "on"},
                {"invert_lightness": true},
                {"saturation": 40},
                {"lightness": 10}
            ]}
        ]},
        {"id": 48, "name": "Hard edges", "json": [
            {"featureType": "landscape.natural", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "water", "stylers": [
                {"saturation": -100},
                {"lightness": -86}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"saturation": -100},
                {"lightness": -75}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"saturation": -100},
                {"lightness": 97}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"saturation": -100},
                {"lightness": -100}
            ]},
            {"featureType": "poi.park", "elementType": "labels.text.fill", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"saturation": -100},
                {"lightness": -68}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.fill", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.stroke", "stylers": [
                {"saturation": -100},
                {"lightness": -100}
            ]},
            {"featureType": "poi", "stylers": [
                {"saturation": -100},
                {"lightness": 91}
            ]},
            {"featureType": "poi", "elementType": "labels.text.fill", "stylers": [
                {"saturation": -100},
                {"lightness": -100}
            ]},
            {"featureType": "transit.station", "stylers": [
                {"saturation": -100},
                {"lightness": -22}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.stroke", "stylers": [
                {"hue": "#ff004c"},
                {"saturation": -100},
                {"lightness": 44}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"saturation": 1},
                {"lightness": -100}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]}
        ]},
        {"id": 4, "name": "Tripitty", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"color": "#193a70"},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"color": "#2c5ca5"}
            ]},
            {"featureType": "poi", "stylers": [
                {"color": "#2c5ca5"}
            ]},
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 50, "name": "The Endless Atlas", "json": [
            {"featureType": "all", "elementType": "labels.text.stroke", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "all", "elementType": "labels.icon", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"hue": "#D1D3D4"},
                {"saturation": -88},
                {"lightness": -7},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "labels", "stylers": [
                {"hue": "#939598"},
                {"saturation": -91},
                {"lightness": -34},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"hue": "#414042"},
                {"saturation": -98},
                {"lightness": -60},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#E3EBE5"},
                {"saturation": -61},
                {"lightness": 57},
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry", "stylers": [
                {"hue": "#E3EBE5"},
                {"saturation": -100},
                {"lightness": 57},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.fill", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.country", "elementType": "all", "stylers": [
                {"hue": "#E3EBE5"},
                {"saturation": -100},
                {"lightness": 81},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.province", "elementType": "all", "stylers": [
                {"hue": "#E3EBE5"},
                {"saturation": -100},
                {"lightness": 81},
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "geometry", "stylers": [
                {"hue": "#FFFFFF"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels", "stylers": [
                {"hue": "#939598"},
                {"saturation": 2},
                {"lightness": 59},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.neighborhood", "elementType": "labels", "stylers": [
                {"hue": "#939598"},
                {"saturation": -100},
                {"lightness": 16},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.neighborhood", "elementType": "all", "stylers": [
                {"hue": "#939598"},
                {"saturation": -100},
                {"lightness": 16},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.land_parcel", "elementType": "all", "stylers": [
                {"hue": "#939598"},
                {"saturation": -100},
                {"lightness": 16},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"hue": "#939598"},
                {"saturation": -98},
                {"lightness": -8},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"hue": "#FFFFFF"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"hue": "#6D6E71"},
                {"saturation": -98},
                {"lightness": -43},
                {"visibility": "on"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels", "stylers": [
                {"hue": "#FFFFFF"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": -100},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "labels", "stylers": [
                {"hue": "#FFFFFF"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]}
        ]},
        {"id": 70, "name": "Unsaturated Browns", "json": [
            {"elementType": "geometry", "stylers": [
                {"hue": "#ff4400"},
                {"saturation": -68},
                {"lightness": -4},
                {"gamma": 0.72}
            ]},
            {"featureType": "road", "elementType": "labels.icon"},
            {"featureType": "landscape.man_made", "elementType": "geometry", "stylers": [
                {"hue": "#0077ff"},
                {"gamma": 3.1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00ccff"},
                {"gamma": 0.44},
                {"saturation": -33}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"hue": "#44ff00"},
                {"saturation": -23}
            ]},
            {"featureType": "water", "elementType": "labels.text.fill", "stylers": [
                {"hue": "#007fff"},
                {"gamma": 0.77},
                {"saturation": 65},
                {"lightness": 99}
            ]},
            {"featureType": "water", "elementType": "labels.text.stroke", "stylers": [
                {"gamma": 0.11},
                {"weight": 5.6},
                {"saturation": 99},
                {"hue": "#0091ff"},
                {"lightness": -86}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"lightness": -48},
                {"hue": "#ff5e00"},
                {"gamma": 1.2},
                {"saturation": -23}
            ]},
            {"featureType": "transit", "elementType": "labels.text.stroke", "stylers": [
                {"saturation": -64},
                {"hue": "#ff9100"},
                {"lightness": 16},
                {"gamma": 0.47},
                {"weight": 2.7}
            ]}
        ]},
        {"id": 91, "name": "Muted Monotone", "json": [
            {"stylers": [
                {"visibility": "on"},
                {"saturation": -100},
                {"gamma": 0.54}
            ]},
            {"featureType": "road", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#4d4946"}
            ]},
            {"featureType": "poi", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "labels.text", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.local", "elementType": "labels.text", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"gamma": 0.48}
            ]},
            {"featureType": "transit.station", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"gamma": 7.18}
            ]}
        ]},
        {"id": 34, "name": "Neon World", "json": [
            {"stylers": [
                {"saturation": 100},
                {"gamma": 0.6}
            ]}
        ]},
        {"id": 59, "name": "Light Green", "json": [
            {"stylers": [
                {"hue": "#baf4c4"},
                {"saturation": 10}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#effefd"}
            ]},
            {"featureType": "all", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "labels", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 11, "name": "Blue", "json": [
            {"featureType": "all", "stylers": [
                {"hue": "#0000b0"},
                {"invert_lightness": "true"},
                {"saturation": -30}
            ]}
        ]},
        {"id": 10, "name": "Mixed", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#00dd00"}
            ]},
            {"featureType": "road", "stylers": [
                {"hue": "#dd0000"}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#000040"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#ffff00"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 90, "name": "Light Blue Water", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#71d6ff"},
                {"saturation": 100},
                {"lightness": -5},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"hue": "#deecec"},
                {"saturation": -73},
                {"lightness": 72},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"hue": "#bababa"},
                {"saturation": -100},
                {"lightness": 25},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"hue": "#e3e3e3"},
                {"saturation": -100},
                {"lightness": 0},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative", "elementType": "labels", "stylers": [
                {"hue": "#59cfff"},
                {"saturation": 100},
                {"lightness": 34},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 73, "name": "A Dark World", "json": [
            {"stylers": [
                {"visibility": "simplified"}
            ]},
            {"stylers": [
                {"color": "#131314"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#131313"},
                {"lightness": 7}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"visibility": "on"},
                {"lightness": 25}
            ]}
        ]},
        {"id": 76, "name": "HashtagNineNineNine", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#bbbbbb"},
                {"saturation": -100},
                {"lightness": -4},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#999999"},
                {"saturation": -100},
                {"lightness": -33},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#999999"},
                {"saturation": -100},
                {"lightness": -6},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#aaaaaa"},
                {"saturation": -100},
                {"lightness": -15},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 45, "name": "Candy Colours ", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#FFE100"},
                {"saturation": 34.48275862068968},
                {"lightness": -1.490196078431353},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#FF009A"},
                {"saturation": -2.970297029703005},
                {"lightness": -17.815686274509815},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#FFE100"},
                {"saturation": 8.600000000000009},
                {"lightness": -4.400000000000006},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#00C3FF"},
                {"saturation": 29.31034482758622},
                {"lightness": -38.980392156862735},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#0078FF"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#00FF19"},
                {"saturation": -30.526315789473685},
                {"lightness": -22.509803921568633},
                {"gamma": 1}
            ]}
        ]},
        {"id": 23, "name": "Bates Green", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#1CB2BD"},
                {"saturation": 53},
                {"lightness": -44},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#1CB2BD"},
                {"saturation": 40}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#BBDC00"},
                {"saturation": 80},
                {"lightness": -20},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "all", "stylers": [
                {"visibility": "on"}
            ]}
        ]},
        {"id": 64, "name": "Old Dry Mud", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#FFAD00"},
                {"saturation": 50.2},
                {"lightness": -34.8},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#FFAD00"},
                {"saturation": -19.8},
                {"lightness": -1.8},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#FFAD00"},
                {"saturation": 72.4},
                {"lightness": -32.6},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#FFAD00"},
                {"saturation": 74.4},
                {"lightness": -18},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00FFA6"},
                {"saturation": -63.2},
                {"lightness": 38},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#FFC300"},
                {"saturation": 54.2},
                {"lightness": -14.4},
                {"gamma": 1}
            ]}
        ]},
        {"id": 51, "name": "Roadtrip At Night", "json": [
            {"stylers": [
                {"hue": "#ff1a00"},
                {"invert_lightness": true},
                {"saturation": -100},
                {"lightness": 33},
                {"gamma": 0.5}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#2D333C"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"color": "#eeeeee"},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"},
                {"weight": 3}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.fill", "stylers": [
                {"color": "#2D333C"}
            ]}
        ]},
        {"id": 72, "name": "Transport for London", "json": [
            {"elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "geometry.fill", "stylers": [
                {"color": "#0099cc"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"color": "#00314e"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#f0f0f0"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"color": "#adbac9"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"color": "#adb866"}
            ]},
            {"featureType": "poi", "stylers": [
                {"color": "#f7c742"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"color": "#adb866"}
            ]},
            {"featureType": "transit.station", "elementType": "geometry.fill", "stylers": [
                {"color": "#ff8dd3"}
            ]},
            {"featureType": "transit.station", "stylers": [
                {"color": "#ff8dd3"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#808080"}
            ]},
            {}
        ]},
        {"id": 95, "name": "Roadie", "json": [
            {"elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#000000"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#ffffff"},
                {"visibility": "on"}
            ]},
            {}
        ]},
        {"id": 32, "name": "Deep Green", "json": [
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"visibility": "simplified"},
                {"color": "#ffe24d"}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "simplified"},
                {"color": "#158c28"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"visibility": "simplified"},
                {"color": "#37b34a"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#ffe24d"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "simplified"},
                {"color": "#8bc53f"}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"color": "#808080"},
                {"gamma": 9.91},
                {"visibility": "off"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 49, "name": "Subtle Green", "json": [
            {"stylers": [
                {"visibility": "on"},
                {"saturation": -100}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"saturation": 100},
                {"hue": "#00ffe6"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"saturation": 100},
                {"hue": "#00ffcc"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"visibility": "on"}
            ]}
        ]},
        {"id": 56, "name": "Esperanto", "json": [
            {"elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#000000"}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#0000ff"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#ff0000"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000100"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffff00"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.stroke", "stylers": [
                {"color": "#ff0000"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffa91a"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000000"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"saturation": 36},
                {"gamma": 0.55}
            ]},
            {"featureType": "road.local", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000000"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.stroke", "stylers": [
                {"lightness": -100},
                {"weight": 2.1}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.fill", "stylers": [
                {"invert_lightness": true},
                {"hue": "#ff0000"},
                {"gamma": 3.02},
                {"lightness": 20},
                {"saturation": 40}
            ]},
            {"featureType": "poi.attraction", "stylers": [
                {"saturation": 100},
                {"hue": "#ff00ee"},
                {"lightness": -13}
            ]},
            {"featureType": "poi.government", "stylers": [
                {"saturation": 100},
                {"hue": "#eeff00"},
                {"gamma": 0.67},
                {"lightness": -26}
            ]},
            {"featureType": "poi.medical", "elementType": "geometry.fill", "stylers": [
                {"hue": "#ff0000"},
                {"saturation": 100},
                {"lightness": -37}
            ]},
            {"featureType": "poi.medical", "elementType": "labels.text.fill", "stylers": [
                {"color": "#ff0000"}
            ]},
            {"featureType": "poi.school", "stylers": [
                {"hue": "#ff7700"},
                {"saturation": 97},
                {"lightness": -41}
            ]},
            {"featureType": "poi.sports_complex", "stylers": [
                {"saturation": 100},
                {"hue": "#00ffb3"},
                {"lightness": -71}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"saturation": 84},
                {"lightness": -57},
                {"hue": "#a1ff00"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "geometry.fill", "stylers": [
                {"gamma": 0.11}
            ]},
            {"featureType": "transit.station", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffc35e"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"lightness": -100}
            ]},
            {"featureType": "administrative", "stylers": [
                {"saturation": 100},
                {"gamma": 0.35},
                {"lightness": 20}
            ]},
            {"featureType": "poi.business", "elementType": "geometry.fill", "stylers": [
                {"saturation": -100},
                {"gamma": 0.35}
            ]},
            {"featureType": "poi.business", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#69ffff"}
            ]},
            {"featureType": "poi.place_of_worship", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#c3ffc3"}
            ]}
        ]},
        {"id": 99, "name": "Old Map", "json": [
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#abbaa4"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"color": "#3f518c"}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"color": "#ad9b8d"}
            ]}
        ]},
        {"id": 57, "name": "Military Flat", "json": [
            {"featureType": "landscape", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"hue": "#00ff88"},
                {"lightness": 14},
                {"color": "#667348"},
                {"saturation": 4},
                {"gamma": 1.14}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "administrative.country", "elementType": "geometry.stroke", "stylers": [
                {"color": "#313916"},
                {"weight": 0.8}
            ]},
            {"featureType": "road", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels.icon", "stylers": [
                {"visibility": "simplified"},
                {"color": "#334b1f"}
            ]},
            {"featureType": "administrative.province", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"}
            ]}
        ]},
        {"id": 69, "name": "Holiday", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#FFB000"},
                {"saturation": 71.66666666666669},
                {"lightness": -28.400000000000006},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#E8FF00"},
                {"saturation": -76.6},
                {"lightness": 113},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#FF8300"},
                {"saturation": -77},
                {"lightness": 27.400000000000006},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#FF8C00"},
                {"saturation": -66.6},
                {"lightness": 34.400000000000006},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00C4FF"},
                {"saturation": 22.799999999999997},
                {"lightness": -11.399999999999991},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#9FFF00"},
                {"saturation": 0},
                {"lightness": -23.200000000000003},
                {"gamma": 1}
            ]}
        ]},
        {"id": 33, "name": "Jane Iredale", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#87bcba"},
                {"saturation": -37},
                {"lightness": -17},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": []},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": [
                {"hue": "#4f6b46"},
                {"saturation": -23},
                {"lightness": -61},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": -55},
                {"lightness": 13},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "all", "stylers": [
                {"hue": "#ffa200"},
                {"saturation": 100},
                {"lightness": -22},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": -55},
                {"lightness": -31},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"hue": "#f69d94"},
                {"saturation": 84},
                {"lightness": 9},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": 45},
                {"lightness": 36},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.country", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": 45},
                {"lightness": 36},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative.land_parcel", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": 45},
                {"lightness": 36},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.government", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": 35},
                {"lightness": -19},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.school", "elementType": "all", "stylers": [
                {"hue": "#d38bc8"},
                {"saturation": -6},
                {"lightness": -17},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.park", "elementType": "all", "stylers": [
                {"hue": "#b2ba70"},
                {"saturation": -19},
                {"lightness": -25},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 63, "name": "Caribbean Mountain", "json": [
            {"featureType": "poi.medical", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.place_of_worship", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#cec6b3"}
            ]},
            {"featureType": "road", "stylers": [
                {"color": "#f2eee8"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#01186a"}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"color": "#cec6b3"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.government", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 66, "name": "Blueprint (No Labels)", "json": [
            {"stylers": [
                {"visibility": "simplified"},
                {"saturation": -100}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 17}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 20}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#000045"},
                {"lightness": 17}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000045"},
                {"lightness": 20}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 25}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 25}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 21}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"saturation": 100},
                {"color": "#7b94be"},
                {"lightness": 50}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 19}
            ]},
            {"featureType": "administrative", "elementType": "geometry.fill", "stylers": [
                {"color": "#000045"},
                {"lightness": 20}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000045"},
                {"lightness": 17},
                {"weight": 1.2}
            ]}
        ]},
        {"id": 81, "name": "Ilustra&#231;&#227;o", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"hue": "#71ABC3"},
                {"saturation": -10},
                {"lightness": -21},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape.natural", "elementType": "geometry", "stylers": [
                {"hue": "#7DC45C"},
                {"saturation": 37},
                {"lightness": -41},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry", "stylers": [
                {"hue": "#C3E0B0"},
                {"saturation": 23},
                {"lightness": -12},
                {"visibility": "simplified"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#A19FA0"},
                {"saturation": -98},
                {"lightness": -20},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"hue": "#FFFFFF"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]}
        ]},
        {"id": 62, "name": "Night vision", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#001204"},
                {"saturation": 100},
                {"lightness": -95},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": [
                {"hue": "#007F1E"},
                {"saturation": 100},
                {"lightness": -72},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape.natural", "elementType": "all", "stylers": [
                {"hue": "#00C72E"},
                {"saturation": 100},
                {"lightness": -59},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#002C0A"},
                {"saturation": 100},
                {"lightness": -87},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#00A927"},
                {"saturation": 100},
                {"lightness": -58},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 67, "name": "Blueprint", "json": [
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 17}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 20}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#000045"},
                {"lightness": 17}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000045"},
                {"lightness": 20}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 25}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 25}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 21}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"saturation": 0},
                {"color": "#4d88ea"},
                {"lightness": 0}
            ]},
            {"elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "geometry", "stylers": [
                {"color": "#000045"},
                {"lightness": 19}
            ]},
            {"featureType": "administrative", "elementType": "geometry.fill", "stylers": [
                {"color": "#000045"},
                {"lightness": 20}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"color": "#000045"},
                {"lightness": 17},
                {"weight": 1.2}
            ]}
        ]},
        {"id": 87, "name": "Red &amp; Green", "json": [
            {"featureType": "landscape", "stylers": [
                {"lightness": 16},
                {"hue": "#ff001a"},
                {"saturation": -61}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#ff0011"},
                {"lightness": 53}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"hue": "#00ff91"}
            ]},
            {"elementType": "labels", "stylers": [
                {"lightness": 63},
                {"hue": "#ff0000"}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#0055ff"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 107, "name": "Blue-ish", "json": [
            {"stylers": [
                {"saturation": -45},
                {"lightness": 13}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#8fa7b3"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#667780"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.text.fill", "stylers": [
                {"color": "#333333"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#8fa7b3"},
                {"gamma": 2}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#a3becc"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"color": "#7a8f99"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels.text.fill", "stylers": [
                {"color": "#555555"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.fill", "stylers": [
                {"color": "#a3becc"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.stroke", "stylers": [
                {"color": "#7a8f99"}
            ]},
            {"featureType": "road.local", "elementType": "labels.text.fill", "stylers": [
                {"color": "#555555"}
            ]},
            {"featureType": "water", "elementType": "geometry.fill", "stylers": [
                {"color": "#bbd9e9"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.fill", "stylers": [
                {"color": "#525f66"}
            ]},
            {"featureType": "transit", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#bbd9e9"},
                {"gamma": 2}
            ]},
            {"featureType": "transit.line", "elementType": "geometry.fill", "stylers": [
                {"color": "#a3aeb5"}
            ]}
        ]},
        {"id": 89, "name": "Green", "json": [
            {"featureType": "landscape", "elementType": "geometry.fill", "stylers": [
                {"color": "#bbd5c5"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.stroke", "stylers": [
                {"color": "#808080"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#fcf9a2"}
            ]},
            {"featureType": "poi", "elementType": "geometry.fill", "stylers": [
                {"color": "#bbd5c5"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#808080"}
            ]}
        ]},
        {"id": 93, "name": "Lost in the desert", "json": [
            {"elementType": "labels", "stylers": [
                {"visibility": "off"},
                {"color": "#f49f53"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#f9ddc5"},
                {"lightness": -7}
            ]},
            {"featureType": "road", "stylers": [
                {"color": "#813033"},
                {"lightness": 43}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"color": "#645c20"},
                {"lightness": 38}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#1994bf"},
                {"saturation": -69},
                {"gamma": 0.99},
                {"lightness": 43}
            ]},
            {"featureType": "road.local", "elementType": "geometry.fill", "stylers": [
                {"color": "#f19f53"},
                {"weight": 1.3},
                {"visibility": "on"},
                {"lightness": 16}
            ]},
            {"featureType": "poi.business"},
            {"featureType": "poi.park", "stylers": [
                {"color": "#645c20"},
                {"lightness": 39}
            ]},
            {"featureType": "poi.school", "stylers": [
                {"color": "#a95521"},
                {"lightness": 35}
            ]},
            {},
            {"featureType": "poi.medical", "elementType": "geometry.fill", "stylers": [
                {"color": "#813033"},
                {"lightness": 38},
                {"visibility": "off"}
            ]},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {"elementType": "labels"},
            {"featureType": "poi.sports_complex", "stylers": [
                {"color": "#9e5916"},
                {"lightness": 32}
            ]},
            {},
            {"featureType": "poi.government", "stylers": [
                {"color": "#9e5916"},
                {"lightness": 46}
            ]},
            {"featureType": "transit.station", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.line", "stylers": [
                {"color": "#813033"},
                {"lightness": 22}
            ]},
            {"featureType": "transit", "stylers": [
                {"lightness": 38}
            ]},
            {"featureType": "road.local", "elementType": "geometry.stroke", "stylers": [
                {"color": "#f19f53"},
                {"lightness": -10}
            ]},
            {},
            {},
            {}
        ]},
        {"id": 100, "name": "Brownie", "json": [
            {"stylers": [
                {"hue": "#ff8800"},
                {"gamma": 0.4}
            ]}
        ]},
        {"id": 96, "name": "Bobby&#39;s World", "json": [
            {"featureType": "landscape.natural.landcover", "stylers": [
                {"gamma": 0.44},
                {"hue": "#2bff00"}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00a1ff"},
                {"saturation": 29},
                {"gamma": 0.74}
            ]},
            {"featureType": "landscape.natural.terrain", "stylers": [
                {"hue": "#00ff00"},
                {"saturation": 54},
                {"lightness": -51},
                {"gamma": 0.4}
            ]},
            {"featureType": "transit.line", "stylers": [
                {"gamma": 0.27},
                {"hue": "#0077ff"},
                {"saturation": -91},
                {"lightness": 36}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"saturation": 10},
                {"lightness": -23},
                {"hue": "#0099ff"},
                {"gamma": 0.71}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"hue": "#0055ff"},
                {"saturation": 9},
                {"lightness": -46},
                {"gamma": 1.05}
            ]},
            {"featureType": "administrative.country", "stylers": [
                {"gamma": 0.99}
            ]},
            {"featureType": "administrative.province", "stylers": [
                {"lightness": 36},
                {"saturation": -54},
                {"gamma": 0.76}
            ]},
            {"featureType": "administrative.locality", "stylers": [
                {"lightness": 33},
                {"saturation": -61},
                {"gamma": 1.21}
            ]},
            {"featureType": "administrative.neighborhood", "stylers": [
                {"hue": "#ff0000"},
                {"gamma": 2.44}
            ]},
            {"featureType": "road.highway.controlled_access", "stylers": [
                {"hue": "#ff0000"},
                {"lightness": 67},
                {"saturation": -40}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#ff6600"},
                {"saturation": 52},
                {"gamma": 0.64}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#006eff"},
                {"gamma": 0.46},
                {"saturation": -3},
                {"lightness": -10}
            ]},
            {"featureType": "transit.line", "stylers": [
                {"hue": "#0077ff"},
                {"saturation": -46},
                {"gamma": 0.58}
            ]},
            {"featureType": "transit.station", "stylers": [
                {"gamma": 0.8}
            ]},
            {"featureType": "transit.station.rail", "stylers": [
                {"hue": "#ff0000"},
                {"saturation": -45},
                {"gamma": 0.9}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"gamma": 0.58}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.fill", "stylers": [
                {"gamma": 2.01},
                {"hue": "#00ffff"},
                {"lightness": 22}
            ]},
            {"featureType": "transit", "stylers": [
                {"saturation": -87},
                {"lightness": 44},
                {"gamma": 1.98},
                {"visibility": "off"}
            ]},
            {"featureType": "poi.business", "elementType": "labels.text", "stylers": [
                {"gamma": 0.06},
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"hue": "#00aaff"},
                {"lightness": -6},
                {"gamma": 2.21}
            ]},
            {"elementType": "labels.text.stroke", "stylers": [
                {"gamma": 3.84}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"gamma": 9.99}
            ]},
            {"featureType": "administrative", "stylers": [
                {"gamma": 0.01}
            ]}
        ]},
        {"id": 92, "name": "Blue Cyan", "json": [
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"color": "#333333"}
            ]},
            {"featureType": "landscape.natural", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#666666"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "geometry", "stylers": [
                {"color": "#df2f23"},
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#cccccc"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.stroke", "stylers": [
                {"color": "#999999"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"color": "#aaaaaa"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.fill", "stylers": [
                {"color": "#808080"}
            ]},
            {"featureType": "administrative", "elementType": "geometry.stroke", "stylers": [
                {"color": "#aaaaaa"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text"},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"color": "#c6eeee"}
            ]},
            {}
        ]},
        {"id": 98, "name": "Purple Rain", "json": [
            {"featureType": "road", "stylers": [
                {"hue": "#5e00ff"},
                {"saturation": -79}
            ]},
            {"featureType": "poi", "stylers": [
                {"saturation": -78},
                {"hue": "#6600ff"},
                {"lightness": -47},
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "stylers": [
                {"lightness": 22}
            ]},
            {"featureType": "landscape", "stylers": [
                {"hue": "#6600ff"},
                {"saturation": -11}
            ]},
            {},
            {},
            {"featureType": "water", "stylers": [
                {"saturation": -65},
                {"hue": "#1900ff"},
                {"lightness": 8}
            ]},
            {"featureType": "road.local", "stylers": [
                {"weight": 1.3},
                {"lightness": 30}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "simplified"},
                {"hue": "#5e00ff"},
                {"saturation": -16}
            ]},
            {"featureType": "transit.line", "stylers": [
                {"saturation": -72}
            ]},
            {}
        ]},
        {"id": 101, "name": "Bright Dessert", "json": [
            {"featureType": "landscape", "stylers": [
                {"saturation": -7},
                {"gamma": 1.02},
                {"hue": "#ffc300"},
                {"lightness": -10}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#ffaa00"},
                {"saturation": -45},
                {"gamma": 1},
                {"lightness": -4}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#ffaa00"},
                {"lightness": -10},
                {"saturation": 64},
                {"gamma": 0.9}
            ]},
            {"featureType": "road.local", "stylers": [
                {"lightness": -5},
                {"hue": "#00f6ff"},
                {"saturation": -40},
                {"gamma": 0.75}
            ]},
            {"featureType": "poi", "stylers": [
                {"saturation": -30},
                {"lightness": 11},
                {"gamma": 0.5},
                {"hue": "#ff8000"}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#0077ff"},
                {"gamma": 1.25},
                {"saturation": -22},
                {"lightness": -31}
            ]}
        ]},
        {"id": 78, "name": "Pink &amp; Blue", "json": [
            {"featureType": "landscape", "stylers": [
                {"visibility": "simplified"},
                {"color": "#9debff"},
                {"weight": 0.1}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"},
                {"color": "#ebebeb"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#51dbff"}
            ]},
            {"featureType": "poi.park", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#51dbff"}
            ]},
            {"featureType": "poi"},
            {"featureType": "transit.line", "stylers": [
                {"color": "#ff4e80"},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "on"},
                {"weight": 1.5},
                {"color": "#51dbff"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"},
                {"color": "#51dbNaN"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"},
                {"color": "#51dbff"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"color": "#9debff"},
                {"visibility": "off"}
            ]},
            {},
            {"featureType": "poi.government", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.school", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "poi.medical", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.attraction", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#51dbff"}
            ]},
            {"featureType": "poi.place_of_worship", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.sports_complex", "stylers": [
                {"visibility": "off"}
            ]},
            {},
            {"featureType": "road.arterial", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#000000"},
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road"}
        ]},
        {"id": 94, "name": "San Andreas", "json": [
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"lightness": -100}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"lightness": -100},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"lightness": 100}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"saturation": 100},
                {"hue": "#006eff"},
                {"lightness": -19}
            ]},
            {"featureType": "landscape", "elementType": "geometry.fill", "stylers": [
                {"saturation": -100},
                {"lightness": -16}
            ]},
            {"featureType": "poi", "elementType": "geometry.fill", "stylers": [
                {"hue": "#2bff00"},
                {"lightness": -39},
                {"saturation": 8}
            ]},
            {"featureType": "poi.attraction", "elementType": "geometry.fill", "stylers": [
                {"lightness": 100},
                {"saturation": -100}
            ]},
            {"featureType": "poi.business", "elementType": "geometry.fill", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "poi.government", "elementType": "geometry.fill", "stylers": [
                {"lightness": 100},
                {"saturation": -100}
            ]},
            {"featureType": "poi.medical", "elementType": "geometry.fill", "stylers": [
                {"lightness": 100},
                {"saturation": -100}
            ]},
            {"featureType": "poi.place_of_worship", "elementType": "geometry.fill", "stylers": [
                {"lightness": 100},
                {"saturation": -100}
            ]},
            {"featureType": "poi.school", "elementType": "geometry.fill", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]},
            {"featureType": "poi.sports_complex", "elementType": "geometry.fill", "stylers": [
                {"saturation": -100},
                {"lightness": 100}
            ]}
        ]},
        {"id": 85, "name": "Totally Pink", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#F600FF"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#DE00FF"},
                {"saturation": -4.6000000000000085},
                {"lightness": -1.4210854715202004e-14},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#FF009A"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#FF0098"},
                {"saturation": 0},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#EC00FF"},
                {"saturation": 72.4},
                {"lightness": 0},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#7200FF"},
                {"saturation": 49},
                {"lightness": 0},
                {"gamma": 1}
            ]}
        ]},
        {"id": 111, "name": "The Propia Effect", "json": [
            {"featureType": "landscape", "stylers": [
                {"visibility": "simplified"},
                {"color": "#2b3f57"},
                {"weight": 0.1}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "on"},
                {"hue": "#ff0000"},
                {"weight": 0.4},
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.text", "stylers": [
                {"weight": 1.3},
                {"color": "#FFFFFF"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#f55f77"},
                {"weight": 3}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"color": "#f55f77"},
                {"weight": 1.1}
            ]},
            {"featureType": "road.local", "elementType": "geometry", "stylers": [
                {"color": "#f55f77"},
                {"weight": 0.4}
            ]},
            {},
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"weight": 0.8},
                {"color": "#ffffff"},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels", "stylers": [
                {"color": "#ffffff"},
                {"weight": 0.7}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"color": "#6c5b7b"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#f3b191"}
            ]},
            {"featureType": "transit.line", "stylers": [
                {"visibility": "on"}
            ]}
        ]},
        {"id": 88, "name": "Overseas", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#00559B"},
                {"saturation": 100},
                {"lightness": -60},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape.natural", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "poi.park", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#00559B"},
                {"saturation": 100},
                {"lightness": -53},
                {"visibility": "simplified"}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": []},
            {"featureType": "administrative.locality", "elementType": "geometry", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": 0},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "water", "elementType": "all", "stylers": []},
            {"featureType": "poi.school", "elementType": "labels", "stylers": [
                {"hue": "#999999"},
                {"saturation": -100},
                {"lightness": -28},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#999999"},
                {"saturation": -100},
                {"lightness": -23},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "elementType": "all", "stylers": [
                {"hue": "#2C3E50"},
                {"saturation": 29},
                {"lightness": -52},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 97, "name": "manushka", "json": [
            {"featureType": "water", "stylers": [
                {"color": "#6ebeab"}
            ]},
            {"featureType": "road", "stylers": [
                {"color": "#b5a15b"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"color": "#f9f9f9"}
            ]},
            {"featureType": "landscape", "elementType": "labels.text.fill", "stylers": [
                {"color": "#808080"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels.text.fill", "stylers": [
                {"color": "#808080"}
            ]},
            {"featureType": "landscape.natural.terrain", "stylers": [
                {"color": "#d0d0d0"}
            ]},
            {}
        ]},
        {"id": 106, "name": "Dark Grey on Light Grey", "json": [
            {"featureType": "administrative", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.country", "elementType": "geometry.stroke", "stylers": [
                {"color": "#DCE7EB"}
            ]},
            {"featureType": "administrative.province", "elementType": "geometry.stroke", "stylers": [
                {"color": "#DCE7EB"}
            ]},
            {"featureType": "landscape", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.natural", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "labels.icon", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.line", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "geometry", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"color": "#83888B"}
            ]},
            {"featureType": "water", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]}
        ]},
        {"id": 113, "name": "Golden Crown", "json": [
            {"featureType": "landscape", "stylers": [
                {"visibility": "on"},
                {"color": "#e7cd79"},
                {"weight": 0.1}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "simplified"},
                {"color": "#282828"}
            ]},
            {"featureType": "landscape.natural.landcover", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#d6bc68"}
            ]},
            {"featureType": "administrative.locality", "elementType": "geometry", "stylers": [
                {"visibility": "off"},
                {"color": "#d6bc68"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"color": "#d6bc68"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"visibility": "on"},
                {"color": "#d6bc68"}
            ]},
            {"featureType": "transit.station.airport", "elementType": "geometry.fill", "stylers": [
                {"visibility": "off"},
                {"color": "#d6bc68"}
            ]},
            {"featureType": "poi"},
            {"featureType": "transit.line", "stylers": [
                {"color": "#d6bc68"},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"},
                {"weight": 1},
                {"color": "#e9d9a6"}
            ]},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"},
                {"color": "#e9d9a6"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"visibility": "simplified"},
                {"color": "#e9d9a6"}
            ]},
            {"featureType": "poi.business", "stylers": [
                {"color": "#e9d9a6"},
                {"visibility": "on"}
            ]},
            {},
            {"featureType": "poi.government", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.school", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.medical", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.attraction", "elementType": "geometry", "stylers": [
                {"visibility": "off"},
                {"color": "#cfb665"}
            ]},
            {"featureType": "poi.place_of_worship", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.sports_complex", "stylers": [
                {"visibility": "off"}
            ]},
            {},
            {"featureType": "road.arterial", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#cfb665"},
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.text", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road"}
        ]},
        {"id": 71, "name": "Jazzygreen", "json": [
            {"featureType": "landscape", "stylers": [
                {"hue": "#000000"},
                {"saturation": -100},
                {"lightness": 44},
                {"gamma": 1}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"hue": "#00F93f"},
                {"saturation": 100},
                {"lightness": -40.95294117647059},
                {"gamma": 1}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"hue": "#00F93f"},
                {"saturation": 100},
                {"lightness": -51.15294117647059},
                {"gamma": 1}
            ]},
            {"featureType": "road.local", "stylers": [
                {"hue": "#00F93f"},
                {"saturation": 100},
                {"lightness": -50.35294117647059},
                {"gamma": 1}
            ]},
            {"featureType": "water", "stylers": [
                {"hue": "#00F93f"},
                {"saturation": 100},
                {"lightness": -50.35294117647059},
                {"gamma": 1}
            ]},
            {"featureType": "poi", "stylers": [
                {"hue": "#00F93f"},
                {"saturation": 100},
                {"lightness": -50.35294117647059},
                {"gamma": 1}
            ]}
        ]},
        {"id": 105, "name": "Veins", "json": [
            {"stylers": [
                {"hue": "#B61530"},
                {"saturation": 60},
                {"lightness": -40}
            ]},
            {"elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#B61530"}
            ]},
            {"featureType": "road", "stylers": [
                {"color": "#B61530"},
                {}
            ]},
            {"featureType": "road.local", "stylers": [
                {"color": "#B61530"},
                {"lightness": 6}
            ]},
            {"featureType": "road.highway", "stylers": [
                {"color": "#B61530"},
                {"lightness": -25}
            ]},
            {"featureType": "road.arterial", "stylers": [
                {"color": "#B61530"},
                {"lightness": -10}
            ]},
            {"featureType": "transit", "stylers": [
                {"color": "#B61530"},
                {"lightness": 70}
            ]},
            {"featureType": "transit.line", "stylers": [
                {"color": "#B61530"},
                {"lightness": 90}
            ]},
            {"featureType": "administrative.country", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.station", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit.station", "elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]}
        ]},
        {"id": 108, "name": "Lemon Tree", "json": [
            {"featureType": "road.highway", "elementType": "labels", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.natural", "elementType": "all", "stylers": [
                {"hue": "#ffffff"},
                {"saturation": -100},
                {"lightness": 100},
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "all", "stylers": [
                {"hue": "#ffe94f"},
                {"saturation": 100},
                {"lightness": 4},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"hue": "#ffe94f"},
                {"saturation": 100},
                {"lightness": 4},
                {"visibility": "on"}
            ]},
            {"featureType": "water", "elementType": "geometry", "stylers": [
                {"hue": "#333333"},
                {"saturation": -100},
                {"lightness": -74},
                {"visibility": "off"}
            ]}
        ]},
        {"id": 112, "name": "Swiss Cheese", "json": [
            {"stylers": [
                {"saturation": 100},
                {"hue": "#fff700"}
            ]},
            {"featureType": "landscape", "stylers": [
                {"color": "#ffdd00"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#718098"},
                {"saturation": -35},
                {"lightness": 20}
            ]},
            {"featureType": "poi", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "transit", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative", "elementType": "labels.text", "stylers": [
                {"color": "#ffdd00"},
                {"lightness": -38}
            ]},
            {"featureType": "administrative", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#ffdd00"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road", "stylers": [
                {"weight": 0.7}
            ]},
            {"featureType": "water", "elementType": "labels.text.fill", "stylers": [
                {"color": "#ffffff"}
            ]}
        ]},
        {"id": 109, "name": "Beige White and Blue", "json": [
            {"featureType": "landscape.natural", "stylers": [
                {"visibility": "on"},
                {"color": "#ecd5c3"}
            ]},
            {"featureType": "water", "stylers": [
                {"visibility": "on"},
                {"color": "#32c4fe"}
            ]},
            {"featureType": "landscape.natural", "stylers": [
                {"visibility": "simplified"}
            ]},
            {"featureType": "transit", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#ffffff"}
            ]},
            {"featureType": "road.arterial", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.local", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "geometry.fill", "stylers": [
                {"color": "#baaca2"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway.controlled_access", "elementType": "labels.text.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#ffffff"}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"color": "#565757"},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "labels.text.stroke", "stylers": [
                {"color": "#808080"},
                {"visibility": "off"}
            ]},
            {"featureType": "road.arterial", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.neighborhood", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels.text.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#535555"}
            ]},
            {"featureType": "road.highway", "elementType": "geometry", "stylers": [
                {"color": "#fffffe"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.text.stroke", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "road.highway", "elementType": "labels.icon", "stylers": [
                {"visibility": "on"}
            ]},
            {"featureType": "road", "elementType": "labels.icon", "stylers": [
                {"visibility": "on"},
                {"saturation": -100},
                {"lightness": 17}
            ]},
            {}
        ]},
        {"id": 110, "name": "mikiwat", "json": [
            {"featureType": "landscape.natural", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "336d75"}
            ]},
            {"featureType": "poi", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"hue": "#1900ff"},
                {"color": "#d064a4"}
            ]},
            {"featureType": "landscape.man_made", "elementType": "geometry.fill"},
            {"featureType": "road", "elementType": "geometry", "stylers": [
                {"lightness": 100},
                {"visibility": "simplified"}
            ]},
            {"featureType": "road", "elementType": "labels", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#6bb1e1"}
            ]},
            {"featureType": "transit.line", "elementType": "geometry", "stylers": [
                {"visibility": "on"},
                {"lightness": 700}
            ]}
        ]},
        {"id": 86, "name": "Nature Highlight", "json": [
            {"featureType": "administrative", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "administrative.locality", "elementType": "labels", "stylers": [
                {"visibility": "simplified"},
                {"saturation": 100},
                {"color": "#ff4702"}
            ]},
            {"featureType": "road", "stylers": [
                {"saturation": -100},
                {"visibility": "simplified"},
                {"lightness": -25}
            ]},
            {"featureType": "water", "stylers": [
                {"color": "#5f1bff"},
                {"saturation": 100},
                {"visibility": "on"},
                {"lightness": -38}
            ]},
            {"featureType": "landscape.natural.terrain", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "poi.park", "stylers": [
                {"visibility": "simplified"},
                {"color": "#d3ff44"},
                {"lightness": -32},
                {"saturation": 30}
            ]},
            {"featureType": "landscape.natural", "elementType": "geometry.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#797679"},
                {"gamma": 4.92},
                {"lightness": -47}
            ]},
            {}
        ]},
        {"id": 114, "name": "Colorblind-friendly", "json": [
            {"featureType": "water", "elementType": "all", "stylers": [
                {"hue": "#0072B2"},
                {"saturation": 100},
                {"lightness": -54},
                {"visibility": "on"}
            ]},
            {"featureType": "landscape", "elementType": "all", "stylers": [
                {"hue": "#E69F00"},
                {"saturation": 100},
                {"lightness": -49},
                {"visibility": "on"}
            ]},
            {"featureType": "poi", "elementType": "all", "stylers": [
                {"hue": "#D55E00"},
                {"saturation": 100},
                {"lightness": -46},
                {"visibility": "on"}
            ]},
            {"featureType": "road.local", "elementType": "all", "stylers": [
                {"hue": "#CC79A7"},
                {"saturation": -55},
                {"lightness": -36},
                {"visibility": "on"}
            ]},
            {"featureType": "road.arterial", "elementType": "all", "stylers": [
                {"hue": "#F0E442"},
                {"saturation": -15},
                {"lightness": -22},
                {"visibility": "on"}
            ]},
            {"featureType": "road.highway", "elementType": "all", "stylers": [
                {"hue": "#56B4E9"},
                {"saturation": -23},
                {"lightness": -2},
                {"visibility": "on"}
            ]},
            {"featureType": "administrative", "elementType": "geometry", "stylers": [
                {"hue": "#000000"},
                {"saturation": 0},
                {"lightness": -100},
                {"visibility": "on"}
            ]},
            {"featureType": "transit", "elementType": "all", "stylers": [
                {"hue": "#009E73"},
                {"saturation": 100},
                {"lightness": -59},
                {"visibility": "on"}
            ]}
        ]},
        {"id": 104, "name": "towalk", "json": [
            {"featureType": "poi", "stylers": [
                {"visibility": "off"}
            ]},
            {"featureType": "landscape.man_made", "stylers": [
                {"visibility": "off"},
                {"saturation": 100},
                {"lightness": -17},
                {"gamma": 1.18},
                {"color": "#da97ae"}
            ]},
            {"elementType": "geometry.fill", "stylers": [
                {"color": "#f07913"}
            ]},
            {"featureType": "road", "elementType": "geometry.fill", "stylers": [
                {"color": "#ffffff"},
                {"weight": 0.1}
            ]},
            {"featureType": "road", "elementType": "geometry.stroke", "stylers": [
                {"color": "#d0f380"}
            ]},
            {"stylers": [
                {"weight": 0.1}
            ]},
            {"featureType": "road", "elementType": "labels.text.fill", "stylers": [
                {"visibility": "on"},
                {"color": "#000000"}
            ]},
            {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [
                {"weight": 1},
                {"color": "#83827f"},
                {"visibility": "off"}
            ]},
            {}
        ]}
    ]
};
},{}],8:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresGoogleMapMarkerCtrlModule', []).controller('ceresGoogleMapMarkerCtrl', [
    '$scope',
    '$window',
    '$log',
    '$element',
    function ($scope, $window, $log, $element) {
        $scope.showWindow = false;
        // HELPERS
        var ceres_uid = $element.attr("id");
        var getData = function () {

            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        $scope.marker = {
            id: ceres_uid,
            coords: {
                latitude: data.location_lat,
                longitude: data.location_long
            }
        };

        if(data.icon){
            $scope.marker.icon = data.icon;
        }

        $scope.clicked = function () {
            if (data.content) {
                $scope.showWindow = !$scope.showWindow();
            }
        };

    }
]);

},{}],9:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresIconBlockCtrlModule', []).controller('ceresIconBlockCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],10:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresIconBoxCtrlModule', []).controller('ceresIconBoxCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],11:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresIconLinkCtrlModule', []).controller('ceresIconLinkCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],12:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresIconListCtrlModule', []).controller('ceresIconListCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],13:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresIconListItemCtrlModule', []).controller('ceresIconListItemCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],14:[function(require,module,exports){
'use strict';

// home module
angular.module('ceresSeparatorStyledCtrlModule', []).controller('ceresSeparatorStyledCtrl', [
    '$scope',
    '$window',
    '$element',
    function ($scope, $window, $element) {

        // HELPERS
        var getData = function () {
            var ceres_uid = $element.attr("id");
            return $window.ceresData[ceres_uid];
        };
        var data = getData();

        // This routes to ng-style
        // $scope.myStyle = { ... }
    }
]);

},{}],15:[function(require,module,exports){
'use strict';
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp').directive('parallax', ['$window', function ($window) {
        return {
            restrict: 'A',
            scope: {
                parallaxRatio: '@',
                parallaxVerticalOffset: '@',
                parallaxHorizontalOffset: '@',
            },
            link: function ($scope, elem, $attrs) {
                var setPosition = function () {
                    // horizontal positioning
                    elem.css('left', $scope.parallaxHorizontalOffset + "px");

                    var calcValY = $window.pageYOffset * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1 );
                    if (calcValY <= $window.innerHeight) {
                        var topVal = (calcValY < $scope.parallaxVerticalOffset ? $scope.parallaxVerticalOffset : calcValY);
                        elem.css('top', topVal + "px");
                    }
                };

                setPosition();

                angular.element($window).bind("scroll", setPosition);
                angular.element($window).bind("touchmove", setPosition);
            }  // link function
        };
    }]).directive('parallaxBackground', ['$window', function ($window) {
        return {
            restrict: 'AC',
            transclude: true,
            template: '<div ng-transclude></div>',
            scope: {
                parallaxRatio: '@',
            },
            link: function ($scope, elem, attrs) {

                //if directive is declared via class,
                //evaluate the object provided by the declaration
                //and shove it into the attrs var so that it
                // behaves like the other two declaration types.
                if (_.isString(attrs.parallaxBackground)) {
                    var directiveAtts = $scope.$eval(attrs.parallaxBackground);
                    _.merge(attrs, directiveAtts);
                }

                var setPosition = function () {
                    var calcValY = (elem.prop('offsetTop') - $window.pageYOffset) * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1 );
                    // horizontal positioning
                    elem.css('background-position', "50% " + calcValY + "px");
                };

                // set our initial position - fixes webkit background render bug
                angular.element($window).bind('load', function (e) {
                    setPosition();
                    $scope.$apply();
                });

                angular.element($window).bind("scroll", setPosition);
                angular.element($window).bind("touchmove", setPosition);
            }  // link function
        };
    }]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],16:[function(require,module,exports){
'use strict';
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var $ = window.jQuery;

angular.module('webApp')
    .directive('bsCarousel', function () {
        return {
            template: '<div id="{{ elementId }}" class="carousel slide" data-ride="carousel" >' +
            '<ol class="carousel-indicators"><li ng-repeat="slides in $slides" data-target="#{{ elementId }}" data-slide-to="{{ $index }}" class="active"></li></ol>' +
            '<div ng-transclude class="carousel-inner" role="listbox"></div>' +
            '<a class="left carousel-control" data-target="#{{ elementId }}" role="button" data-slide="prev"> <i class="fa fa-chevron-left"></i><span class="sr-only">Previous</span></a>' +
            '<a class="right carousel-control" data-target="#{{ elementId }}" role="button" data-slide="next"><i class="fa fa-chevron-right"></i><span class="sr-only">Next</span></a>',
            restrict: 'E',
            transclude: true,
            replace: true,
            scope: {},
            link: function postLink(scope, element, attrs) {
                function guid() {
                    function _p8(s) {
                        var p = (Math.random().toString(16) + "000000000").substr(2, 8);
                        return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
                    }

                    return _p8() + _p8(true) + _p8(true) + _p8();
                }

                scope.elementId = guid();
                console.log("Element ID: " + scope.elementId);
                var $el = $(element);
                console.log($el);
                $el.css('background', 'black');

                scope.$slides = $el.find('.carousel-inner .item');

                if($('.active', scope.$slides).length == 0 && scope.$slides.length > 0) {
                    scope.$slides.first().addClass('active');
                }
            }
        };
    });

},{"./../../bower_components/lodash/dist/lodash.compat.js":1}],17:[function(require,module,exports){
'use strict';
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp')
    .directive('bsCarouselSlide', function () {
        return {
            template: '<div ng-transclude class="item"></div>',
            restrict: 'E',
            transclude: true,
            replace: true,
            link: function postLink(scope, element, attrs) {
            }
        };
    });

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],18:[function(require,module,exports){
'use strict';
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp')
    .directive('ceresClickAnimation', ['$log', '$timeout', 'applyAnimation', function ($log, $timeout, applyAnimation) {
        return {
            restrict: 'A',
            link: function postLink(scope, element, attrs) {
                var animation = attrs.ceresClickAnimation;
                var delay = attrs.ceresClickAnimationDelay;
                var duration = attrs.clickAnimationDuration;

                element.bind('click', function () {
                    var timeout = applyAnimation.doAnimation(element, animation,
                        delay, duration);

                    applyAnimation.clearAnimation(element, animation, timeout);

                });
            }
        };
    }]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],19:[function(require,module,exports){
'use strict';
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");
var $ = window.jQuery;
var _animations = {};

angular.module('webApp')
    .directive('ceresEntranceAnimationType', ['$log', '$timeout', 'applyAnimation', function ($log, $timeout, applyAnimation) {
        return {
            restrict: 'A',
            link: function postLink(scope, element, attrs) {
                element.css('opacity', 0);

                //add a collection that tracks the attrs of
                //the different animated elements so they
                //are properly parmeterized on the triggerAnimation
                //actions.
                var unqid = _.uniqueId('animation-');
                element.attr('data-animation-id', unqid);
                attrs.hasAnimated = false;
                _animations[unqid] = attrs;

                scope.triggerInviewAnimation = function (inview, inviewpart, event) {
                    if (inview) {
                        var inviewElement = $(event.inViewTarget);
                        attrs = _animations[inviewElement.attr('data-animation-id')];
                        $log.log("Inview Animation");
                        if (!attrs.animatedIn) {
                            var animation = attrs.ceresEntranceAnimationType;
                            var delay = attrs.entranceAnimationDelay ? attrs.entranceAnimationDelay : 0;
                            var duration = attrs.entranceAnimationDuration ? attrs.entranceAnimationDuration : 0;

                            var timeout = applyAnimation.doAnimation(inviewElement, animation,
                                delay, duration);

                            applyAnimation.clearAnimation(inviewElement, animation, timeout, function () {
                                inviewElement.css('opacity', 1);
                            });
                            attrs.animatedIn = true;
                        }
                    }
                };
            }
        };
    }]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],20:[function(require,module,exports){
'use strict';

angular.module('webApp')
    .directive('ceresFlipbook', function () {
        return {
            restrict: 'A',
            link: function postLink(scope, element, attrs) {
                var $ = jQuery;

                element.addClass('bb-custom-wrapper');
                var $el = $(element);


                var config = {
                        $bookBlock: $el.find('.bb-bookblock'),
                        $navNext: $el.find('.bb-nav-next'),
                        $navPrev: $el.find('.bb-nav-prev'),
                        $navFirst: $el.find('.bb-nav-first'),
                        $navLast: $el.find('.bb-nav-last')
                    },
                    init = function () {
                        config.$bookBlock.bookblock({
                            speed: 800,
                            shadowSides: 0.8,
                            shadowFlip: 0.7
                        });
                        initEvents();
                    },
                    initEvents = function () {

                        var $slides = config.$bookBlock.children();

                        // add navigation events
                        config.$navNext.on('click touchstart', function () {
                            config.$bookBlock.bookblock('next');
                            return false;
                        });

                        config.$navPrev.on('click touchstart', function () {
                            config.$bookBlock.bookblock('prev');
                            return false;
                        });

                        config.$navFirst.on('click touchstart', function () {
                            config.$bookBlock.bookblock('first');
                            return false;
                        });

                        config.$navLast.on('click touchstart', function () {
                            config.$bookBlock.bookblock('last');
                            return false;
                        });

                        // add swipe events
                        $slides.on({
                            'swipeleft': function (event) {
                                config.$bookBlock.bookblock('next');
                                return false;
                            },
                            'swiperight': function (event) {
                                config.$bookBlock.bookblock('prev');
                                return false;
                            }
                        });
                    };
                init();

            }
        };
    })
;

},{}],21:[function(require,module,exports){
'use strict';
var $ = window.jQuery;
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp').constant("ceresGradients",
    {
        gradients: [
            {
                "name":"Emerald Water",
                "color1":"#348F50",
                "color2":"#56B4D3"
            },
            {
                "name":"Lemon Twist",
                "color1":"#3CA55C",
                "color2":"#B5AC49"
            },
            {
                "name":"Horizon",
                "color1":"#003973",
                "color2":"#E5E5BE"
            },
            {
                "name":"Rose Water",
                "color1":"#E55D87",
                "color2":"#5FC3E4"
            },
            {
                "name":"Frozen",
                "color1":"#403B4A",
                "color2":"#E7E9BB"
            },
            {
                "name":"Mango Pulp",
                "color1":"#F09819",
                "color2":"#EDDE5D"
            },
            {
                "name":"Bloody Mary",
                "color1":"#FF512F",
                "color2":"#DD2476"
            },
            {
                "name":"Aubergine",
                "color1":"#AA076B",
                "color2":"#61045F"
            },
            {
                "name":"Aqua Marine",
                "color1":"#1A2980",
                "color2":"#26D0CE"
            },
            {
                "name":"Sunrise",
                "color1":"#FF512F",
                "color2":"#F09819"
            },
            {
                "name":"Purple Paradise",
                "color1":"#1D2B64",
                "color2":"#F8CDDA"
            },
            {
                "name":"Sea Weed",
                "color1":"#4CB8C4",
                "color2":"#3CD3AD"
            },
            {
                "name":"Pinky",
                "color1":"#DD5E89",
                "color2":"#F7BB97"
            },
            {
                "name":"Cherry",
                "color1":"#EB3349",
                "color2":"#F45C43"
            },
            {
                "name":"Mojito",
                "color1":"#1D976C",
                "color2":"#93F9B9"
            },
            {
                "name":"Juicy Orange",
                "color1":"#FF8008",
                "color2":"#FFC837"
            },
            {
                "name":"Mirage",
                "color1":"#16222A",
                "color2":"#3A6073"
            },
            {
                "name":"Steel Gray",
                "color1":"#1F1C2C",
                "color2":"#928DAB"
            },
            {
                "name":"Kashmir",
                "color1":"#614385",
                "color2":"#516395"
            },
            {
                "name":"Electric Violet",
                "color1":"#4776E6",
                "color2":"#8E54E9"
            },
            {
                "name":"Venice Blue",
                "color1":"#085078",
                "color2":"#85D8CE"
            },
            {
                "name":"Bora Bora",
                "color1":"#2BC0E4",
                "color2":"#EAECC6"
            },
            {
                "name":"Moss",
                "color1":"#134E5E",
                "color2":"#71B280"
            },
            {
                "name":"Shroom Haze",
                "color1":"#5C258D",
                "color2":"#4389A2"
            },
            {
                "name":"Mystic",
                "color1":"#757F9A",
                "color2":"#D7DDE8"
            },
            {
                "name":"Midnight City",
                "color1":"#232526",
                "color2":"#414345"
            },
            {
                "name":"Sea Blizz",
                "color1":"#1CD8D2",
                "color2":"#93EDC7"
            },
            {
                "name":"Opa",
                "color1":"#3D7EAA",
                "color2":"#FFE47A"
            },
            {
                "name":"Titanium",
                "color1":"#283048",
                "color2":"#859398"
            },
            {
                "name":"Mantle",
                "color1":"#24C6DC",
                "color2":"#514A9D"
            },
            {
                "name":"Dracula",
                "color1":"#DC2424",
                "color2":"#4A569D"
            },
            {
                "name":"Peach",
                "color1":"#ED4264",
                "color2":"#FFEDBC"
            },
            {
                "name":"Moonrise",
                "color1":"#DAE2F8",
                "color2":"#D6A4A4"
            },
            {
                "name":"Clouds",
                "color1":"#ECE9E6",
                "color2":"#FFFFFF"
            },
            {
                "name":"Stellar",
                "color1":"#7474BF",
                "color2":"#348AC7"
            },
            {
                "name":"Bourbon",
                "color1":"#EC6F66",
                "color2":"#F3A183"
            },
            {
                "name":"Calm Darya",
                "color1":"#5f2c82",
                "color2":"#49a09d"
            },
            {
                "name":"Influenza",
                "color1":"#C04848",
                "color2":"#480048"
            },
            {
                "name":"Shrimpy",
                "color1":"#e43a15",
                "color2":"#e65245"
            },
            {
                "name":"Army",
                "color1":"#414d0b",
                "color2":"#727a17"
            },
            {
                "name":"Miaka",
                "color1":"#FC354C",
                "color2":"#0ABFBC"
            },
            {
                "name":"Pinot Noir",
                "color1":"#4b6cb7",
                "color2":"#182848"
            },
            {
                "name":"Day Tripper",
                "color1":"#f857a6",
                "color2":"#ff5858"
            },
            {
                "name":"Namn",
                "color1":"#a73737",
                "color2":"#7a2828"
            },
            {
                "name":"Blurry Beach",
                "color1":"#d53369",
                "color2":"#cbad6d"
            },
            {
                "name":"Vasily",
                "color1":"#e9d362",
                "color2":"#333333"
            },
            {
                "name":"A Lost Memory",
                "color1":"#DE6262",
                "color2":"#FFB88C"
            },
            {
                "name":"Petrichor",
                "color1":"#666600",
                "color2":"#999966"
            },
            {
                "name":"Jonquil",
                "color1":"#FFEEEE",
                "color2":"#DDEFBB"
            },
            {
                "name":"Sirius Tamed",
                "color1":"#EFEFBB",
                "color2":"#D4D3DD"
            },
            {
                "name":"Kyoto",
                "color1":"#c21500",
                "color2":"#ffc500"
            },
            {
                "name":"Misty Meadow",
                "color1":"#215f00",
                "color2":"#e4e4d9"
            },
            {
                "name":"Aqualicious",
                "color1":"#50C9C3",
                "color2":"#96DEDA"
            },
            {
                "name":"Moor",
                "color1":"#616161",
                "color2":"#9bc5c3"
            },
            {
                "name":"Almost",
                "color1":"#ddd6f3",
                "color2":"#faaca8"
            },
            {
                "name":"Forever Lost",
                "color1":"#5D4157",
                "color2":"#A8CABA"
            },
            {
                "name":"Winter",
                "color1":"#E6DADA",
                "color2":"#274046"
            },
            {
                "name":"Autumn",
                "color1":"#DAD299",
                "color2":"#B0DAB9"
            },
            {
                "name":"Candy",
                "color1":"#D3959B",
                "color2":"#BFE6BA"
            },
            {
                "name":"Reef",
                "color1":"#00d2ff",
                "color2":"#3a7bd5"
            },
            {
                "name":"The Strain",
                "color1":"#870000",
                "color2":"#190A05"
            },
            {
                "name":"Dirty Fog",
                "color1":"#B993D6",
                "color2":"#8CA6DB"
            },
            {
                "name":"Earthly",
                "color1":"#649173",
                "color2":"#DBD5A4"
            },
            {
                "name":"Virgin",
                "color1":"#C9FFBF",
                "color2":"#FFAFBD"
            },
            {
                "name":"Ash",
                "color1":"#606c88",
                "color2":"#3f4c6b"
            },
            {
                "name":"Shadow Night",
                "color1":"#000000",
                "color2":"#53346D"
            },
            {
                "name":"Cherryblossoms",
                "color1":"#FBD3E9",
                "color2":"#BB377D"
            },
            {
                "name":"Parklife",
                "color1":"#ADD100",
                "color2":"#7B920A"
            },
            {
                "name":"Dance To Forget",
                "color1":"#FF4E50",
                "color2":"#F9D423"
            },
            {
                "name":"Starfall",
                "color1":"#F0C27B",
                "color2":"#4B1248"
            },
            {
                "name":"Red Mist",
                "color1":"#000000",
                "color2":"#e74c3c"
            },
            {
                "name":"Teal Love",
                "color1":"#AAFFA9",
                "color2":"#11FFBD"
            },
            {
                "name":"Neon Life",
                "color1":"#B3FFAB",
                "color2":"#12FFF7"
            },
            {
                "name":"Man of Steel",
                "color1":"#780206",
                "color2":"#061161"
            },
            {
                "name":"Amethyst",
                "color1":"#9D50BB",
                "color2":"#6E48AA"
            },
            {
                "name":"Cheer Up Emo Kid",
                "color1":"#556270",
                "color2":"#FF6B6B"
            },
            {
                "name":"Shore",
                "color1":"#70e1f5",
                "color2":"#ffd194"
            },
            {
                "name":"Facebook Messenger",
                "color1":"#00c6ff",
                "color2":"#0072ff"
            },
            {
                "name":"SoundCloud",
                "color1":"#fe8c00",
                "color2":"#f83600"
            },
            {
                "name":"Behongo",
                "color1":"#52c234",
                "color2":"#061700"
            },
            {
                "name":"ServQuick",
                "color1":"#485563",
                "color2":"#29323c"
            },
            {
                "name":"Friday",
                "color1":"#83a4d4",
                "color2":"#b6fbff"
            },
            {
                "name":"Martini",
                "color1":"#FDFC47",
                "color2":"#24FE41"
            },
            {
                "name":"Metallic Toad",
                "color1":"#abbaab",
                "color2":"#ffffff"
            },
            {
                "name":"Between The Clouds",
                "color1":"#73C8A9",
                "color2":"#373B44"
            },
            {
                "name":"Crazy Orange I",
                "color1":"#D38312",
                "color2":"#A83279"
            },
            {
                "name":"Hersheys",
                "color1":"#1e130c",
                "color2":"#9a8478"
            },
            {
                "name":"Talking To Mice Elf",
                "color1":"#948E99",
                "color2":"#2E1437"
            },
            {
                "name":"Purple Bliss",
                "color1":"#360033",
                "color2":"#0b8793"
            },
            {
                "name":"Predawn",
                "color1":"#FFA17F",
                "color2":"#00223E"
            },
            {
                "name":"Endless River",
                "color1":"#43cea2",
                "color2":"#185a9d"
            },
            {
                "name":"Pastel Orange at the Sun",
                "color1":"#ffb347",
                "color2":"#ffcc33"
            },
            {
                "name": "Twitch",
                "color1": "#6441A5",
                "color2": "#2a0845"
            },
            {
                "name": "Instagram",
                "color1": "#517fa4",
                "color2": "#243949"
            },
            {
                "name": "Flickr",
                "color1": "#ff0084",
                "color2": "#33001b"
            },
            {
                "name": "Vine",
                "color1": "#00bf8f",
                "color2": "#001510"
            }
        ]})
    .directive('ceresGradientBg', [
        '$log', '$interpolate', 'ceresGradients',
        function ($log, $interpolate, ceresGradients) {

            function link(scope, element, attrs) {

                //if directive is declared via class,
                //evaluate the object provided by the declaration
                //and shove it into the attrs var so that it
                // behaves like the other two declaration types.
                if (_.isString(attrs.ceresGradientBg)) {
                    var directiveAtts = scope.$eval(attrs.ceresGradientBg);
                    _.merge(attrs, directiveAtts);
                }

                var gradientsMap = _.indexBy(ceresGradients.gradients, function (grad) {
                    return S(grad.name).dasherize().chompLeft('-').s;
                });

                var selectedGradientStyle = attrs.gradientStyle ? attrs.gradientStyle : "emerald-water";
                var selectedGradient = gradientsMap[selectedGradientStyle];

                var $el = $(element);
                var vendors = ['webkit', 'moz', 'ms', 'o'];
                vendors = _.mapValues(vendors, function (v) {
                    return S(v).ensureLeft('-').ensureRight('-').s;
                });
                vendors = _.values(vendors);
                vendors.push('');

                var background = $interpolate("background: {{ vendor }}linear-gradient({{ degree }}deg, {{ color1 }} 10%, {{ color2 }} 90%);");
                var bkgdRules = _.mapValues(vendors, function (v) {
                    selectedGradient.vendor = v;
                    selectedGradient.degree = attrs.gradientDegree ? attrs.gradientDegree : 90;
                    return background(selectedGradient);
                });

                var bkgdString = _.reduce(bkgdRules, function (all, rule) {
                    return all + rule;
                });

                var elStyle = $el.attr("style") + bkgdString;

                $el.attr("style", elStyle);
            }

            return {
                restrict: 'AEC',
                link: link
            };
        }]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],22:[function(require,module,exports){
'use strict';

var $ = window.jQuery;
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp')
    .directive('ceresHoverAnimation',  ['$log', '$timeout', 'applyAnimation', function ($log, $timeout, applyAnimation) {
        return {
            restrict: 'A',
            link: function postLink(scope, element, attrs) {
                var animation = attrs.ceresHoverAnimation;
                var delay = attrs.ceresHoverAnimationDelay;
                var duration = attrs.hoverAnimationDuration;

                element.bind('mouseenter', function () {
                    var timeout = applyAnimation.doAnimation(element, animation,
                        delay, duration);
                    applyAnimation.clearAnimation(element, animation, timeout);

                });

            }
        };
    }]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],23:[function(require,module,exports){
'use strict';
var $ = window.jQuery;
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp')
    .directive('ceresVideoBg', [
        '$log', '$interpolate', '$window',
        function ($log, $interpolate, $window) {

            function link(scope, element, attrs) {

                //if directive is declared via class,
                //evaluate the object provided by the declaration
                //and shove it into the attrs var so that it
                // behaves like the other two declaration types.
                if (_.isString(attrs.ceresVideoBg)) {
                    var directiveAtts = scope.$eval(attrs.ceresVideoBg);
                    _.merge(attrs, directiveAtts);
                }

                var template =
                    '<div class="ceres-background-video">' +
                    '<video muted="muted" preload="auto" autoplay="autoplay" loop="loop" poster="{{ poster }}" class="video-js">' +
                    '<source src="{{ mp4Path }}" type="video/mp4" />' +
                    '<source src="{{ webmPath }}" type="video/webm" />' +
                    '</video>' +
                    '</div>';
                var compiledTemplate = $interpolate(template);
                var videoHtml = compiledTemplate(attrs);

                element.addClass('has-ceres-video-bg');
                element.prepend(videoHtml);

                var videoEl = element.find('.ceres-background-video > video');
                if (videoEl.count > 0) {
                    videoEl = videoEl[0];
                }
                var updateVideoSize = function () {
                    var elWidth = element.width();
                    var elHeight = element.height();

                    var vidWidth = videoEl.width();
                    var vidHeight = videoEl.height();
                    var vidAspectRatio = vidWidth / vidHeight;


                    $(videoEl).css('min-width', Math.round(Math.max(elWidth, elHeight * vidAspectRatio)));
                    $(videoEl).css('min-height', Math.round(Math.max(elHeight, elWidth / vidAspectRatio)));

                    //Grab it again because the width and height of the video have been updated
                    vidWidth = videoEl.width();
                    vidHeight = videoEl.height();
                    // Calculate the top and left offsets to center the video
                    var left = Math.round((vidWidth - elWidth) / 2) * -1;
                    var top = Math.round((vidHeight - elHeight) / 2) * -1;
                    $(videoEl).css('left', left + 'px');
                    $(videoEl).css('top', top + 'px');
                };

                $(window).load(function () {
                    _.defer(function () {
                        updateVideoSize();
                    });
                });

                $($window).on("debouncedresize", function (event) {
                    updateVideoSize();
                });
            }

            return {
                restrict: 'AEC',
                link: link
            };
        }]);

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],24:[function(require,module,exports){
'use strict';

angular.module('webApp')
    .directive('counter', ['$log', '$window', function ($log, $window) {
        return {
            template: '<div in-view="animate($inview)"></div>',
            restrict: 'E',
            controller: function ($scope) {

            },
            scope: {},
            link: function postLink(scope, element, attrs) {
                var _ = $window._;
                var numeral = $window.numeral;
                var TweenMax = $window.TweenMax;
                var Power2 = $window.Power2;

                //get the start & end values
                var currVal = attrs.startValue;
                var endVal = attrs.endValue;
                var prefix = attrs.prefix ? attrs.prefix : '';
                var postfix = attrs.postfix ? attrs.postfix : '';
                var format = attrs.numberFormat ? attrs.numberFormat : '0,0';

                //animation options
                var duration = attrs.animationDuration ? parseFloat(attrs.animationDuration) : 5;
                var animationDelay = attrs.animationDelay ? parseFloat(attrs.animationDelay) : 0;
                var easing = attrs.easing ? attrs.easing : 'Power2.easeInOut';
                var easingParts = easing.split('.');

                var easeObj = $window;
                _.forEach(easingParts, function (ease) {
                    easeObj = easeObj[ease];
                });
                easing = easeObj;

                //numeraljs configuration;
                var defaultLang = numeral.languageData('en');
                var oldLang = _.cloneDeep(defaultLang);


                //NOTE: We have to directly edit the DOM because the NG apply
                //isn't sufficient for animating steps.
                element.text(currVal);

                scope.getTextVal = function () {
                    return parseFloat(currVal);
                };
                scope.setTextVal = function (val) {
                    if (attrs.thousandsDelimiter) {
                        defaultLang.delimiters.thousands = attrs.thousandsDelimiter;
                    }
                    if (attrs.decimalDelimiter) {
                        defaultLang.delimiters.decimal = attrs.decimalDelimiter;
                    }

                    var currVal = parseFloat(val, 10);
                    var numStr = prefix + numeral(currVal).format(format) + postfix;
                    element.text(numStr);
                };

                var animated = false;
                scope.animate = function (inview) {
                    if (!animated && inview) {
                        TweenMax.to(scope, duration, { delay: animationDelay, setTextVal: endVal, ease: easing, onComplete: function () {
                            //reset the default numeral.
                            numeral.language('en', oldLang);
                        }});
                        animated = true;
                    }
                };
            }
        };
    }]);

},{}],25:[function(require,module,exports){
'use strict';

// load src modules
// ADD REQUIRE STATEMENTS FOR NEW SHORTCODES HERE

// WARNING: DO NOT DELETE THE LINE BELOW -- THE SHORTCODE GENERATOR DEPENDS ON IT
// [ShortcodeNgControllerRequireStatement]
require('./ceresSeparatorStyledCtrl/ceresSeparatorStyledCtrl');
require('./ceresIconListItemCtrl/ceresIconListItemCtrl');
require('./ceresIconListCtrl/ceresIconListCtrl');
require('./ceresIconBlockCtrl/ceresIconBlockCtrl');
require('./ceresIconLinkCtrl/ceresIconLinkCtrl');
require('./ceresIconBoxCtrl/ceresIconBoxCtrl');
require('./ceresButtonOutlineCtrl/ceresButtonOutlineCtrl');
require('./ceresButtonSolidCtrl/ceresButtonSolidCtrl');
require('./ceresAnimationBlockCtrl/ceresAnimationBlockCtrl');
require('./ceresIconListItemCtrl/ceresIconListItemCtrl');
require('./ceresGoogleMapMarkerCtrl/ceresGoogleMapMarkerCtrl');
require('./ceresGoogleMapCtrl/ceresGoogleMapCtrl');

angular.module('webApp', [
    // ADD MODULE NAMES FOR NEW SHORTCODES HERE
    'ngAnimate',
    'angular-inview',
    'timer',
    'google-maps',
    // WARNING: DO NOT DELETE THE LINE BELOW -- THE SHORTCODE GENERATOR DEPENDS ON IT
    // [ShortcodeNgModuleImport]
        'ceresSeparatorStyledCtrlModule',
        'ceresIconListItemCtrlModule',
        'ceresIconListCtrlModule',
        'ceresIconBlockCtrlModule',
        'ceresIconLinkCtrlModule',
        'ceresIconBoxCtrlModule',
        'ceresButtonOutlineCtrlModule',
        'ceresButtonSolidCtrlModule',
        'ceresAnimationBlockCtrlModule',
        'ceresIconListItemCtrlModule',
    'ceresGoogleMapMarkerCtrlModule',
    'ceresGoogleMapCtrlModule'
]);

require('./services/browservendorstrings');
require('./services/applyanimation');

require('./vendors/numeral');
require('./vendors/angular-parallax/scripts/angular-parallax.js');
require('./vendors/toucheffects');

require('./directives/angular-parallax');
require('./directives/ceresclickanimation');
require('./directives/ceresentranceanimationtype');
require('./directives/cereshoveranimation');
require('./directives/ceresgradientbg');
require('./directives/ceresvideobg');
require('./directives/ceresflipbook');
require('./directives/counter');
require('./directives/bscarousel.js');
require('./directives/bscarouselslide.js');



//angular configuration
angular.element(document).ready(function () {
    /*smart works go here*/
    var $html = angular.element('html');
    // bootstrap model
    angular.bootstrap($html, ['webApp']);
});

},{"./ceresAnimationBlockCtrl/ceresAnimationBlockCtrl":3,"./ceresButtonOutlineCtrl/ceresButtonOutlineCtrl":4,"./ceresButtonSolidCtrl/ceresButtonSolidCtrl":5,"./ceresGoogleMapCtrl/ceresGoogleMapCtrl":6,"./ceresGoogleMapMarkerCtrl/ceresGoogleMapMarkerCtrl":8,"./ceresIconBlockCtrl/ceresIconBlockCtrl":9,"./ceresIconBoxCtrl/ceresIconBoxCtrl":10,"./ceresIconLinkCtrl/ceresIconLinkCtrl":11,"./ceresIconListCtrl/ceresIconListCtrl":12,"./ceresIconListItemCtrl/ceresIconListItemCtrl":13,"./ceresSeparatorStyledCtrl/ceresSeparatorStyledCtrl":14,"./directives/angular-parallax":15,"./directives/bscarousel.js":16,"./directives/bscarouselslide.js":17,"./directives/ceresclickanimation":18,"./directives/ceresentranceanimationtype":19,"./directives/ceresflipbook":20,"./directives/ceresgradientbg":21,"./directives/cereshoveranimation":22,"./directives/ceresvideobg":23,"./directives/counter":24,"./services/applyanimation":26,"./services/browservendorstrings":27,"./vendors/angular-parallax/scripts/angular-parallax.js":28,"./vendors/numeral":29,"./vendors/toucheffects":30}],26:[function(require,module,exports){
'use strict';

var $ = window.jQuery
var _ = require("./../../bower_components/lodash/dist/lodash.compat.js");
var S = require("./../../bower_components/stringjs/lib/string.min.js");

angular.module('webApp')
    .factory('applyAnimation', function (browserVendorStrings, $log, $timeout) {

        var setAllVendorCSS = function (element, property, value) {
            _.forEach(browserVendorStrings, function (prefix) {
                var stylePrefix = S(prefix);
                if (prefix != '') {
                    stylePrefix.ensureLeft('-').ensureRight('-');
                }
                element.css(stylePrefix.ensureRight(property).s, value);
            });
        };

        // Public API here
        return {
            doAnimation: function (element, animation, delay, duration) {
                element = $(element);
                if (!element.hasClass('animated')) {
                    if (duration !== undefined) {
                        setAllVendorCSS(element, 'animation-duration', S(duration).ensureRight('s').s);
                    }
                    if (delay !== undefined) {
                        setAllVendorCSS(element, 'animation-delay', S(delay).ensureRight('s').s);
                    }

                    element.addClass("animated " + animation);
                    $log.log("Added Animated class");
                    delay = parseFloat(delay);
                    duration = parseFloat(duration);
                    delay = !isNaN(delay) ? delay : 0;
                    duration = !isNaN(duration) ? duration : 0;
                    return (delay + duration) * 1000;
                }
            },
            clearAnimation: function (element, animation, timeout, cb) {
                timeout = timeout > 0 ? timeout : 750;
                $timeout(function () {
                    element = $(element);
                    element.removeClass("animated");
                    element.removeClass(animation);
                    $log.log("Removed Animated class");

                }, timeout);
                if (cb) {
                    cb();
                }
            }
        };
    });

},{"./../../bower_components/lodash/dist/lodash.compat.js":1,"./../../bower_components/stringjs/lib/string.min.js":2}],27:[function(require,module,exports){
'use strict';

angular.module('webApp')
  .constant('browserVendorStrings', ['webkit', 'moz', 'o', 'ms', '']);

},{}],28:[function(require,module,exports){
'use strict';

angular.module('angular-parallax', [
    ]).directive('parallax', ['$window', function ($window) {
        return {
            restrict: 'A',
            scope: {
                parallaxRatio: '@',
                parallaxVerticalOffset: '@',
                parallaxHorizontalOffset: '@',
            },
            link: function ($scope, elem, $attrs) {
                var setPosition = function () {
                    // horizontal positioning
                    elem.css('left', $scope.parallaxHorizontalOffset + "px");

                    var calcValY = $window.pageYOffset * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1 );
                    if (calcValY <= $window.innerHeight) {
                        var topVal = (calcValY < $scope.parallaxVerticalOffset ? $scope.parallaxVerticalOffset : calcValY);
                        elem.css('top', topVal + "px");
                    }
                };

                setPosition();

                angular.element($window).bind("scroll", setPosition);
                angular.element($window).bind("touchmove", setPosition);
            }  // link function
        };
    }]).directive('parallaxBackground', ['$window', function ($window) {
        return {
            restrict: 'AC',
            transclude: true,
            template: '<div ng-transclude></div>',
            scope: {
                parallaxRatio: '@',
            },
            link: function ($scope, elem, attrs) {

                //if directive is declared via class,
                //evaluate the object provided by the declaration
                //and shove it into the attrs var so that it
                // behaves like the other two declaration types.
                if (_.isString(attrs.parallaxBackground)) {
                    var directiveAtts = $scope.$eval(attrs.parallaxBackground);
                    _.merge(attrs, directiveAtts);
                }

                var setPosition = function () {
                    var calcValY = (elem.prop('offsetTop') - $window.pageYOffset) * ($scope.parallaxRatio ? $scope.parallaxRatio : 1.1 );
                    // horizontal positioning
                    elem.css('background-position', "50% " + calcValY + "px");
                };

                // set our initial position - fixes webkit background render bug
                angular.element($window).bind('load', function (e) {
                    setPosition();
                    $scope.$apply();
                });

                angular.element($window).bind("scroll", setPosition);
                angular.element($window).bind("touchmove", setPosition);
            }  // link function
        };
    }]);

},{}],29:[function(require,module,exports){
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
     Constants
     ************************************/

    var numeral,
        VERSION = '1.5.3',
    // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
    // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
     Constructors
     ************************************/


        // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;

        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
     Formatting
     ************************************/

        // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);

        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
     Top Level Functions
     ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };

    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }

        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }

        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                    (b === 2) ? 'nd' :
                        (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
     Helpers
     ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
     Floating-point helpers
     ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            'use strict';

            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }

            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }


    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
            return mp > mn ? mp : mn;
        }, -Infinity);
    }


    /************************************
     Numeral Prototype
     ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this,
                inputString ? inputString : defaultFormat,
                (roundingFunction !== undefined) ? roundingFunction : Math.round
            );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') {
                return inputString;
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
     Exposing Numeral
     ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return numeral;
        });
    }
})(); // KR -- Had to change this line from the following:
// }).call(this);
// Otherwise the function wasn't being run
// TODO: Figure out why

},{}],30:[function(require,module,exports){
/** Used Only For Touch Devices **/
( function( window ) {
	
	// for touch devices: add class cs-hover to the figures when touching the items
	if( Modernizr.touch ) {

		// classie.js https://github.com/desandro/classie/blob/master/classie.js
		// class helper functions from bonzo https://github.com/ded/bonzo

		function classReg( className ) {
			return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
		}

		// classList support for class management
		// altho to be fair, the api sucks because it won't accept multiple classes at once
		var hasClass, addClass, removeClass;

		if ( 'classList' in document.documentElement ) {
			hasClass = function( elem, c ) {
				return elem.classList.contains( c );
			};
			addClass = function( elem, c ) {
				elem.classList.add( c );
			};
			removeClass = function( elem, c ) {
				elem.classList.remove( c );
			};
		}
		else {
			hasClass = function( elem, c ) {
				return classReg( c ).test( elem.className );
			};
			addClass = function( elem, c ) {
				if ( !hasClass( elem, c ) ) {
						elem.className = elem.className + ' ' + c;
				}
			};
			removeClass = function( elem, c ) {
				elem.className = elem.className.replace( classReg( c ), ' ' );
			};
		}

		function toggleClass( elem, c ) {
			var fn = hasClass( elem, c ) ? removeClass : addClass;
			fn( elem, c );
		}

		var classie = {
			// full names
			hasClass: hasClass,
			addClass: addClass,
			removeClass: removeClass,
			toggleClass: toggleClass,
			// short names
			has: hasClass,
			add: addClass,
			remove: removeClass,
			toggle: toggleClass
		};

		// transport
		if ( typeof define === 'function' && define.amd ) {
			// AMD
			define( classie );
		} else {
			// browser global
			window.classie = classie;
		}

		[].slice.call( document.querySelectorAll( 'ul.grid > li > figure' ) ).forEach( function( el, i ) {
			el.querySelector( 'figcaption > a' ).addEventListener( 'touchstart', function(e) {
				e.stopPropagation();
			}, false );
			el.addEventListener( 'touchstart', function(e) {
				classie.toggle( this, 'cs-hover' );
			}, false );
		} );

	}

})( window );
},{}]},{},[25])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvYm93ZXJfY29tcG9uZW50cy9sb2Rhc2gvZGlzdC9sb2Rhc2guY29tcGF0LmpzIiwiYXBwL2Jvd2VyX2NvbXBvbmVudHMvc3RyaW5nanMvbGliL3N0cmluZy5taW4uanMiLCJhcHAvc3JjL2NlcmVzQW5pbWF0aW9uQmxvY2tDdHJsL2NlcmVzQW5pbWF0aW9uQmxvY2tDdHJsLmpzIiwiYXBwL3NyYy9jZXJlc0J1dHRvbk91dGxpbmVDdHJsL2NlcmVzQnV0dG9uT3V0bGluZUN0cmwuanMiLCJhcHAvc3JjL2NlcmVzQnV0dG9uU29saWRDdHJsL2NlcmVzQnV0dG9uU29saWRDdHJsLmpzIiwiYXBwL3NyYy9jZXJlc0dvb2dsZU1hcEN0cmwvY2VyZXNHb29nbGVNYXBDdHJsLmpzIiwiYXBwL3NyYy9jZXJlc0dvb2dsZU1hcEN0cmwvc25henp5LmpzIiwiYXBwL3NyYy9jZXJlc0dvb2dsZU1hcE1hcmtlckN0cmwvY2VyZXNHb29nbGVNYXBNYXJrZXJDdHJsLmpzIiwiYXBwL3NyYy9jZXJlc0ljb25CbG9ja0N0cmwvY2VyZXNJY29uQmxvY2tDdHJsLmpzIiwiYXBwL3NyYy9jZXJlc0ljb25Cb3hDdHJsL2NlcmVzSWNvbkJveEN0cmwuanMiLCJhcHAvc3JjL2NlcmVzSWNvbkxpbmtDdHJsL2NlcmVzSWNvbkxpbmtDdHJsLmpzIiwiYXBwL3NyYy9jZXJlc0ljb25MaXN0Q3RybC9jZXJlc0ljb25MaXN0Q3RybC5qcyIsImFwcC9zcmMvY2VyZXNJY29uTGlzdEl0ZW1DdHJsL2NlcmVzSWNvbkxpc3RJdGVtQ3RybC5qcyIsImFwcC9zcmMvY2VyZXNTZXBhcmF0b3JTdHlsZWRDdHJsL2NlcmVzU2VwYXJhdG9yU3R5bGVkQ3RybC5qcyIsImFwcC9zcmMvZGlyZWN0aXZlcy9hbmd1bGFyLXBhcmFsbGF4LmpzIiwiYXBwL3NyYy9kaXJlY3RpdmVzL2JzY2Fyb3VzZWwuanMiLCJhcHAvc3JjL2RpcmVjdGl2ZXMvYnNjYXJvdXNlbHNsaWRlLmpzIiwiYXBwL3NyYy9kaXJlY3RpdmVzL2NlcmVzY2xpY2thbmltYXRpb24uanMiLCJhcHAvc3JjL2RpcmVjdGl2ZXMvY2VyZXNlbnRyYW5jZWFuaW1hdGlvbnR5cGUuanMiLCJhcHAvc3JjL2RpcmVjdGl2ZXMvY2VyZXNmbGlwYm9vay5qcyIsImFwcC9zcmMvZGlyZWN0aXZlcy9jZXJlc2dyYWRpZW50YmcuanMiLCJhcHAvc3JjL2RpcmVjdGl2ZXMvY2VyZXNob3ZlcmFuaW1hdGlvbi5qcyIsImFwcC9zcmMvZGlyZWN0aXZlcy9jZXJlc3ZpZGVvYmcuanMiLCJhcHAvc3JjL2RpcmVjdGl2ZXMvY291bnRlci5qcyIsImFwcC9zcmMvaW5kZXguanMiLCJhcHAvc3JjL3NlcnZpY2VzL2FwcGx5YW5pbWF0aW9uLmpzIiwiYXBwL3NyYy9zZXJ2aWNlcy9icm93c2VydmVuZG9yc3RyaW5ncy5qcyIsImFwcC9zcmMvdmVuZG9ycy9hbmd1bGFyLXBhcmFsbGF4L3NjcmlwdHMvYW5ndWxhci1wYXJhbGxheC5qcyIsImFwcC9zcmMvdmVuZG9ycy9udW1lcmFsLmpzIiwiYXBwL3NyYy92ZW5kb3JzL3RvdWNoZWZmZWN0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNyL05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy84SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1aEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvLURhc2ggMi40LjEgKEN1c3RvbSBCdWlsZCkgPGh0dHA6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIC1vIC4vZGlzdC9sb2Rhc2guY29tcGF0LmpzYFxuICogQ29weXJpZ2h0IDIwMTItMjAxMyBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS41LjIgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHA6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlIEVTNSBlbnZpcm9ubWVudHMgKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCB0byBwb29sIGFycmF5cyBhbmQgb2JqZWN0cyB1c2VkIGludGVybmFsbHkgKi9cbiAgdmFyIGFycmF5UG9vbCA9IFtdLFxuICAgICAgb2JqZWN0UG9vbCA9IFtdO1xuXG4gIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMgKi9cbiAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgLyoqIFVzZWQgaW50ZXJuYWxseSB0byBpbmRpY2F0ZSB2YXJpb3VzIHRoaW5ncyAqL1xuICB2YXIgaW5kaWNhdG9yT2JqZWN0ID0ge307XG5cbiAgLyoqIFVzZWQgdG8gcHJlZml4IGtleXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggYF9fcHJvdG9fX2AgYW5kIHByb3BlcnRpZXMgb24gYE9iamVjdC5wcm90b3R5cGVgICovXG4gIHZhciBrZXlQcmVmaXggPSArbmV3IERhdGUgKyAnJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB3aGVuIG9wdGltaXphdGlvbnMgYXJlIGVuYWJsZWQgZm9yIGxhcmdlIGFycmF5cyAqL1xuICB2YXIgbGFyZ2VBcnJheVNpemUgPSA3NTtcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4IHNpemUgb2YgdGhlIGBhcnJheVBvb2xgIGFuZCBgb2JqZWN0UG9vbGAgKi9cbiAgdmFyIG1heFBvb2xTaXplID0gNDA7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGFuZCB0ZXN0IHdoaXRlc3BhY2UgKi9cbiAgdmFyIHdoaXRlc3BhY2UgPSAoXG4gICAgLy8gd2hpdGVzcGFjZVxuICAgICcgXFx0XFx4MEJcXGZcXHhBMFxcdWZlZmYnICtcblxuICAgIC8vIGxpbmUgdGVybWluYXRvcnNcbiAgICAnXFxuXFxyXFx1MjAyOFxcdTIwMjknICtcblxuICAgIC8vIHVuaWNvZGUgY2F0ZWdvcnkgXCJac1wiIHNwYWNlIHNlcGFyYXRvcnNcbiAgICAnXFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMCdcbiAgKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggRVM2IHRlbXBsYXRlIGRlbGltaXRlcnNcbiAgICogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtbGl0ZXJhbHMtc3RyaW5nLWxpdGVyYWxzXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHJlZ2V4cCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcyAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0ZWQgbmFtZWQgZnVuY3Rpb25zICovXG4gIHZhciByZUZ1bmNOYW1lID0gL15cXHMqZnVuY3Rpb25bIFxcblxcclxcdF0rXFx3LztcblxuICAvKiogVXNlZCB0byBtYXRjaCBcImludGVycG9sYXRlXCIgdGVtcGxhdGUgZGVsaW1pdGVycyAqL1xuICB2YXIgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZSBhbmQgemVyb3MgdG8gYmUgcmVtb3ZlZCAqL1xuICB2YXIgcmVMZWFkaW5nU3BhY2VzQW5kWmVyb3MgPSBSZWdFeHAoJ15bJyArIHdoaXRlc3BhY2UgKyAnXSowKyg/PS4kKScpO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycyAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBmdW5jdGlvbnMgY29udGFpbmluZyBhIGB0aGlzYCByZWZlcmVuY2UgKi9cbiAgdmFyIHJlVGhpcyA9IC9cXGJ0aGlzXFxiLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMgKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx0XFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGFzc2lnbiBkZWZhdWx0IGBjb250ZXh0YCBvYmplY3QgcHJvcGVydGllcyAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnTWF0aCcsICdOdW1iZXInLCAnT2JqZWN0JyxcbiAgICAnUmVnRXhwJywgJ1N0cmluZycsICdfJywgJ2F0dGFjaEV2ZW50JywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdpc05hTicsXG4gICAgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gZml4IHRoZSBKU2NyaXB0IFtbRG9udEVudW1dXSBidWcgKi9cbiAgdmFyIHNoYWRvd2VkUHJvcHMgPSBbXG4gICAgJ2NvbnN0cnVjdG9yJywgJ2hhc093blByb3BlcnR5JywgJ2lzUHJvdG90eXBlT2YnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAgICd0b0xvY2FsZVN0cmluZycsICd0b1N0cmluZycsICd2YWx1ZU9mJ1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkgKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IDA7XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCBzaG9ydGN1dHMgKi9cbiAgdmFyIGFyZ3NDbGFzcyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlDbGFzcyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBib29sQ2xhc3MgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlQ2xhc3MgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBlcnJvckNsYXNzID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNDbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBudW1iZXJDbGFzcyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgb2JqZWN0Q2xhc3MgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHJlZ2V4cENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzdHJpbmdDbGFzcyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IG9iamVjdCBjbGFzc2lmaWNhdGlvbnMgdGhhdCBgXy5jbG9uZWAgc3VwcG9ydHMgKi9cbiAgdmFyIGNsb25lYWJsZUNsYXNzZXMgPSB7fTtcbiAgY2xvbmVhYmxlQ2xhc3Nlc1tmdW5jQ2xhc3NdID0gZmFsc2U7XG4gIGNsb25lYWJsZUNsYXNzZXNbYXJnc0NsYXNzXSA9IGNsb25lYWJsZUNsYXNzZXNbYXJyYXlDbGFzc10gPVxuICBjbG9uZWFibGVDbGFzc2VzW2Jvb2xDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW2RhdGVDbGFzc10gPVxuICBjbG9uZWFibGVDbGFzc2VzW251bWJlckNsYXNzXSA9IGNsb25lYWJsZUNsYXNzZXNbb2JqZWN0Q2xhc3NdID1cbiAgY2xvbmVhYmxlQ2xhc3Nlc1tyZWdleHBDbGFzc10gPSBjbG9uZWFibGVDbGFzc2VzW3N0cmluZ0NsYXNzXSA9IHRydWU7XG5cbiAgLyoqIFVzZWQgYXMgYW4gaW50ZXJuYWwgYF8uZGVib3VuY2VgIG9wdGlvbnMgb2JqZWN0ICovXG4gIHZhciBkZWJvdW5jZU9wdGlvbnMgPSB7XG4gICAgJ2xlYWRpbmcnOiBmYWxzZSxcbiAgICAnbWF4V2FpdCc6IDAsXG4gICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgfTtcblxuICAvKiogVXNlZCBhcyB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgYF9fYmluZERhdGFfX2AgKi9cbiAgdmFyIGRlc2NyaXB0b3IgPSB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IGZhbHNlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogbnVsbCxcbiAgICAnd3JpdGFibGUnOiBmYWxzZVxuICB9O1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBkYXRhIG9iamVjdCBmb3IgYGl0ZXJhdG9yVGVtcGxhdGVgICovXG4gIHZhciBpdGVyYXRvckRhdGEgPSB7XG4gICAgJ2FyZ3MnOiAnJyxcbiAgICAnYXJyYXknOiBudWxsLFxuICAgICdib3R0b20nOiAnJyxcbiAgICAnZmlyc3RBcmcnOiAnJyxcbiAgICAnaW5pdCc6ICcnLFxuICAgICdrZXlzJzogbnVsbCxcbiAgICAnbG9vcCc6ICcnLFxuICAgICdzaGFkb3dlZFByb3BzJzogbnVsbCxcbiAgICAnc3VwcG9ydCc6IG51bGwsXG4gICAgJ3RvcCc6ICcnLFxuICAgICd1c2VIYXMnOiBmYWxzZVxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIE9iamVjdCAqL1xuICB2YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgJ2Jvb2xlYW4nOiBmYWxzZSxcbiAgICAnZnVuY3Rpb24nOiB0cnVlLFxuICAgICdvYmplY3QnOiB0cnVlLFxuICAgICdudW1iZXInOiBmYWxzZSxcbiAgICAnc3RyaW5nJzogZmFsc2UsXG4gICAgJ3VuZGVmaW5lZCc6IGZhbHNlXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMgKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx0JzogJ3QnLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCAqL1xuICB2YXIgcm9vdCA9IChvYmplY3RUeXBlc1t0eXBlb2Ygd2luZG93XSAmJiB3aW5kb3cpIHx8IHRoaXM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYCAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYCAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzICYmIGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUgYW5kIHVzZSBpdCBhcyBgcm9vdGAgKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSBvYmplY3RUeXBlc1t0eXBlb2YgZ2xvYmFsXSAmJiBnbG9iYWw7XG4gIGlmIChmcmVlR2xvYmFsICYmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkpIHtcbiAgICByb290ID0gZnJlZUdsb2JhbDtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGJpbmFyeSBzZWFyY2hlc1xuICAgKiBvciBgZnJvbUluZGV4YCBjb25zdHJhaW50cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSAoZnJvbUluZGV4IHx8IDApIC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbnRhaW5zYCBmb3IgY2FjaGUgb2JqZWN0cyB0aGF0IG1pbWljcyB0aGUgcmV0dXJuXG4gICAqIHNpZ25hdHVyZSBvZiBgXy5pbmRleE9mYCBieSByZXR1cm5pbmcgYDBgIGlmIHRoZSB2YWx1ZSBpcyBmb3VuZCwgZWxzZSBgLTFgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGAwYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUluZGV4T2YoY2FjaGUsIHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgY2FjaGUgPSBjYWNoZS5jYWNoZTtcblxuICAgIGlmICh0eXBlID09ICdib29sZWFuJyB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FjaGVbdmFsdWVdID8gMCA6IC0xO1xuICAgIH1cbiAgICBpZiAodHlwZSAhPSAnbnVtYmVyJyAmJiB0eXBlICE9ICdzdHJpbmcnKSB7XG4gICAgICB0eXBlID0gJ29iamVjdCc7XG4gICAgfVxuICAgIHZhciBrZXkgPSB0eXBlID09ICdudW1iZXInID8gdmFsdWUgOiBrZXlQcmVmaXggKyB2YWx1ZTtcbiAgICBjYWNoZSA9IChjYWNoZSA9IGNhY2hlW3R5cGVdKSAmJiBjYWNoZVtrZXldO1xuXG4gICAgcmV0dXJuIHR5cGUgPT0gJ29iamVjdCdcbiAgICAgID8gKGNhY2hlICYmIGJhc2VJbmRleE9mKGNhY2hlLCB2YWx1ZSkgPiAtMSA/IDAgOiAtMSlcbiAgICAgIDogKGNhY2hlID8gMCA6IC0xKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgZ2l2ZW4gdmFsdWUgdG8gdGhlIGNvcnJlc3BvbmRpbmcgY2FjaGUgb2JqZWN0LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQgdG8gdGhlIGNhY2hlLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVQdXNoKHZhbHVlKSB7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZSxcbiAgICAgICAgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICAgIGlmICh0eXBlID09ICdib29sZWFuJyB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBjYWNoZVt2YWx1ZV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZSAhPSAnbnVtYmVyJyAmJiB0eXBlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHR5cGUgPSAnb2JqZWN0JztcbiAgICAgIH1cbiAgICAgIHZhciBrZXkgPSB0eXBlID09ICdudW1iZXInID8gdmFsdWUgOiBrZXlQcmVmaXggKyB2YWx1ZSxcbiAgICAgICAgICB0eXBlQ2FjaGUgPSBjYWNoZVt0eXBlXSB8fCAoY2FjaGVbdHlwZV0gPSB7fSk7XG5cbiAgICAgIGlmICh0eXBlID09ICdvYmplY3QnKSB7XG4gICAgICAgICh0eXBlQ2FjaGVba2V5XSB8fCAodHlwZUNhY2hlW2tleV0gPSBbXSkpLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZUNhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLm1heGAgYW5kIGBfLm1pbmAgYXMgdGhlIGRlZmF1bHQgY2FsbGJhY2sgd2hlbiBhIGdpdmVuXG4gICAqIGNvbGxlY3Rpb24gaXMgYSBzdHJpbmcgdmFsdWUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgY2hhcmFjdGVyIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvZGUgdW5pdCBvZiBnaXZlbiBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyQXRDYWxsYmFjayh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYHNvcnRCeWAgdG8gY29tcGFyZSB0cmFuc2Zvcm1lZCBgY29sbGVjdGlvbmAgZWxlbWVudHMsIHN0YWJsZSBzb3J0aW5nXG4gICAqIHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGNvbXBhcmUgdG8gYGJgLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvbXBhcmUgdG8gYGFgLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBvZiBgMWAgb3IgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcoYSwgYikge1xuICAgIHZhciBhYyA9IGEuY3JpdGVyaWEsXG4gICAgICAgIGJjID0gYi5jcml0ZXJpYSxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYWMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFjW2luZGV4XSxcbiAgICAgICAgICBvdGhlciA9IGJjW2luZGV4XTtcblxuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICBpZiAodmFsdWUgPiBvdGhlciB8fCB0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPCBvdGhlciB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHJldHVybiB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAvLyBgYWAgYW5kIGBiYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAvL1xuICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgLy8gU2VlIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwXG4gICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjYWNoZSBvYmplY3QgdG8gb3B0aW1pemUgbGluZWFyIHNlYXJjaGVzIG9mIGxhcmdlIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgKiBAcmV0dXJucyB7bnVsbHxPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIG9iamVjdCBvciBgbnVsbGAgaWYgY2FjaGluZyBzaG91bGQgbm90IGJlIHVzZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDYWNoZShhcnJheSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGZpcnN0ID0gYXJyYXlbMF0sXG4gICAgICAgIG1pZCA9IGFycmF5WyhsZW5ndGggLyAyKSB8IDBdLFxuICAgICAgICBsYXN0ID0gYXJyYXlbbGVuZ3RoIC0gMV07XG5cbiAgICBpZiAoZmlyc3QgJiYgdHlwZW9mIGZpcnN0ID09ICdvYmplY3QnICYmXG4gICAgICAgIG1pZCAmJiB0eXBlb2YgbWlkID09ICdvYmplY3QnICYmIGxhc3QgJiYgdHlwZW9mIGxhc3QgPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGNhY2hlID0gZ2V0T2JqZWN0KCk7XG4gICAgY2FjaGVbJ2ZhbHNlJ10gPSBjYWNoZVsnbnVsbCddID0gY2FjaGVbJ3RydWUnXSA9IGNhY2hlWyd1bmRlZmluZWQnXSA9IGZhbHNlO1xuXG4gICAgdmFyIHJlc3VsdCA9IGdldE9iamVjdCgpO1xuICAgIHJlc3VsdC5hcnJheSA9IGFycmF5O1xuICAgIHJlc3VsdC5jYWNoZSA9IGNhY2hlO1xuICAgIHJlc3VsdC5wdXNoID0gY2FjaGVQdXNoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2luZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgdGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWRcbiAgICogc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKG1hdGNoKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbbWF0Y2hdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gYXJyYXkgZnJvbSB0aGUgYXJyYXkgcG9vbCBvciBjcmVhdGVzIGEgbmV3IG9uZSBpZiB0aGUgcG9vbCBpcyBlbXB0eS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgZnJvbSB0aGUgcG9vbC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldEFycmF5KCkge1xuICAgIHJldHVybiBhcnJheVBvb2wucG9wKCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBvYmplY3QgZnJvbSB0aGUgb2JqZWN0IHBvb2wgb3IgY3JlYXRlcyBhIG5ldyBvbmUgaWYgdGhlIHBvb2wgaXMgZW1wdHkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBvYmplY3QgZnJvbSB0aGUgcG9vbC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldE9iamVjdCgpIHtcbiAgICByZXR1cm4gb2JqZWN0UG9vbC5wb3AoKSB8fCB7XG4gICAgICAnYXJyYXknOiBudWxsLFxuICAgICAgJ2NhY2hlJzogbnVsbCxcbiAgICAgICdjcml0ZXJpYSc6IG51bGwsXG4gICAgICAnZmFsc2UnOiBmYWxzZSxcbiAgICAgICdpbmRleCc6IDAsXG4gICAgICAnbnVsbCc6IGZhbHNlLFxuICAgICAgJ251bWJlcic6IG51bGwsXG4gICAgICAnb2JqZWN0JzogbnVsbCxcbiAgICAgICdwdXNoJzogbnVsbCxcbiAgICAgICdzdHJpbmcnOiBudWxsLFxuICAgICAgJ3RydWUnOiBmYWxzZSxcbiAgICAgICd1bmRlZmluZWQnOiBmYWxzZSxcbiAgICAgICd2YWx1ZSc6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgRE9NIG5vZGUgaW4gSUUgPCA5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgRE9NIG5vZGUsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzTm9kZSh2YWx1ZSkge1xuICAgIC8vIElFIDwgOSBwcmVzZW50cyBET00gbm9kZXMgYXMgYE9iamVjdGAgb2JqZWN0cyBleGNlcHQgdGhleSBoYXZlIGB0b1N0cmluZ2BcbiAgICAvLyBtZXRob2RzIHRoYXQgYXJlIGB0eXBlb2ZgIFwic3RyaW5nXCIgYW5kIHN0aWxsIGNhbiBjb2VyY2Ugbm9kZXMgdG8gc3RyaW5nc1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKHZhbHVlICsgJycpID09ICdzdHJpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBnaXZlbiBhcnJheSBiYWNrIHRvIHRoZSBhcnJheSBwb29sLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byByZWxlYXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVsZWFzZUFycmF5KGFycmF5KSB7XG4gICAgYXJyYXkubGVuZ3RoID0gMDtcbiAgICBpZiAoYXJyYXlQb29sLmxlbmd0aCA8IG1heFBvb2xTaXplKSB7XG4gICAgICBhcnJheVBvb2wucHVzaChhcnJheSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBnaXZlbiBvYmplY3QgYmFjayB0byB0aGUgb2JqZWN0IHBvb2wuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHJlbGVhc2UuXG4gICAqL1xuICBmdW5jdGlvbiByZWxlYXNlT2JqZWN0KG9iamVjdCkge1xuICAgIHZhciBjYWNoZSA9IG9iamVjdC5jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHJlbGVhc2VPYmplY3QoY2FjaGUpO1xuICAgIH1cbiAgICBvYmplY3QuYXJyYXkgPSBvYmplY3QuY2FjaGUgPSBvYmplY3QuY3JpdGVyaWEgPSBvYmplY3Qub2JqZWN0ID0gb2JqZWN0Lm51bWJlciA9IG9iamVjdC5zdHJpbmcgPSBvYmplY3QudmFsdWUgPSBudWxsO1xuICAgIGlmIChvYmplY3RQb29sLmxlbmd0aCA8IG1heFBvb2xTaXplKSB7XG4gICAgICBvYmplY3RQb29sLnB1c2gob2JqZWN0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2xpY2VzIHRoZSBgY29sbGVjdGlvbmAgZnJvbSB0aGUgYHN0YXJ0YCBpbmRleCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsXG4gICAqIHRoZSBgZW5kYCBpbmRleC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGluc3RlYWQgb2YgYEFycmF5I3NsaWNlYCB0byBzdXBwb3J0IG5vZGUgbGlzdHNcbiAgICogaW4gSUUgPCA5IGFuZCB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZSByZXR1cm5lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNsaWNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IGluZGV4LlxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgaW5kZXguXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICBzdGFydCB8fCAoc3RhcnQgPSAwKTtcbiAgICBpZiAodHlwZW9mIGVuZCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQgfHwgMCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGdpdmVuIGNvbnRleHQgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgLy8gQXZvaWQgaXNzdWVzIHdpdGggc29tZSBFUzMgZW52aXJvbm1lbnRzIHRoYXQgYXR0ZW1wdCB0byB1c2UgdmFsdWVzLCBuYW1lZFxuICAgIC8vIGFmdGVyIGJ1aWx0LWluIGNvbnN0cnVjdG9ycyBsaWtlIGBPYmplY3RgLCBmb3IgdGhlIGNyZWF0aW9uIG9mIGxpdGVyYWxzLlxuICAgIC8vIEVTNSBjbGVhcnMgdGhpcyB1cCBieSBzdGF0aW5nIHRoYXQgbGl0ZXJhbHMgbXVzdCB1c2UgYnVpbHQtaW4gY29uc3RydWN0b3JzLlxuICAgIC8vIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDExLjEuNS5cbiAgICBjb250ZXh0ID0gY29udGV4dCA/IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpIDogcm9vdDtcblxuICAgIC8qKiBOYXRpdmUgY29uc3RydWN0b3IgcmVmZXJlbmNlcyAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIEJvb2xlYW4gPSBjb250ZXh0LkJvb2xlYW4sXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBOdW1iZXIgPSBjb250ZXh0Lk51bWJlcixcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBgQXJyYXlgIG1ldGhvZCByZWZlcmVuY2VzLlxuICAgICAqXG4gICAgICogTm9ybWFsbHkgYEFycmF5LnByb3RvdHlwZWAgd291bGQgc3VmZmljZSwgaG93ZXZlciwgdXNpbmcgYW4gYXJyYXkgbGl0ZXJhbFxuICAgICAqIGF2b2lkcyBpc3N1ZXMgaW4gTmFyd2hhbC5cbiAgICAgKi9cbiAgICB2YXIgYXJyYXlSZWYgPSBbXTtcblxuICAgIC8qKiBVc2VkIGZvciBuYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMgKi9cbiAgICB2YXIgZXJyb3JQcm90byA9IEVycm9yLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBzdHJpbmdQcm90byA9IFN0cmluZy5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBub0NvbmZsaWN0YCAqL1xuICAgIHZhciBvbGREYXNoID0gY29udGV4dC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgaW50ZXJuYWwgW1tDbGFzc11dIG9mIHZhbHVlcyAqL1xuICAgIHZhciB0b1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZSAqL1xuICAgIHZhciByZU5hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgU3RyaW5nKHRvU3RyaW5nKVxuICAgICAgICAucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKVxuICAgICAgICAucmVwbGFjZSgvdG9TdHJpbmd8IGZvciBbXlxcXV0rL2csICcuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogTmF0aXZlIG1ldGhvZCBzaG9ydGN1dHMgKi9cbiAgICB2YXIgY2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgY2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgZm5Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2YgPSBpc05hdGl2ZShnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZikgJiYgZ2V0UHJvdG90eXBlT2YsXG4gICAgICAgIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHksXG4gICAgICAgIHB1c2ggPSBhcnJheVJlZi5wdXNoLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0LFxuICAgICAgICBzcGxpY2UgPSBhcnJheVJlZi5zcGxpY2UsXG4gICAgICAgIHVuc2hpZnQgPSBhcnJheVJlZi51bnNoaWZ0O1xuXG4gICAgLyoqIFVzZWQgdG8gc2V0IG1ldGEgZGF0YSBvbiBmdW5jdGlvbnMgKi9cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAvLyBJRSA4IG9ubHkgYWNjZXB0cyBET00gZWxlbWVudHNcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBvID0ge30sXG4gICAgICAgICAgICBmdW5jID0gaXNOYXRpdmUoZnVuYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgJiYgZnVuYyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMobywgbywgbykgJiYgZnVuYztcbiAgICAgIH0gY2F0Y2goZSkgeyB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0oKSk7XG5cbiAgICAvKiBOYXRpdmUgbWV0aG9kIHNob3J0Y3V0cyBmb3IgbWV0aG9kcyB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcyAqL1xuICAgIHZhciBuYXRpdmVDcmVhdGUgPSBpc05hdGl2ZShuYXRpdmVDcmVhdGUgPSBPYmplY3QuY3JlYXRlKSAmJiBuYXRpdmVDcmVhdGUsXG4gICAgICAgIG5hdGl2ZUlzQXJyYXkgPSBpc05hdGl2ZShuYXRpdmVJc0FycmF5ID0gQXJyYXkuaXNBcnJheSkgJiYgbmF0aXZlSXNBcnJheSxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVJc05hTiA9IGNvbnRleHQuaXNOYU4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBpc05hdGl2ZShuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMpICYmIG5hdGl2ZUtleXMsXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCBhIGJ1aWx0LWluIGNvbnN0cnVjdG9yIGJ5IFtbQ2xhc3NdXSAqL1xuICAgIHZhciBjdG9yQnlDbGFzcyA9IHt9O1xuICAgIGN0b3JCeUNsYXNzW2FycmF5Q2xhc3NdID0gQXJyYXk7XG4gICAgY3RvckJ5Q2xhc3NbYm9vbENsYXNzXSA9IEJvb2xlYW47XG4gICAgY3RvckJ5Q2xhc3NbZGF0ZUNsYXNzXSA9IERhdGU7XG4gICAgY3RvckJ5Q2xhc3NbZnVuY0NsYXNzXSA9IEZ1bmN0aW9uO1xuICAgIGN0b3JCeUNsYXNzW29iamVjdENsYXNzXSA9IE9iamVjdDtcbiAgICBjdG9yQnlDbGFzc1tudW1iZXJDbGFzc10gPSBOdW1iZXI7XG4gICAgY3RvckJ5Q2xhc3NbcmVnZXhwQ2xhc3NdID0gUmVnRXhwO1xuICAgIGN0b3JCeUNsYXNzW3N0cmluZ0NsYXNzXSA9IFN0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGF2b2lkIGl0ZXJhdGluZyBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGluIElFIDwgOSAqL1xuICAgIHZhciBub25FbnVtUHJvcHMgPSB7fTtcbiAgICBub25FbnVtUHJvcHNbYXJyYXlDbGFzc10gPSBub25FbnVtUHJvcHNbZGF0ZUNsYXNzXSA9IG5vbkVudW1Qcm9wc1tudW1iZXJDbGFzc10gPSB7ICdjb25zdHJ1Y3Rvcic6IHRydWUsICd0b0xvY2FsZVN0cmluZyc6IHRydWUsICd0b1N0cmluZyc6IHRydWUsICd2YWx1ZU9mJzogdHJ1ZSB9O1xuICAgIG5vbkVudW1Qcm9wc1tib29sQ2xhc3NdID0gbm9uRW51bVByb3BzW3N0cmluZ0NsYXNzXSA9IHsgJ2NvbnN0cnVjdG9yJzogdHJ1ZSwgJ3RvU3RyaW5nJzogdHJ1ZSwgJ3ZhbHVlT2YnOiB0cnVlIH07XG4gICAgbm9uRW51bVByb3BzW2Vycm9yQ2xhc3NdID0gbm9uRW51bVByb3BzW2Z1bmNDbGFzc10gPSBub25FbnVtUHJvcHNbcmVnZXhwQ2xhc3NdID0geyAnY29uc3RydWN0b3InOiB0cnVlLCAndG9TdHJpbmcnOiB0cnVlIH07XG4gICAgbm9uRW51bVByb3BzW29iamVjdENsYXNzXSA9IHsgJ2NvbnN0cnVjdG9yJzogdHJ1ZSB9O1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbmd0aCA9IHNoYWRvd2VkUHJvcHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBzaGFkb3dlZFByb3BzW2xlbmd0aF07XG4gICAgICAgIGZvciAodmFyIGNsYXNzTmFtZSBpbiBub25FbnVtUHJvcHMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChub25FbnVtUHJvcHMsIGNsYXNzTmFtZSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwobm9uRW51bVByb3BzW2NsYXNzTmFtZV0sIGtleSkpIHtcbiAgICAgICAgICAgIG5vbkVudW1Qcm9wc1tjbGFzc05hbWVdW2tleV0gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KCkpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIHRoZSBnaXZlbiB2YWx1ZSB0byBlbmFibGUgaW50dWl0aXZlXG4gICAgICogbWV0aG9kIGNoYWluaW5nLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gTG8tRGFzaCBtZXRob2RzLCB3cmFwcGVycyBhbHNvIGhhdmUgdGhlIGZvbGxvd2luZyBgQXJyYXlgIG1ldGhvZHM6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHJldmVyc2VgLCBgc2hpZnRgLCBgc2xpY2VgLCBgc29ydGAsIGBzcGxpY2VgLFxuICAgICAqIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGB2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBmdW5jdGlvbnMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhc3NpZ25gLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2hhaW5gLCBgY29tcGFjdGAsXG4gICAgICogYGNvbXBvc2VgLCBgY29uY2F0YCwgYGNvdW50QnlgLCBgY3JlYXRlYCwgYGNyZWF0ZUNhbGxiYWNrYCwgYGN1cnJ5YCxcbiAgICAgKiBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmZXJgLCBgZGVsYXlgLCBgZGlmZmVyZW5jZWAsIGBmaWx0ZXJgLCBgZmxhdHRlbmAsXG4gICAgICogYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCwgYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCxcbiAgICAgKiBgZnVuY3Rpb25zYCwgYGdyb3VwQnlgLCBgaW5kZXhCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnZlcnRgLFxuICAgICAqIGBpbnZva2VgLCBga2V5c2AsIGBtYXBgLCBgbWF4YCwgYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWluYCwgYG9iamVjdGAsIGBvbWl0YCxcbiAgICAgKiBgb25jZWAsIGBwYWlyc2AsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwaWNrYCwgYHBsdWNrYCwgYHB1bGxgLCBgcHVzaGAsXG4gICAgICogYHJhbmdlYCwgYHJlamVjdGAsIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNodWZmbGVgLCBgc2xpY2VgLCBgc29ydGAsXG4gICAgICogYHNvcnRCeWAsIGBzcGxpY2VgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRpbWVzYCwgYHRvQXJyYXlgLCBgdHJhbnNmb3JtYCxcbiAgICAgKiBgdW5pb25gLCBgdW5pcWAsIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHZhbHVlc2AsIGB3aGVyZWAsIGB3aXRob3V0YCwgYHdyYXBgLFxuICAgICAqIGFuZCBgemlwYFxuICAgICAqXG4gICAgICogVGhlIG5vbi1jaGFpbmFibGUgd3JhcHBlciBmdW5jdGlvbnMgYXJlOlxuICAgICAqIGBjbG9uZWAsIGBjbG9uZURlZXBgLCBgY29udGFpbnNgLCBgZXNjYXBlYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCxcbiAgICAgKiBgZmluZEtleWAsIGBmaW5kTGFzdGAsIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGhhc2AsIGBpZGVudGl0eWAsXG4gICAgICogYGluZGV4T2ZgLCBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0Jvb2xlYW5gLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsXG4gICAgICogYGlzRW1wdHlgLCBgaXNFcXVhbGAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzTmFOYCwgYGlzTnVsbGAsIGBpc051bWJlcmAsXG4gICAgICogYGlzT2JqZWN0YCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgam9pbmAsXG4gICAgICogYGxhc3RJbmRleE9mYCwgYG1peGluYCwgYG5vQ29uZmxpY3RgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLFxuICAgICAqIGByZWR1Y2VSaWdodGAsIGByZXN1bHRgLCBgc2hpZnRgLCBgc2l6ZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHJ1bkluQ29udGV4dGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYW5kIGB2YWx1ZWBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGZ1bmN0aW9ucyBgZmlyc3RgIGFuZCBgbGFzdGAgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIHdoZW4gYG5gIGlzXG4gICAgICogcHJvdmlkZWQsIG90aGVyd2lzZSB0aGV5IHJldHVybiB1bndyYXBwZWQgdmFsdWVzLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW5pbmcgY2FuIGJlIGVuYWJsZWQgYnkgdXNpbmcgdGhlIGBfLmNoYWluYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyByZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZVxuICAgICAqIHdyYXBwZWQucmVkdWNlKGZ1bmN0aW9uKHN1bSwgbnVtKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbnVtO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIHJldHVybnMgYSB3cmFwcGVkIHZhbHVlXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gKiBudW07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIC8vIGRvbid0IHdyYXAgaWYgYWxyZWFkeSB3cmFwcGVkLCBldmVuIGlmIHdyYXBwZWQgYnkgYSBkaWZmZXJlbnQgYGxvZGFzaGAgY29uc3RydWN0b3JcbiAgICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmICFpc0FycmF5KHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSlcbiAgICAgICA/IHZhbHVlXG4gICAgICAgOiBuZXcgbG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBmYXN0IHBhdGggZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hhaW5BbGwgQSBmbGFnIHRvIGVuYWJsZSBjaGFpbmluZyBmb3IgYWxsIG1ldGhvZHNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICB9XG4gICAgLy8gZW5zdXJlIGBuZXcgbG9kYXNoV3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGxvZGFzaGBcbiAgICBsb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGxvZGFzaC5wcm90b3R5cGU7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgdXNlZCB0byBmbGFnIGVudmlyb25tZW50cyBmZWF0dXJlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAqL1xuICAgIHZhciBzdXBwb3J0ID0gbG9kYXNoLnN1cHBvcnQgPSB7fTtcblxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdG9yID0gZnVuY3Rpb24oKSB7IHRoaXMueCA9IDE7IH0sXG4gICAgICAgICAgb2JqZWN0ID0geyAnMCc6IDEsICdsZW5ndGgnOiAxIH0sXG4gICAgICAgICAgcHJvcHMgPSBbXTtcblxuICAgICAgY3Rvci5wcm90b3R5cGUgPSB7ICd2YWx1ZU9mJzogMSwgJ3knOiAxIH07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmV3IGN0b3IpIHsgcHJvcHMucHVzaChrZXkpOyB9XG4gICAgICBmb3IgKGtleSBpbiBhcmd1bWVudHMpIHsgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBhbiBgYXJndW1lbnRzYCBvYmplY3QncyBbW0NsYXNzXV0gaXMgcmVzb2x2YWJsZSAoYWxsIGJ1dCBGaXJlZm94IDwgNCwgSUUgPCA5KS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0XG4gICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgKi9cbiAgICAgIHN1cHBvcnQuYXJnc0NsYXNzID0gdG9TdHJpbmcuY2FsbChhcmd1bWVudHMpID09IGFyZ3NDbGFzcztcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyAoYWxsIGJ1dCBOYXJ3aGFsIGFuZCBPcGVyYSA8IDEwLjUpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5hcmdzT2JqZWN0ID0gYXJndW1lbnRzLmNvbnN0cnVjdG9yID09IE9iamVjdCAmJiAhKGFyZ3VtZW50cyBpbnN0YW5jZW9mIEFycmF5KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgYG5hbWVgIG9yIGBtZXNzYWdlYCBwcm9wZXJ0aWVzIG9mIGBFcnJvci5wcm90b3R5cGVgIGFyZVxuICAgICAgICogZW51bWVyYWJsZSBieSBkZWZhdWx0LiAoSUUgPCA5LCBTYWZhcmkgPCA1LjEpXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0LmVudW1FcnJvclByb3BzID0gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlcnJvclByb3RvLCAnbWVzc2FnZScpIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZXJyb3JQcm90bywgJ25hbWUnKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgYHByb3RvdHlwZWAgcHJvcGVydGllcyBhcmUgZW51bWVyYWJsZSBieSBkZWZhdWx0LlxuICAgICAgICpcbiAgICAgICAqIEZpcmVmb3ggPCAzLjYsIE9wZXJhID4gOS41MCAtIE9wZXJhIDwgMTEuNjAsIGFuZCBTYWZhcmkgPCA1LjFcbiAgICAgICAqIChpZiB0aGUgcHJvdG90eXBlIG9yIGEgcHJvcGVydHkgb24gdGhlIHByb3RvdHlwZSBoYXMgYmVlbiBzZXQpXG4gICAgICAgKiBpbmNvcnJlY3RseSBzZXRzIGEgZnVuY3Rpb24ncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBbW0VudW1lcmFibGVdXVxuICAgICAgICogdmFsdWUgdG8gYHRydWVgLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5lbnVtUHJvdG90eXBlcyA9IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoY3RvciwgJ3Byb3RvdHlwZScpO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBmdW5jdGlvbnMgY2FuIGJlIGRlY29tcGlsZWQgYnkgYEZ1bmN0aW9uI3RvU3RyaW5nYFxuICAgICAgICogKGFsbCBidXQgUFMzIGFuZCBvbGRlciBPcGVyYSBtb2JpbGUgYnJvd3NlcnMgJiBhdm9pZGVkIGluIFdpbmRvd3MgOCBhcHBzKS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0XG4gICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgKi9cbiAgICAgIHN1cHBvcnQuZnVuY0RlY29tcCA9ICFpc05hdGl2ZShjb250ZXh0LldpblJURXJyb3IpICYmIHJlVGhpcy50ZXN0KHJ1bkluQ29udGV4dCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIGBGdW5jdGlvbiNuYW1lYCBpcyBzdXBwb3J0ZWQgKGFsbCBidXQgSUUpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5mdW5jTmFtZXMgPSB0eXBlb2YgRnVuY3Rpb24ubmFtZSA9PSAnc3RyaW5nJztcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgYGFyZ3VtZW50c2Agb2JqZWN0IGluZGV4ZXMgYXJlIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgKiAoRmlyZWZveCA8IDQsIElFIDwgOSwgUGhhbnRvbUpTLCBTYWZhcmkgPCA1LjEpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5ub25FbnVtQXJncyA9IGtleSAhPSAwO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBwcm9wZXJ0aWVzIHNoYWRvd2luZyB0aG9zZSBvbiBgT2JqZWN0LnByb3RvdHlwZWAgYXJlIG5vbi1lbnVtZXJhYmxlLlxuICAgICAgICpcbiAgICAgICAqIEluIElFIDwgOSBhbiBvYmplY3RzIG93biBwcm9wZXJ0aWVzLCBzaGFkb3dpbmcgbm9uLWVudW1lcmFibGUgb25lcywgYXJlXG4gICAgICAgKiBtYWRlIG5vbi1lbnVtZXJhYmxlIGFzIHdlbGwgKGEuay5hIHRoZSBKU2NyaXB0IFtbRG9udEVudW1dXSBidWcpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5ub25FbnVtU2hhZG93cyA9ICEvdmFsdWVPZi8udGVzdChwcm9wcyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIG93biBwcm9wZXJ0aWVzIGFyZSBpdGVyYXRlZCBhZnRlciBpbmhlcml0ZWQgcHJvcGVydGllcyAoYWxsIGJ1dCBJRSA8IDkpLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC5vd25MYXN0ID0gcHJvcHNbMF0gIT0gJ3gnO1xuXG4gICAgICAvKipcbiAgICAgICAqIERldGVjdCBpZiBgQXJyYXkjc2hpZnRgIGFuZCBgQXJyYXkjc3BsaWNlYCBhdWdtZW50IGFycmF5LWxpa2Ugb2JqZWN0cyBjb3JyZWN0bHkuXG4gICAgICAgKlxuICAgICAgICogRmlyZWZveCA8IDEwLCBJRSBjb21wYXRpYmlsaXR5IG1vZGUsIGFuZCBJRSA8IDkgaGF2ZSBidWdneSBBcnJheSBgc2hpZnQoKWBcbiAgICAgICAqIGFuZCBgc3BsaWNlKClgIGZ1bmN0aW9ucyB0aGF0IGZhaWwgdG8gcmVtb3ZlIHRoZSBsYXN0IGVsZW1lbnQsIGB2YWx1ZVswXWAsXG4gICAgICAgKiBvZiBhcnJheS1saWtlIG9iamVjdHMgZXZlbiB0aG91Z2ggdGhlIGBsZW5ndGhgIHByb3BlcnR5IGlzIHNldCB0byBgMGAuXG4gICAgICAgKiBUaGUgYHNoaWZ0KClgIG1ldGhvZCBpcyBidWdneSBpbiBJRSA4IGNvbXBhdGliaWxpdHkgbW9kZSwgd2hpbGUgYHNwbGljZSgpYFxuICAgICAgICogaXMgYnVnZ3kgcmVnYXJkbGVzcyBvZiBtb2RlIGluIElFIDwgOSBhbmQgYnVnZ3kgaW4gY29tcGF0aWJpbGl0eSBtb2RlIGluIElFIDkuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydFxuICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICovXG4gICAgICBzdXBwb3J0LnNwbGljZU9iamVjdHMgPSAoYXJyYXlSZWYuc3BsaWNlLmNhbGwob2JqZWN0LCAwLCAxKSwgIW9iamVjdFswXSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGxhY2sgb2Ygc3VwcG9ydCBmb3IgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIGJ5IGluZGV4LlxuICAgICAgICpcbiAgICAgICAqIElFIDwgOCBjYW4ndCBhY2Nlc3MgY2hhcmFjdGVycyBieSBpbmRleCBhbmQgSUUgOCBjYW4gb25seSBhY2Nlc3NcbiAgICAgICAqIGNoYXJhY3RlcnMgYnkgaW5kZXggb24gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnRcbiAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAqL1xuICAgICAgc3VwcG9ydC51bmluZGV4ZWRDaGFycyA9ICgneCdbMF0gKyBPYmplY3QoJ3gnKVswXSkgIT0gJ3h4JztcblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRlY3QgaWYgYSBET00gbm9kZSdzIFtbQ2xhc3NdXSBpcyByZXNvbHZhYmxlIChhbGwgYnV0IElFIDwgOSlcbiAgICAgICAqIGFuZCB0aGF0IHRoZSBKUyBlbmdpbmUgZXJyb3JzIHdoZW4gYXR0ZW1wdGluZyB0byBjb2VyY2UgYW4gb2JqZWN0IHRvXG4gICAgICAgKiBhIHN0cmluZyB3aXRob3V0IGEgYHRvU3RyaW5nYCBmdW5jdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0XG4gICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIHN1cHBvcnQubm9kZUNsYXNzID0gISh0b1N0cmluZy5jYWxsKGRvY3VtZW50KSA9PSBvYmplY3RDbGFzcyAmJiAhKHsgJ3RvU3RyaW5nJzogMCB9ICsgJycpKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBzdXBwb3J0Lm5vZGVDbGFzcyA9IHRydWU7XG4gICAgICB9XG4gICAgfSgxKSk7XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IExvLURhc2ggYXJlIHNpbWlsYXIgdG8gdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpLiBDaGFuZ2UgdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmVcbiAgICAgKiBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgUmVnRXhwXG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBSZWdFeHBcbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogLzwlKFtcXHNcXFNdKz8pJT4vZyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBSZWdFeHBcbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgc3RyaW5nXG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSB1c2VkIHRvIGNyZWF0ZSBpdGVyYXRvciBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBkYXRhIG9iamVjdCB1c2VkIHRvIHBvcHVsYXRlIHRoZSB0ZXh0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGludGVycG9sYXRlZCB0ZXh0LlxuICAgICAqL1xuICAgIHZhciBpdGVyYXRvclRlbXBsYXRlID0gZnVuY3Rpb24ob2JqKSB7XG5cbiAgICAgIHZhciBfX3AgPSAndmFyIGluZGV4LCBpdGVyYWJsZSA9ICcgK1xuICAgICAgKG9iai5maXJzdEFyZykgK1xuICAgICAgJywgcmVzdWx0ID0gJyArXG4gICAgICAob2JqLmluaXQpICtcbiAgICAgICc7XFxuaWYgKCFpdGVyYWJsZSkgcmV0dXJuIHJlc3VsdDtcXG4nICtcbiAgICAgIChvYmoudG9wKSArXG4gICAgICAnOyc7XG4gICAgICAgaWYgKG9iai5hcnJheSkge1xuICAgICAgX19wICs9ICdcXG52YXIgbGVuZ3RoID0gaXRlcmFibGUubGVuZ3RoOyBpbmRleCA9IC0xO1xcbmlmICgnICtcbiAgICAgIChvYmouYXJyYXkpICtcbiAgICAgICcpIHsgICc7XG4gICAgICAgaWYgKHN1cHBvcnQudW5pbmRleGVkQ2hhcnMpIHtcbiAgICAgIF9fcCArPSAnXFxuICBpZiAoaXNTdHJpbmcoaXRlcmFibGUpKSB7XFxuICAgIGl0ZXJhYmxlID0gaXRlcmFibGUuc3BsaXQoXFwnXFwnKVxcbiAgfSAgJztcbiAgICAgICB9XG4gICAgICBfX3AgKz0gJ1xcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcXG4gICAgJyArXG4gICAgICAob2JqLmxvb3ApICtcbiAgICAgICc7XFxuICB9XFxufVxcbmVsc2UgeyAgJztcbiAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQubm9uRW51bUFyZ3MpIHtcbiAgICAgIF9fcCArPSAnXFxuICB2YXIgbGVuZ3RoID0gaXRlcmFibGUubGVuZ3RoOyBpbmRleCA9IC0xO1xcbiAgaWYgKGxlbmd0aCAmJiBpc0FyZ3VtZW50cyhpdGVyYWJsZSkpIHtcXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcXG4gICAgICBpbmRleCArPSBcXCdcXCc7XFxuICAgICAgJyArXG4gICAgICAob2JqLmxvb3ApICtcbiAgICAgICc7XFxuICAgIH1cXG4gIH0gZWxzZSB7ICAnO1xuICAgICAgIH1cblxuICAgICAgIGlmIChzdXBwb3J0LmVudW1Qcm90b3R5cGVzKSB7XG4gICAgICBfX3AgKz0gJ1xcbiAgdmFyIHNraXBQcm90byA9IHR5cGVvZiBpdGVyYWJsZSA9PSBcXCdmdW5jdGlvblxcJztcXG4gICc7XG4gICAgICAgfVxuXG4gICAgICAgaWYgKHN1cHBvcnQuZW51bUVycm9yUHJvcHMpIHtcbiAgICAgIF9fcCArPSAnXFxuICB2YXIgc2tpcEVycm9yUHJvcHMgPSBpdGVyYWJsZSA9PT0gZXJyb3JQcm90byB8fCBpdGVyYWJsZSBpbnN0YW5jZW9mIEVycm9yO1xcbiAgJztcbiAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY29uZGl0aW9ucyA9IFtdOyAgICBpZiAoc3VwcG9ydC5lbnVtUHJvdG90eXBlcykgeyBjb25kaXRpb25zLnB1c2goJyEoc2tpcFByb3RvICYmIGluZGV4ID09IFwicHJvdG90eXBlXCIpJyk7IH0gICAgaWYgKHN1cHBvcnQuZW51bUVycm9yUHJvcHMpICB7IGNvbmRpdGlvbnMucHVzaCgnIShza2lwRXJyb3JQcm9wcyAmJiAoaW5kZXggPT0gXCJtZXNzYWdlXCIgfHwgaW5kZXggPT0gXCJuYW1lXCIpKScpOyB9XG5cbiAgICAgICBpZiAob2JqLnVzZUhhcyAmJiBvYmoua2V5cykge1xuICAgICAgX19wICs9ICdcXG4gIHZhciBvd25JbmRleCA9IC0xLFxcbiAgICAgIG93blByb3BzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGl0ZXJhYmxlXSAmJiBrZXlzKGl0ZXJhYmxlKSxcXG4gICAgICBsZW5ndGggPSBvd25Qcm9wcyA/IG93blByb3BzLmxlbmd0aCA6IDA7XFxuXFxuICB3aGlsZSAoKytvd25JbmRleCA8IGxlbmd0aCkge1xcbiAgICBpbmRleCA9IG93blByb3BzW293bkluZGV4XTtcXG4nO1xuICAgICAgICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCkge1xuICAgICAgX19wICs9ICcgICAgaWYgKCcgK1xuICAgICAgKGNvbmRpdGlvbnMuam9pbignICYmICcpKSArXG4gICAgICAnKSB7XFxuICAnO1xuICAgICAgIH1cbiAgICAgIF9fcCArPVxuICAgICAgKG9iai5sb29wKSArXG4gICAgICAnOyAgICAnO1xuICAgICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCkge1xuICAgICAgX19wICs9ICdcXG4gICAgfSc7XG4gICAgICAgfVxuICAgICAgX19wICs9ICdcXG4gIH0gICc7XG4gICAgICAgfSBlbHNlIHtcbiAgICAgIF9fcCArPSAnXFxuICBmb3IgKGluZGV4IGluIGl0ZXJhYmxlKSB7XFxuJztcbiAgICAgICAgICBpZiAob2JqLnVzZUhhcykgeyBjb25kaXRpb25zLnB1c2goXCJoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZXJhYmxlLCBpbmRleClcIik7IH0gICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgICBfX3AgKz0gJyAgICBpZiAoJyArXG4gICAgICAoY29uZGl0aW9ucy5qb2luKCcgJiYgJykpICtcbiAgICAgICcpIHtcXG4gICc7XG4gICAgICAgfVxuICAgICAgX19wICs9XG4gICAgICAob2JqLmxvb3ApICtcbiAgICAgICc7ICAgICc7XG4gICAgICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgICBfX3AgKz0gJ1xcbiAgICB9JztcbiAgICAgICB9XG4gICAgICBfX3AgKz0gJ1xcbiAgfSAgICAnO1xuICAgICAgIGlmIChzdXBwb3J0Lm5vbkVudW1TaGFkb3dzKSB7XG4gICAgICBfX3AgKz0gJ1xcblxcbiAgaWYgKGl0ZXJhYmxlICE9PSBvYmplY3RQcm90bykge1xcbiAgICB2YXIgY3RvciA9IGl0ZXJhYmxlLmNvbnN0cnVjdG9yLFxcbiAgICAgICAgaXNQcm90byA9IGl0ZXJhYmxlID09PSAoY3RvciAmJiBjdG9yLnByb3RvdHlwZSksXFxuICAgICAgICBjbGFzc05hbWUgPSBpdGVyYWJsZSA9PT0gc3RyaW5nUHJvdG8gPyBzdHJpbmdDbGFzcyA6IGl0ZXJhYmxlID09PSBlcnJvclByb3RvID8gZXJyb3JDbGFzcyA6IHRvU3RyaW5nLmNhbGwoaXRlcmFibGUpLFxcbiAgICAgICAgbm9uRW51bSA9IG5vbkVudW1Qcm9wc1tjbGFzc05hbWVdO1xcbiAgICAgICc7XG4gICAgICAgZm9yIChrID0gMDsgayA8IDc7IGsrKykge1xuICAgICAgX19wICs9ICdcXG4gICAgaW5kZXggPSBcXCcnICtcbiAgICAgIChvYmouc2hhZG93ZWRQcm9wc1trXSkgK1xuICAgICAgJ1xcJztcXG4gICAgaWYgKCghKGlzUHJvdG8gJiYgbm9uRW51bVtpbmRleF0pICYmIGhhc093blByb3BlcnR5LmNhbGwoaXRlcmFibGUsIGluZGV4KSknO1xuICAgICAgICAgICAgICBpZiAoIW9iai51c2VIYXMpIHtcbiAgICAgIF9fcCArPSAnIHx8ICghbm9uRW51bVtpbmRleF0gJiYgaXRlcmFibGVbaW5kZXhdICE9PSBvYmplY3RQcm90b1tpbmRleF0pJztcbiAgICAgICB9XG4gICAgICBfX3AgKz0gJykge1xcbiAgICAgICcgK1xuICAgICAgKG9iai5sb29wKSArXG4gICAgICAnO1xcbiAgICB9ICAgICAgJztcbiAgICAgICB9XG4gICAgICBfX3AgKz0gJ1xcbiAgfSAgICAnO1xuICAgICAgIH1cblxuICAgICAgIH1cblxuICAgICAgIGlmIChvYmouYXJyYXkgfHwgc3VwcG9ydC5ub25FbnVtQXJncykge1xuICAgICAgX19wICs9ICdcXG59JztcbiAgICAgICB9XG4gICAgICBfX3AgKz1cbiAgICAgIChvYmouYm90dG9tKSArXG4gICAgICAnO1xcbnJldHVybiByZXN1bHQnO1xuXG4gICAgICByZXR1cm4gX19wXG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYmluZGAgdGhhdCBjcmVhdGVzIHRoZSBib3VuZCBmdW5jdGlvbiBhbmRcbiAgICAgKiBzZXRzIGl0cyBtZXRhIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGJpbmREYXRhIFRoZSBiaW5kIGRhdGEgYXJyYXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUJpbmQoYmluZERhdGEpIHtcbiAgICAgIHZhciBmdW5jID0gYmluZERhdGFbMF0sXG4gICAgICAgICAgcGFydGlhbEFyZ3MgPSBiaW5kRGF0YVsyXSxcbiAgICAgICAgICB0aGlzQXJnID0gYmluZERhdGFbNF07XG5cbiAgICAgIGZ1bmN0aW9uIGJvdW5kKCkge1xuICAgICAgICAvLyBgRnVuY3Rpb24jYmluZGAgc3BlY1xuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjMuNC41XG4gICAgICAgIGlmIChwYXJ0aWFsQXJncykge1xuICAgICAgICAgIC8vIGF2b2lkIGBhcmd1bWVudHNgIG9iamVjdCBkZW9wdGltaXphdGlvbnMgYnkgdXNpbmcgYHNsaWNlYCBpbnN0ZWFkXG4gICAgICAgICAgLy8gb2YgYEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsYCBhbmQgbm90IGFzc2lnbmluZyBgYXJndW1lbnRzYCB0byBhXG4gICAgICAgICAgLy8gdmFyaWFibGUgYXMgYSB0ZXJuYXJ5IGV4cHJlc3Npb25cbiAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlKHBhcnRpYWxBcmdzKTtcbiAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3JcbiAgICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxMy4yLjJcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgIC8vIGVuc3VyZSBgbmV3IGJvdW5kYCBpcyBhbiBpbnN0YW5jZSBvZiBgZnVuY2BcbiAgICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKGZ1bmMucHJvdG90eXBlKSxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQmluZGluZywgYXJncyB8fCBhcmd1bWVudHMpO1xuICAgICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyB8fCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgc2V0QmluZERhdGEoYm91bmQsIGJpbmREYXRhKTtcbiAgICAgIHJldHVybiBib3VuZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgd2l0aG91dCBhcmd1bWVudCBqdWdnbGluZyBvciBzdXBwb3J0XG4gICAgICogZm9yIGB0aGlzQXJnYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXA9ZmFsc2VdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIEFzc29jaWF0ZXMgY2xvbmVzIHdpdGggc291cmNlIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2sodmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGluc3BlY3QgW1tDbGFzc11dXG4gICAgICB2YXIgaXNPYmogPSBpc09iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoaXNPYmopIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgICBpZiAoIWNsb25lYWJsZUNsYXNzZXNbY2xhc3NOYW1lXSB8fCAoIXN1cHBvcnQubm9kZUNsYXNzICYmIGlzTm9kZSh2YWx1ZSkpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdG9yID0gY3RvckJ5Q2xhc3NbY2xhc3NOYW1lXTtcbiAgICAgICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgICAgICBjYXNlIGJvb2xDbGFzczpcbiAgICAgICAgICBjYXNlIGRhdGVDbGFzczpcbiAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcigrdmFsdWUpO1xuXG4gICAgICAgICAgY2FzZSBudW1iZXJDbGFzczpcbiAgICAgICAgICBjYXNlIHN0cmluZ0NsYXNzOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKHZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgcmVnZXhwQ2xhc3M6XG4gICAgICAgICAgICByZXN1bHQgPSBjdG9yKHZhbHVlLnNvdXJjZSwgcmVGbGFncy5leGVjKHZhbHVlKSk7XG4gICAgICAgICAgICByZXN1bHQubGFzdEluZGV4ID0gdmFsdWUubGFzdEluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gY29ycmVzcG9uZGluZyBjbG9uZVxuICAgICAgICB2YXIgaW5pdGVkU3RhY2sgPSAhc3RhY2tBO1xuICAgICAgICBzdGFja0EgfHwgKHN0YWNrQSA9IGdldEFycmF5KCkpO1xuICAgICAgICBzdGFja0IgfHwgKHN0YWNrQiA9IGdldEFycmF5KCkpO1xuXG4gICAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja0JbbGVuZ3RoXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gaXNBcnIgPyBjdG9yKHZhbHVlLmxlbmd0aCkgOiB7fTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBpc0FyciA/IHNsaWNlKHZhbHVlKSA6IGFzc2lnbih7fSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gYWRkIGFycmF5IHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYFxuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnaW5kZXgnKSkge1xuICAgICAgICAgIHJlc3VsdC5pbmRleCA9IHZhbHVlLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnaW5wdXQnKSkge1xuICAgICAgICAgIHJlc3VsdC5pbnB1dCA9IHZhbHVlLmlucHV0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBleGl0IGZvciBzaGFsbG93IGNsb25lXG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gYWRkIHRoZSBzb3VyY2UgdmFsdWUgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzXG4gICAgICAvLyBhbmQgYXNzb2NpYXRlIGl0IHdpdGggaXRzIGNsb25lXG4gICAgICBzdGFja0EucHVzaCh2YWx1ZSk7XG4gICAgICBzdGFja0IucHVzaChyZXN1bHQpO1xuXG4gICAgICAvLyByZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpXG4gICAgICAoaXNBcnIgPyBiYXNlRWFjaCA6IGZvck93bikodmFsdWUsIGZ1bmN0aW9uKG9ialZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBiYXNlQ2xvbmUob2JqVmFsdWUsIGlzRGVlcCwgY2FsbGJhY2ssIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW5pdGVkU3RhY2spIHtcbiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7XG4gICAgICAgIHJlbGVhc2VBcnJheShzdGFja0IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KHByb3RvdHlwZSkgPyBuYXRpdmVDcmVhdGUocHJvdG90eXBlKSA6IHt9O1xuICAgIH1cbiAgICAvLyBmYWxsYmFjayBmb3IgYnJvd3NlcnMgd2l0aG91dCBgT2JqZWN0LmNyZWF0ZWBcbiAgICBpZiAoIW5hdGl2ZUNyZWF0ZSkge1xuICAgICAgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gT2JqZWN0KCkge31cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdChwcm90b3R5cGUpKSB7XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBPYmplY3Q7XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCBjb250ZXh0Lk9iamVjdCgpO1xuICAgICAgICB9O1xuICAgICAgfSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVDYWxsYmFja2Agd2l0aG91dCBzdXBwb3J0IGZvciBjcmVhdGluZ1xuICAgICAqIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcmdDb3VudF0gVGhlIG51bWJlciBvZiBhcmd1bWVudHMgdGhlIGNhbGxiYWNrIGFjY2VwdHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNyZWF0ZUNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGFyZ0NvdW50KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGZvciBubyBgdGhpc0FyZ2Agb3IgYWxyZWFkeSBib3VuZCBieSBgRnVuY3Rpb24jYmluZGBcbiAgICAgIGlmICh0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyB8fCAhKCdwcm90b3R5cGUnIGluIGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfVxuICAgICAgdmFyIGJpbmREYXRhID0gZnVuYy5fX2JpbmREYXRhX187XG4gICAgICBpZiAodHlwZW9mIGJpbmREYXRhID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChzdXBwb3J0LmZ1bmNOYW1lcykge1xuICAgICAgICAgIGJpbmREYXRhID0gIWZ1bmMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBiaW5kRGF0YSA9IGJpbmREYXRhIHx8ICFzdXBwb3J0LmZ1bmNEZWNvbXA7XG4gICAgICAgIGlmICghYmluZERhdGEpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gZm5Ub1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICAgIGlmICghc3VwcG9ydC5mdW5jTmFtZXMpIHtcbiAgICAgICAgICAgIGJpbmREYXRhID0gIXJlRnVuY05hbWUudGVzdChzb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWJpbmREYXRhKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgaWYgYGZ1bmNgIHJlZmVyZW5jZXMgdGhlIGB0aGlzYCBrZXl3b3JkIGFuZCBzdG9yZXMgdGhlIHJlc3VsdFxuICAgICAgICAgICAgYmluZERhdGEgPSByZVRoaXMudGVzdChzb3VyY2UpO1xuICAgICAgICAgICAgc2V0QmluZERhdGEoZnVuYywgYmluZERhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZXhpdCBlYXJseSBpZiB0aGVyZSBhcmUgbm8gYHRoaXNgIHJlZmVyZW5jZXMgb3IgYGZ1bmNgIGlzIGJvdW5kXG4gICAgICBpZiAoYmluZERhdGEgPT09IGZhbHNlIHx8IChiaW5kRGF0YSAhPT0gdHJ1ZSAmJiBiaW5kRGF0YVsxXSAmIDEpKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChhcmdDb3VudCkge1xuICAgICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhLCBiKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiaW5kKGZ1bmMsIHRoaXNBcmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBjcmVhdGVXcmFwcGVyYCB0aGF0IGNyZWF0ZXMgdGhlIHdyYXBwZXIgYW5kXG4gICAgICogc2V0cyBpdHMgbWV0YSBkYXRhLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBiaW5kRGF0YSBUaGUgYmluZCBkYXRhIGFycmF5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDcmVhdGVXcmFwcGVyKGJpbmREYXRhKSB7XG4gICAgICB2YXIgZnVuYyA9IGJpbmREYXRhWzBdLFxuICAgICAgICAgIGJpdG1hc2sgPSBiaW5kRGF0YVsxXSxcbiAgICAgICAgICBwYXJ0aWFsQXJncyA9IGJpbmREYXRhWzJdLFxuICAgICAgICAgIHBhcnRpYWxSaWdodEFyZ3MgPSBiaW5kRGF0YVszXSxcbiAgICAgICAgICB0aGlzQXJnID0gYmluZERhdGFbNF0sXG4gICAgICAgICAgYXJpdHkgPSBiaW5kRGF0YVs1XTtcblxuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiAxLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiAyLFxuICAgICAgICAgIGlzQ3VycnkgPSBiaXRtYXNrICYgNCxcbiAgICAgICAgICBpc0N1cnJ5Qm91bmQgPSBiaXRtYXNrICYgOCxcbiAgICAgICAgICBrZXkgPSBmdW5jO1xuXG4gICAgICBmdW5jdGlvbiBib3VuZCgpIHtcbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXM7XG4gICAgICAgIGlmIChwYXJ0aWFsQXJncykge1xuICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UocGFydGlhbEFyZ3MpO1xuICAgICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbFJpZ2h0QXJncyB8fCBpc0N1cnJ5KSB7XG4gICAgICAgICAgYXJncyB8fCAoYXJncyA9IHNsaWNlKGFyZ3VtZW50cykpO1xuICAgICAgICAgIGlmIChwYXJ0aWFsUmlnaHRBcmdzKSB7XG4gICAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIHBhcnRpYWxSaWdodEFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNDdXJyeSAmJiBhcmdzLmxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgICBiaXRtYXNrIHw9IDE2ICYgfjMyO1xuICAgICAgICAgICAgcmV0dXJuIGJhc2VDcmVhdGVXcmFwcGVyKFtmdW5jLCAoaXNDdXJyeUJvdW5kID8gYml0bWFzayA6IGJpdG1hc2sgJiB+MyksIGFyZ3MsIG51bGwsIHRoaXNBcmcsIGFyaXR5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFyZ3MgfHwgKGFyZ3MgPSBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoaXNCaW5kS2V5KSB7XG4gICAgICAgICAgZnVuYyA9IHRoaXNCaW5kaW5nW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShmdW5jLnByb3RvdHlwZSk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgc2V0QmluZERhdGEoYm91bmQsIGJpbmREYXRhKTtcbiAgICAgIHJldHVybiBib3VuZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kaWZmZXJlbmNlYCB0aGF0IGFjY2VwdHMgYSBzaW5nbGUgYXJyYXlcbiAgICAgKiBvZiB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIGFycmF5IG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgaXNMYXJnZSA9IGxlbmd0aCA+PSBsYXJnZUFycmF5U2l6ZSAmJiBpbmRleE9mID09PSBiYXNlSW5kZXhPZixcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgaWYgKGlzTGFyZ2UpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gY3JlYXRlQ2FjaGUodmFsdWVzKTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgaW5kZXhPZiA9IGNhY2hlSW5kZXhPZjtcbiAgICAgICAgICB2YWx1ZXMgPSBjYWNoZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0xhcmdlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGluZGV4T2YodmFsdWVzLCB2YWx1ZSkgPCAwKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNMYXJnZSkge1xuICAgICAgICByZWxlYXNlT2JqZWN0KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIG9yIGB0aGlzQXJnYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NoYWxsb3c9ZmFsc2VdIEEgZmxhZyB0byByZXN0cmljdCBmbGF0dGVuaW5nIHRvIGEgc2luZ2xlIGxldmVsLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0PWZhbHNlXSBBIGZsYWcgdG8gcmVzdHJpY3QgZmxhdHRlbmluZyB0byBhcnJheXMgYW5kIGBhcmd1bWVudHNgIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHN0YXJ0IGZyb20uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBpc1N0cmljdCwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgaW5kZXggPSAoZnJvbUluZGV4IHx8IDApIC0gMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT0gJ251bWJlcidcbiAgICAgICAgICAgICYmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgICAgLy8gcmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKVxuICAgICAgICAgIGlmICghaXNTaGFsbG93KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VGbGF0dGVuKHZhbHVlLCBpc1NoYWxsb3csIGlzU3RyaWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHZhbEluZGV4ID0gLTEsXG4gICAgICAgICAgICAgIHZhbExlbmd0aCA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgICAgICAgcmVzSW5kZXggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICAgICAgcmVzdWx0Lmxlbmd0aCArPSB2YWxMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsrdmFsSW5kZXggPCB2YWxMZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlW3ZhbEluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgLCB3aXRob3V0IHN1cHBvcnQgZm9yIGB0aGlzQXJnYCBiaW5kaW5nLFxuICAgICAqIHRoYXQgYWxsb3dzIHBhcnRpYWwgXCJfLndoZXJlXCIgc3R5bGUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gYSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IGIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2lzV2hlcmU9ZmFsc2VdIEEgZmxhZyB0byBpbmRpY2F0ZSBwZXJmb3JtaW5nIHBhcnRpYWwgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQT1bXV0gVHJhY2tzIHRyYXZlcnNlZCBgYWAgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tCPVtdXSBUcmFja3MgdHJhdmVyc2VkIGBiYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwoYSwgYiwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKSB7XG4gICAgICAvLyB1c2VkIHRvIGluZGljYXRlIHRoYXQgd2hlbiBjb21wYXJpbmcgb2JqZWN0cywgYGFgIGhhcyBhdCBsZWFzdCB0aGUgcHJvcGVydGllcyBvZiBgYmBcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soYSwgYik7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGZvciBpZGVudGljYWwgdmFsdWVzXG4gICAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICAvLyB0cmVhdCBgKzBgIHZzLiBgLTBgIGFzIG5vdCBlcXVhbFxuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAoMSAvIGEgPT0gMSAvIGIpO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgYSxcbiAgICAgICAgICBvdGhlclR5cGUgPSB0eXBlb2YgYjtcblxuICAgICAgLy8gZXhpdCBlYXJseSBmb3IgdW5saWtlIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAgIGlmIChhID09PSBhICYmXG4gICAgICAgICAgIShhICYmIG9iamVjdFR5cGVzW3R5cGVdKSAmJlxuICAgICAgICAgICEoYiAmJiBvYmplY3RUeXBlc1tvdGhlclR5cGVdKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBleGl0IGVhcmx5IGZvciBgbnVsbGAgYW5kIGB1bmRlZmluZWRgIGF2b2lkaW5nIEVTMydzIEZ1bmN0aW9uI2NhbGwgYmVoYXZpb3JcbiAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMy40LjRcbiAgICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgfVxuICAgICAgLy8gY29tcGFyZSBbW0NsYXNzXV0gbmFtZXNcbiAgICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpLFxuICAgICAgICAgIG90aGVyQ2xhc3MgPSB0b1N0cmluZy5jYWxsKGIpO1xuXG4gICAgICBpZiAoY2xhc3NOYW1lID09IGFyZ3NDbGFzcykge1xuICAgICAgICBjbGFzc05hbWUgPSBvYmplY3RDbGFzcztcbiAgICAgIH1cbiAgICAgIGlmIChvdGhlckNsYXNzID09IGFyZ3NDbGFzcykge1xuICAgICAgICBvdGhlckNsYXNzID0gb2JqZWN0Q2xhc3M7XG4gICAgICB9XG4gICAgICBpZiAoY2xhc3NOYW1lICE9IG90aGVyQ2xhc3MpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgICAgY2FzZSBib29sQ2xhc3M6XG4gICAgICAgIGNhc2UgZGF0ZUNsYXNzOlxuICAgICAgICAgIC8vIGNvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtYmVycywgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzIGFuZCBib29sZWFuc1xuICAgICAgICAgIC8vIHRvIGAxYCBvciBgMGAgdHJlYXRpbmcgaW52YWxpZCBkYXRlcyBjb2VyY2VkIHRvIGBOYU5gIGFzIG5vdCBlcXVhbFxuICAgICAgICAgIHJldHVybiArYSA9PSArYjtcblxuICAgICAgICBjYXNlIG51bWJlckNsYXNzOlxuICAgICAgICAgIC8vIHRyZWF0IGBOYU5gIHZzLiBgTmFOYCBhcyBlcXVhbFxuICAgICAgICAgIHJldHVybiAoYSAhPSArYSlcbiAgICAgICAgICAgID8gYiAhPSArYlxuICAgICAgICAgICAgLy8gYnV0IHRyZWF0IGArMGAgdnMuIGAtMGAgYXMgbm90IGVxdWFsXG4gICAgICAgICAgICA6IChhID09IDAgPyAoMSAvIGEgPT0gMSAvIGIpIDogYSA9PSArYik7XG5cbiAgICAgICAgY2FzZSByZWdleHBDbGFzczpcbiAgICAgICAgY2FzZSBzdHJpbmdDbGFzczpcbiAgICAgICAgICAvLyBjb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIChodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEwLjYuNClcbiAgICAgICAgICAvLyB0cmVhdCBzdHJpbmcgcHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3QgaW5zdGFuY2VzIGFzIGVxdWFsXG4gICAgICAgICAgcmV0dXJuIGEgPT0gU3RyaW5nKGIpO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gY2xhc3NOYW1lID09IGFycmF5Q2xhc3M7XG4gICAgICBpZiAoIWlzQXJyKSB7XG4gICAgICAgIC8vIHVud3JhcCBhbnkgYGxvZGFzaGAgd3JhcHBlZCB2YWx1ZXNcbiAgICAgICAgdmFyIGFXcmFwcGVkID0gaGFzT3duUHJvcGVydHkuY2FsbChhLCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIGJXcmFwcGVkID0gaGFzT3duUHJvcGVydHkuY2FsbChiLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAoYVdyYXBwZWQgfHwgYldyYXBwZWQpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUlzRXF1YWwoYVdyYXBwZWQgPyBhLl9fd3JhcHBlZF9fIDogYSwgYldyYXBwZWQgPyBiLl9fd3JhcHBlZF9fIDogYiwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBleGl0IGZvciBmdW5jdGlvbnMgYW5kIERPTSBub2Rlc1xuICAgICAgICBpZiAoY2xhc3NOYW1lICE9IG9iamVjdENsYXNzIHx8ICghc3VwcG9ydC5ub2RlQ2xhc3MgJiYgKGlzTm9kZShhKSB8fCBpc05vZGUoYikpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiBvbGRlciB2ZXJzaW9ucyBvZiBPcGVyYSwgYGFyZ3VtZW50c2Agb2JqZWN0cyBoYXZlIGBBcnJheWAgY29uc3RydWN0b3JzXG4gICAgICAgIHZhciBjdG9yQSA9ICFzdXBwb3J0LmFyZ3NPYmplY3QgJiYgaXNBcmd1bWVudHMoYSkgPyBPYmplY3QgOiBhLmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgY3RvckIgPSAhc3VwcG9ydC5hcmdzT2JqZWN0ICYmIGlzQXJndW1lbnRzKGIpID8gT2JqZWN0IDogYi5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBub24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbFxuICAgICAgICBpZiAoY3RvckEgIT0gY3RvckIgJiZcbiAgICAgICAgICAgICAgIShpc0Z1bmN0aW9uKGN0b3JBKSAmJiBjdG9yQSBpbnN0YW5jZW9mIGN0b3JBICYmIGlzRnVuY3Rpb24oY3RvckIpICYmIGN0b3JCIGluc3RhbmNlb2YgY3RvckIpICYmXG4gICAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBhc3N1bWUgY3ljbGljIHN0cnVjdHVyZXMgYXJlIGVxdWFsXG4gICAgICAvLyB0aGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMVxuICAgICAgLy8gc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYCAoaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS4xMi4zKVxuICAgICAgdmFyIGluaXRlZFN0YWNrID0gIXN0YWNrQTtcbiAgICAgIHN0YWNrQSB8fCAoc3RhY2tBID0gZ2V0QXJyYXkoKSk7XG4gICAgICBzdGFja0IgfHwgKHN0YWNrQiA9IGdldEFycmF5KCkpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RhY2tBLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gYSkge1xuICAgICAgICAgIHJldHVybiBzdGFja0JbbGVuZ3RoXSA9PSBiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc2l6ZSA9IDA7XG4gICAgICByZXN1bHQgPSB0cnVlO1xuXG4gICAgICAvLyBhZGQgYGFgIGFuZCBgYmAgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzXG4gICAgICBzdGFja0EucHVzaChhKTtcbiAgICAgIHN0YWNrQi5wdXNoKGIpO1xuXG4gICAgICAvLyByZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpXG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgLy8gY29tcGFyZSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnlcbiAgICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICAgIHNpemUgPSBiLmxlbmd0aDtcbiAgICAgICAgcmVzdWx0ID0gc2l6ZSA9PSBsZW5ndGg7XG5cbiAgICAgICAgaWYgKHJlc3VsdCB8fCBpc1doZXJlKSB7XG4gICAgICAgICAgLy8gZGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllc1xuICAgICAgICAgIHdoaWxlIChzaXplLS0pIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGJbc2l6ZV07XG5cbiAgICAgICAgICAgIGlmIChpc1doZXJlKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKChyZXN1bHQgPSBiYXNlSXNFcXVhbChhW2luZGV4XSwgdmFsdWUsIGNhbGxiYWNrLCBpc1doZXJlLCBzdGFja0EsIHN0YWNrQikpKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIShyZXN1bHQgPSBiYXNlSXNFcXVhbChhW3NpemVdLCB2YWx1ZSwgY2FsbGJhY2ssIGlzV2hlcmUsIHN0YWNrQSwgc3RhY2tCKSkpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gZGVlcCBjb21wYXJlIG9iamVjdHMgdXNpbmcgYGZvckluYCwgaW5zdGVhZCBvZiBgZm9yT3duYCwgdG8gYXZvaWQgYE9iamVjdC5rZXlzYFxuICAgICAgICAvLyB3aGljaCwgaW4gdGhpcyBjYXNlLCBpcyBtb3JlIGNvc3RseVxuICAgICAgICBmb3JJbihiLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBiKSB7XG4gICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYiwga2V5KSkge1xuICAgICAgICAgICAgLy8gY291bnQgdGhlIG51bWJlciBvZiBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgICAgLy8gZGVlcCBjb21wYXJlIGVhY2ggcHJvcGVydHkgdmFsdWUuXG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9IGhhc093blByb3BlcnR5LmNhbGwoYSwga2V5KSAmJiBiYXNlSXNFcXVhbChhW2tleV0sIHZhbHVlLCBjYWxsYmFjaywgaXNXaGVyZSwgc3RhY2tBLCBzdGFja0IpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXN1bHQgJiYgIWlzV2hlcmUpIHtcbiAgICAgICAgICAvLyBlbnN1cmUgYm90aCBvYmplY3RzIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXNcbiAgICAgICAgICBmb3JJbihhLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBhKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpKSB7XG4gICAgICAgICAgICAgIC8vIGBzaXplYCB3aWxsIGJlIGAtMWAgaWYgYGFgIGhhcyBtb3JlIHByb3BlcnRpZXMgdGhhbiBgYmBcbiAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQgPSAtLXNpemUgPiAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrQS5wb3AoKTtcbiAgICAgIHN0YWNrQi5wb3AoKTtcblxuICAgICAgaWYgKGluaXRlZFN0YWNrKSB7XG4gICAgICAgIHJlbGVhc2VBcnJheShzdGFja0EpO1xuICAgICAgICByZWxlYXNlQXJyYXkoc3RhY2tCKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgYXJndW1lbnQganVnZ2xpbmcgb3Igc3VwcG9ydFxuICAgICAqIGZvciBgdGhpc0FyZ2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdpbmcgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIEFzc29jaWF0ZXMgdmFsdWVzIHdpdGggc291cmNlIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIGNhbGxiYWNrLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgKGlzQXJyYXkoc291cmNlKSA/IGZvckVhY2ggOiBmb3JPd24pKHNvdXJjZSwgZnVuY3Rpb24oc291cmNlLCBrZXkpIHtcbiAgICAgICAgdmFyIGZvdW5kLFxuICAgICAgICAgICAgaXNBcnIsXG4gICAgICAgICAgICByZXN1bHQgPSBzb3VyY2UsXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmIChzb3VyY2UgJiYgKChpc0FyciA9IGlzQXJyYXkoc291cmNlKSkgfHwgaXNQbGFpbk9iamVjdChzb3VyY2UpKSkge1xuICAgICAgICAgIC8vIGF2b2lkIG1lcmdpbmcgcHJldmlvdXNseSBtZXJnZWQgY3ljbGljIHNvdXJjZXNcbiAgICAgICAgICB2YXIgc3RhY2tMZW5ndGggPSBzdGFja0EubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzdGFja0xlbmd0aC0tKSB7XG4gICAgICAgICAgICBpZiAoKGZvdW5kID0gc3RhY2tBW3N0YWNrTGVuZ3RoXSA9PSBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gc3RhY2tCW3N0YWNrTGVuZ3RoXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgIHZhciBpc1NoYWxsb3c7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2sodmFsdWUsIHNvdXJjZSk7XG4gICAgICAgICAgICAgIGlmICgoaXNTaGFsbG93ID0gdHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1NoYWxsb3cpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBpc0FyclxuICAgICAgICAgICAgICAgID8gKGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSlcbiAgICAgICAgICAgICAgICA6IChpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDoge30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWRkIGBzb3VyY2VgIGFuZCBhc3NvY2lhdGVkIGB2YWx1ZWAgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzXG4gICAgICAgICAgICBzdGFja0EucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgc3RhY2tCLnB1c2godmFsdWUpO1xuXG4gICAgICAgICAgICAvLyByZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKVxuICAgICAgICAgICAgaWYgKCFpc1NoYWxsb3cpIHtcbiAgICAgICAgICAgICAgYmFzZU1lcmdlKHZhbHVlLCBzb3VyY2UsIGNhbGxiYWNrLCBzdGFja0EsIHN0YWNrQik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2sodmFsdWUsIHNvdXJjZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICByZXN1bHQgPSBzb3VyY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBhcmd1bWVudCBqdWdnbGluZyBvciBzdXBwb3J0XG4gICAgICogZm9yIHJldHVybmluZyBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBtaW5pbXVtIHBvc3NpYmxlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIG1heGltdW0gcG9zc2libGUgdmFsdWUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIG1pbiArIGZsb29yKG5hdGl2ZVJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrIHNob3J0aGFuZHNcbiAgICAgKiBvciBgdGhpc0FyZ2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTb3J0ZWQ9ZmFsc2VdIEEgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IGBhcnJheWAgaXMgc29ydGVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB2YXIgaXNMYXJnZSA9ICFpc1NvcnRlZCAmJiBsZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiYgaW5kZXhPZiA9PT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgc2VlbiA9IChjYWxsYmFjayB8fCBpc0xhcmdlKSA/IGdldEFycmF5KCkgOiByZXN1bHQ7XG5cbiAgICAgIGlmIChpc0xhcmdlKSB7XG4gICAgICAgIHZhciBjYWNoZSA9IGNyZWF0ZUNhY2hlKHNlZW4pO1xuICAgICAgICBpbmRleE9mID0gY2FjaGVJbmRleE9mO1xuICAgICAgICBzZWVuID0gY2FjaGU7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGNhbGxiYWNrID8gY2FsbGJhY2sodmFsdWUsIGluZGV4LCBhcnJheSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoaXNTb3J0ZWRcbiAgICAgICAgICAgICAgPyAhaW5kZXggfHwgc2VlbltzZWVuLmxlbmd0aCAtIDFdICE9PSBjb21wdXRlZFxuICAgICAgICAgICAgICA6IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQpIDwgMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrIHx8IGlzTGFyZ2UpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzTGFyZ2UpIHtcbiAgICAgICAgcmVsZWFzZUFycmF5KHNlZW4uYXJyYXkpO1xuICAgICAgICByZWxlYXNlT2JqZWN0KHNlZW4pO1xuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICByZWxlYXNlQXJyYXkoc2Vlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYSBjb2xsZWN0aW9uLCBjcmVhdGluZyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uXG4gICAgICogdGhyb3VnaCBhIGNhbGxiYWNrLiBUaGUgZ2l2ZW4gYHNldHRlcmAgZnVuY3Rpb24gc2V0cyB0aGUga2V5cyBhbmQgdmFsdWVzXG4gICAgICogb2YgdGhlIGNvbXBvc2VkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBzZXR0ZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgICAgc2V0dGVyKHJlc3VsdCwgdmFsdWUsIGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICBzZXR0ZXIocmVzdWx0LCB2YWx1ZSwgY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbiksIGNvbGxlY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2BcbiAgICAgKiB3aXRoIGFuIG9wdGlvbmFsIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgb2YgbWV0aG9kIGZsYWdzIHRvIGNvbXBvc2UuXG4gICAgICogIFRoZSBiaXRtYXNrIG1heSBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOlxuICAgICAqICAxIC0gYF8uYmluZGBcbiAgICAgKiAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogIDQgLSBgXy5jdXJyeWBcbiAgICAgKiAgOCAtIGBfLmN1cnJ5YCAoYm91bmQpXG4gICAgICogIDE2IC0gYF8ucGFydGlhbGBcbiAgICAgKiAgMzIgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxBcmdzXSBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZVxuICAgICAqICBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsUmlnaHRBcmdzXSBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlXG4gICAgICogIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIoZnVuYywgYml0bWFzaywgcGFydGlhbEFyZ3MsIHBhcnRpYWxSaWdodEFyZ3MsIHRoaXNBcmcsIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIDEsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIDIsXG4gICAgICAgICAgaXNDdXJyeSA9IGJpdG1hc2sgJiA0LFxuICAgICAgICAgIGlzQ3VycnlCb3VuZCA9IGJpdG1hc2sgJiA4LFxuICAgICAgICAgIGlzUGFydGlhbCA9IGJpdG1hc2sgJiAxNixcbiAgICAgICAgICBpc1BhcnRpYWxSaWdodCA9IGJpdG1hc2sgJiAzMjtcblxuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BhcnRpYWwgJiYgIXBhcnRpYWxBcmdzLmxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4xNjtcbiAgICAgICAgaXNQYXJ0aWFsID0gcGFydGlhbEFyZ3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BhcnRpYWxSaWdodCAmJiAhcGFydGlhbFJpZ2h0QXJncy5sZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+MzI7XG4gICAgICAgIGlzUGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0QXJncyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGJpbmREYXRhID0gZnVuYyAmJiBmdW5jLl9fYmluZERhdGFfXztcbiAgICAgIGlmIChiaW5kRGF0YSAmJiBiaW5kRGF0YSAhPT0gdHJ1ZSkge1xuICAgICAgICAvLyBjbG9uZSBgYmluZERhdGFgXG4gICAgICAgIGJpbmREYXRhID0gc2xpY2UoYmluZERhdGEpO1xuICAgICAgICBpZiAoYmluZERhdGFbMl0pIHtcbiAgICAgICAgICBiaW5kRGF0YVsyXSA9IHNsaWNlKGJpbmREYXRhWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmluZERhdGFbM10pIHtcbiAgICAgICAgICBiaW5kRGF0YVszXSA9IHNsaWNlKGJpbmREYXRhWzNdKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgYHRoaXNCaW5kaW5nYCBpcyBub3QgcHJldmlvdXNseSBib3VuZFxuICAgICAgICBpZiAoaXNCaW5kICYmICEoYmluZERhdGFbMV0gJiAxKSkge1xuICAgICAgICAgIGJpbmREYXRhWzRdID0gdGhpc0FyZztcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgaWYgcHJldmlvdXNseSBib3VuZCBidXQgbm90IGN1cnJlbnRseSAoc3Vic2VxdWVudCBjdXJyaWVkIGZ1bmN0aW9ucylcbiAgICAgICAgaWYgKCFpc0JpbmQgJiYgYmluZERhdGFbMV0gJiAxKSB7XG4gICAgICAgICAgYml0bWFzayB8PSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vIHNldCBjdXJyaWVkIGFyaXR5IGlmIG5vdCB5ZXQgc2V0XG4gICAgICAgIGlmIChpc0N1cnJ5ICYmICEoYmluZERhdGFbMV0gJiA0KSkge1xuICAgICAgICAgIGJpbmREYXRhWzVdID0gYXJpdHk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIHBhcnRpYWwgbGVmdCBhcmd1bWVudHNcbiAgICAgICAgaWYgKGlzUGFydGlhbCkge1xuICAgICAgICAgIHB1c2guYXBwbHkoYmluZERhdGFbMl0gfHwgKGJpbmREYXRhWzJdID0gW10pLCBwYXJ0aWFsQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzXG4gICAgICAgIGlmIChpc1BhcnRpYWxSaWdodCkge1xuICAgICAgICAgIHVuc2hpZnQuYXBwbHkoYmluZERhdGFbM10gfHwgKGJpbmREYXRhWzNdID0gW10pLCBwYXJ0aWFsUmlnaHRBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBmbGFnc1xuICAgICAgICBiaW5kRGF0YVsxXSB8PSBiaXRtYXNrO1xuICAgICAgICByZXR1cm4gY3JlYXRlV3JhcHBlci5hcHBseShudWxsLCBiaW5kRGF0YSk7XG4gICAgICB9XG4gICAgICAvLyBmYXN0IHBhdGggZm9yIGBfLmJpbmRgXG4gICAgICB2YXIgY3JlYXRlciA9IChiaXRtYXNrID09IDEgfHwgYml0bWFzayA9PT0gMTcpID8gYmFzZUJpbmQgOiBiYXNlQ3JlYXRlV3JhcHBlcjtcbiAgICAgIHJldHVybiBjcmVhdGVyKFtmdW5jLCBiaXRtYXNrLCBwYXJ0aWFsQXJncywgcGFydGlhbFJpZ2h0QXJncywgdGhpc0FyZywgYXJpdHldKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGNvbXBpbGVkIGl0ZXJhdGlvbiBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbb3B0aW9uc10gVGhlIGNvbXBpbGUgb3B0aW9ucyBvYmplY3QocykuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFycmF5XSBDb2RlIHRvIGRldGVybWluZSBpZiB0aGUgaXRlcmFibGUgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZUhhc10gU3BlY2lmeSB1c2luZyBgaGFzT3duUHJvcGVydHlgIGNoZWNrcyBpbiB0aGUgb2JqZWN0IGxvb3AuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMua2V5c10gQSByZWZlcmVuY2UgdG8gYF8ua2V5c2AgZm9yIHVzZSBpbiBvd24gcHJvcGVydHkgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hcmdzXSBBIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcgb2YgaXRlcmF0aW9uIGZ1bmN0aW9uIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudG9wXSBDb2RlIHRvIGV4ZWN1dGUgYmVmb3JlIHRoZSBpdGVyYXRpb24gYnJhbmNoZXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvb3BdIENvZGUgdG8gZXhlY3V0ZSBpbiB0aGUgb2JqZWN0IGxvb3AuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJvdHRvbV0gQ29kZSB0byBleGVjdXRlIGFmdGVyIHRoZSBpdGVyYXRpb24gYnJhbmNoZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJdGVyYXRvcigpIHtcbiAgICAgIC8vIGRhdGEgcHJvcGVydGllc1xuICAgICAgaXRlcmF0b3JEYXRhLnNoYWRvd2VkUHJvcHMgPSBzaGFkb3dlZFByb3BzO1xuXG4gICAgICAvLyBpdGVyYXRvciBvcHRpb25zXG4gICAgICBpdGVyYXRvckRhdGEuYXJyYXkgPSBpdGVyYXRvckRhdGEuYm90dG9tID0gaXRlcmF0b3JEYXRhLmxvb3AgPSBpdGVyYXRvckRhdGEudG9wID0gJyc7XG4gICAgICBpdGVyYXRvckRhdGEuaW5pdCA9ICdpdGVyYWJsZSc7XG4gICAgICBpdGVyYXRvckRhdGEudXNlSGFzID0gdHJ1ZTtcblxuICAgICAgLy8gbWVyZ2Ugb3B0aW9ucyBpbnRvIGEgdGVtcGxhdGUgZGF0YSBvYmplY3RcbiAgICAgIGZvciAodmFyIG9iamVjdCwgaW5kZXggPSAwOyBvYmplY3QgPSBhcmd1bWVudHNbaW5kZXhdOyBpbmRleCsrKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBpdGVyYXRvckRhdGFba2V5XSA9IG9iamVjdFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IGl0ZXJhdG9yRGF0YS5hcmdzO1xuICAgICAgaXRlcmF0b3JEYXRhLmZpcnN0QXJnID0gL15bXixdKy8uZXhlYyhhcmdzKVswXTtcblxuICAgICAgLy8gY3JlYXRlIHRoZSBmdW5jdGlvbiBmYWN0b3J5XG4gICAgICB2YXIgZmFjdG9yeSA9IEZ1bmN0aW9uKFxuICAgICAgICAgICdiYXNlQ3JlYXRlQ2FsbGJhY2ssIGVycm9yQ2xhc3MsIGVycm9yUHJvdG8sIGhhc093blByb3BlcnR5LCAnICtcbiAgICAgICAgICAnaW5kaWNhdG9yT2JqZWN0LCBpc0FyZ3VtZW50cywgaXNBcnJheSwgaXNTdHJpbmcsIGtleXMsIG9iamVjdFByb3RvLCAnICtcbiAgICAgICAgICAnb2JqZWN0VHlwZXMsIG5vbkVudW1Qcm9wcywgc3RyaW5nQ2xhc3MsIHN0cmluZ1Byb3RvLCB0b1N0cmluZycsXG4gICAgICAgICdyZXR1cm4gZnVuY3Rpb24oJyArIGFyZ3MgKyAnKSB7XFxuJyArIGl0ZXJhdG9yVGVtcGxhdGUoaXRlcmF0b3JEYXRhKSArICdcXG59J1xuICAgICAgKTtcblxuICAgICAgLy8gcmV0dXJuIHRoZSBjb21waWxlZCBmdW5jdGlvblxuICAgICAgcmV0dXJuIGZhY3RvcnkoXG4gICAgICAgIGJhc2VDcmVhdGVDYWxsYmFjaywgZXJyb3JDbGFzcywgZXJyb3JQcm90bywgaGFzT3duUHJvcGVydHksXG4gICAgICAgIGluZGljYXRvck9iamVjdCwgaXNBcmd1bWVudHMsIGlzQXJyYXksIGlzU3RyaW5nLCBpdGVyYXRvckRhdGEua2V5cywgb2JqZWN0UHJvdG8sXG4gICAgICAgIG9iamVjdFR5cGVzLCBub25FbnVtUHJvcHMsIHN0cmluZ0NsYXNzLCBzdHJpbmdQcm90bywgdG9TdHJpbmdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlSHRtbENoYXIobWF0Y2gpIHtcbiAgICAgIHJldHVybiBodG1sRXNjYXBlc1ttYXRjaF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpbmRleE9mXCIgZnVuY3Rpb24uIElmIHRoZSBgXy5pbmRleE9mYCBtZXRob2QgaXNcbiAgICAgKiBjdXN0b21pemVkLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJuc1xuICAgICAqIHRoZSBgYmFzZUluZGV4T2ZgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIFwiaW5kZXhPZlwiIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4T2YoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKHJlc3VsdCA9IGxvZGFzaC5pbmRleE9mKSA9PT0gaW5kZXhPZiA/IGJhc2VJbmRleE9mIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyAmJiByZU5hdGl2ZS50ZXN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGB0aGlzYCBiaW5kaW5nIGRhdGEgb24gYSBnaXZlbiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc2V0IGRhdGEgb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWUgVGhlIGRhdGEgYXJyYXkgdG8gc2V0LlxuICAgICAqL1xuICAgIHZhciBzZXRCaW5kRGF0YSA9ICFkZWZpbmVQcm9wZXJ0eSA/IG5vb3AgOiBmdW5jdGlvbihmdW5jLCB2YWx1ZSkge1xuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgICAgZGVmaW5lUHJvcGVydHkoZnVuYywgJ19fYmluZERhdGFfXycsIGRlc2NyaXB0b3IpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIG9mIGBpc1BsYWluT2JqZWN0YCB3aGljaCBjaGVja3MgaWYgYSBnaXZlbiB2YWx1ZVxuICAgICAqIGlzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3RvciwgYXNzdW1pbmcgb2JqZWN0cyBjcmVhdGVkXG4gICAgICogYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yIGhhdmUgbm8gaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBhbmQgdGhhdFxuICAgICAqIHRoZXJlIGFyZSBubyBgT2JqZWN0LnByb3RvdHlwZWAgZXh0ZW5zaW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGltSXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIGN0b3IsXG4gICAgICAgICAgcmVzdWx0O1xuXG4gICAgICAvLyBhdm9pZCBub24gT2JqZWN0IG9iamVjdHMsIGBhcmd1bWVudHNgIG9iamVjdHMsIGFuZCBET00gZWxlbWVudHNcbiAgICAgIGlmICghKHZhbHVlICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG9iamVjdENsYXNzKSB8fFxuICAgICAgICAgIChjdG9yID0gdmFsdWUuY29uc3RydWN0b3IsIGlzRnVuY3Rpb24oY3RvcikgJiYgIShjdG9yIGluc3RhbmNlb2YgY3RvcikpIHx8XG4gICAgICAgICAgKCFzdXBwb3J0LmFyZ3NDbGFzcyAmJiBpc0FyZ3VtZW50cyh2YWx1ZSkpIHx8XG4gICAgICAgICAgKCFzdXBwb3J0Lm5vZGVDbGFzcyAmJiBpc05vZGUodmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBJRSA8IDkgaXRlcmF0ZXMgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLiBJZiB0aGUgZmlyc3RcbiAgICAgIC8vIGl0ZXJhdGVkIHByb3BlcnR5IGlzIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0eSB0aGVuIHRoZXJlIGFyZSBubyBpbmhlcml0ZWRcbiAgICAgIC8vIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgIGlmIChzdXBwb3J0Lm93bkxhc3QpIHtcbiAgICAgICAgZm9ySW4odmFsdWUsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICAgIHJlc3VsdCA9IGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gSW4gbW9zdCBlbnZpcm9ubWVudHMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGJlZm9yZVxuICAgICAgLy8gaXRzIGluaGVyaXRlZCBwcm9wZXJ0aWVzLiBJZiB0aGUgbGFzdCBpdGVyYXRlZCBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qnc1xuICAgICAgLy8gb3duIHByb3BlcnR5IHRoZW4gdGhlcmUgYXJlIG5vIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICBmb3JJbih2YWx1ZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgdW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGVIdG1sQ2hhcihtYXRjaCkge1xuICAgICAgcmV0dXJuIGh0bWxVbmVzY2FwZXNbbWF0Y2hdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8uaXNBcmd1bWVudHMoYXJndW1lbnRzKTsgfSkoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBicm93c2VycyB0aGF0IGNhbid0IGRldGVjdCBgYXJndW1lbnRzYCBvYmplY3RzIGJ5IFtbQ2xhc3NdXVxuICAgIGlmICghc3VwcG9ydC5hcmdzQ2xhc3MpIHtcbiAgICAgIGlzQXJndW1lbnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09ICdudW1iZXInICYmXG4gICAgICAgICAgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgZmFsc2U7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAoZnVuY3Rpb24oKSB7IHJldHVybiBfLmlzQXJyYXkoYXJndW1lbnRzKTsgfSkoKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09ICdudW1iZXInICYmXG4gICAgICAgIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFycmF5Q2xhc3MgfHwgZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24gb2YgYE9iamVjdC5rZXlzYCB3aGljaCBwcm9kdWNlcyBhbiBhcnJheSBvZiB0aGVcbiAgICAgKiBnaXZlbiBvYmplY3QncyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgdmFyIHNoaW1LZXlzID0gY3JlYXRlSXRlcmF0b3Ioe1xuICAgICAgJ2FyZ3MnOiAnb2JqZWN0JyxcbiAgICAgICdpbml0JzogJ1tdJyxcbiAgICAgICd0b3AnOiAnaWYgKCEob2JqZWN0VHlwZXNbdHlwZW9mIG9iamVjdF0pKSByZXR1cm4gcmVzdWx0JyxcbiAgICAgICdsb29wJzogJ3Jlc3VsdC5wdXNoKGluZGV4KSdcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtleXMoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7XG4gICAgICogLy8gPT4gWydvbmUnLCAndHdvJywgJ3RocmVlJ10gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICovXG4gICAgdmFyIGtleXMgPSAhbmF0aXZlS2V5cyA/IHNoaW1LZXlzIDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKChzdXBwb3J0LmVudW1Qcm90b3R5cGVzICYmIHR5cGVvZiBvYmplY3QgPT0gJ2Z1bmN0aW9uJykgfHxcbiAgICAgICAgICAoc3VwcG9ydC5ub25FbnVtQXJncyAmJiBvYmplY3QubGVuZ3RoICYmIGlzQXJndW1lbnRzKG9iamVjdCkpKSB7XG4gICAgICAgIHJldHVybiBzaGltS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICB9O1xuXG4gICAgLyoqIFJldXNhYmxlIGl0ZXJhdG9yIG9wdGlvbnMgc2hhcmVkIGJ5IGBlYWNoYCwgYGZvckluYCwgYW5kIGBmb3JPd25gICovXG4gICAgdmFyIGVhY2hJdGVyYXRvck9wdGlvbnMgPSB7XG4gICAgICAnYXJncyc6ICdjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZycsXG4gICAgICAndG9wJzogXCJjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpXCIsXG4gICAgICAnYXJyYXknOiBcInR5cGVvZiBsZW5ndGggPT0gJ251bWJlcidcIixcbiAgICAgICdrZXlzJzoga2V5cyxcbiAgICAgICdsb29wJzogJ2lmIChjYWxsYmFjayhpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHJldHVybiByZXN1bHQnXG4gICAgfTtcblxuICAgIC8qKiBSZXVzYWJsZSBpdGVyYXRvciBvcHRpb25zIGZvciBgYXNzaWduYCBhbmQgYGRlZmF1bHRzYCAqL1xuICAgIHZhciBkZWZhdWx0c0l0ZXJhdG9yT3B0aW9ucyA9IHtcbiAgICAgICdhcmdzJzogJ29iamVjdCwgc291cmNlLCBndWFyZCcsXG4gICAgICAndG9wJzpcbiAgICAgICAgJ3ZhciBhcmdzID0gYXJndW1lbnRzLFxcbicgK1xuICAgICAgICAnICAgIGFyZ3NJbmRleCA9IDAsXFxuJyArXG4gICAgICAgIFwiICAgIGFyZ3NMZW5ndGggPSB0eXBlb2YgZ3VhcmQgPT0gJ251bWJlcicgPyAyIDogYXJncy5sZW5ndGg7XFxuXCIgK1xuICAgICAgICAnd2hpbGUgKCsrYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xcbicgK1xuICAgICAgICAnICBpdGVyYWJsZSA9IGFyZ3NbYXJnc0luZGV4XTtcXG4nICtcbiAgICAgICAgJyAgaWYgKGl0ZXJhYmxlICYmIG9iamVjdFR5cGVzW3R5cGVvZiBpdGVyYWJsZV0pIHsnLFxuICAgICAgJ2tleXMnOiBrZXlzLFxuICAgICAgJ2xvb3AnOiBcImlmICh0eXBlb2YgcmVzdWx0W2luZGV4XSA9PSAndW5kZWZpbmVkJykgcmVzdWx0W2luZGV4XSA9IGl0ZXJhYmxlW2luZGV4XVwiLFxuICAgICAgJ2JvdHRvbSc6ICcgIH1cXG59J1xuICAgIH07XG5cbiAgICAvKiogUmV1c2FibGUgaXRlcmF0b3Igb3B0aW9ucyBmb3IgYGZvckluYCBhbmQgYGZvck93bmAgKi9cbiAgICB2YXIgZm9yT3duSXRlcmF0b3JPcHRpb25zID0ge1xuICAgICAgJ3RvcCc6ICdpZiAoIW9iamVjdFR5cGVzW3R5cGVvZiBpdGVyYWJsZV0pIHJldHVybiByZXN1bHQ7XFxuJyArIGVhY2hJdGVyYXRvck9wdGlvbnMudG9wLFxuICAgICAgJ2FycmF5JzogZmFsc2VcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllczpcbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgYD5gIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlIGA+YCBhbmQgYC9gXG4gICAgICogZG9uJ3QgcmVxdWlyZSBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZyB1bmxlc3MgdGhleSdyZSBwYXJ0XG4gICAgICogb2YgYSB0YWcgb3IgYW4gdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLlxuICAgICAqIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKVxuICAgICAqL1xuICAgIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAgICcmJzogJyZhbXA7JyxcbiAgICAgICc8JzogJyZsdDsnLFxuICAgICAgJz4nOiAnJmd0OycsXG4gICAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAgIFwiJ1wiOiAnJiMzOTsnXG4gICAgfTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzICovXG4gICAgdmFyIGh0bWxVbmVzY2FwZXMgPSBpbnZlcnQoaHRtbEVzY2FwZXMpO1xuXG4gICAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzICovXG4gICAgdmFyIHJlRXNjYXBlZEh0bWwgPSBSZWdFeHAoJygnICsga2V5cyhodG1sVW5lc2NhcGVzKS5qb2luKCd8JykgKyAnKScsICdnJyksXG4gICAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cCgnWycgKyBrZXlzKGh0bWxFc2NhcGVzKS5qb2luKCcnKSArICddJywgJ2cnKTtcblxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gY29tcGlsZWQgdG8gaXRlcmF0ZSBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIG9iamVjdHMsIGFuZFxuICAgICAqIHN0cmluZ3MgY29uc2lzdGVubHkgYWNyb3NzIGVudmlyb25tZW50cywgZXhlY3V0aW5nIHRoZSBjYWxsYmFjayBmb3IgZWFjaFxuICAgICAqIGVsZW1lbnQgaW4gdGhlIGNvbGxlY3Rpb24uIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLiBDYWxsYmFja3MgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVJdGVyYXRvcihlYWNoSXRlcmF0b3JPcHRpb25zKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3QocykgdG8gdGhlIGRlc3RpbmF0aW9uXG4gICAgICogb2JqZWN0LiBTdWJzZXF1ZW50IHNvdXJjZXMgd2lsbCBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXNcbiAgICAgKiBzb3VyY2VzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiBhc3NpZ25lZCB2YWx1ZXMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM7IChvYmplY3RWYWx1ZSwgc291cmNlVmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ25hbWUnOiAnZnJlZCcgfSwgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcsICdlbXBsb3llcic6ICdzbGF0ZScgfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ24sIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgKiAgIHJldHVybiB0eXBlb2YgYSA9PSAndW5kZWZpbmVkJyA/IGIgOiBhO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ25hbWUnOiAnYmFybmV5JyB9O1xuICAgICAqIGRlZmF1bHRzKG9iamVjdCwgeyAnbmFtZSc6ICdmcmVkJywgJ2VtcGxveWVyJzogJ3NsYXRlJyB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdlbXBsb3llcic6ICdzbGF0ZScgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVJdGVyYXRvcihkZWZhdWx0c0l0ZXJhdG9yT3B0aW9ucywge1xuICAgICAgJ3RvcCc6XG4gICAgICAgIGRlZmF1bHRzSXRlcmF0b3JPcHRpb25zLnRvcC5yZXBsYWNlKCc7JyxcbiAgICAgICAgICAnO1xcbicgK1xuICAgICAgICAgIFwiaWYgKGFyZ3NMZW5ndGggPiAzICYmIHR5cGVvZiBhcmdzW2FyZ3NMZW5ndGggLSAyXSA9PSAnZnVuY3Rpb24nKSB7XFxuXCIgK1xuICAgICAgICAgICcgIHZhciBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhhcmdzWy0tYXJnc0xlbmd0aCAtIDFdLCBhcmdzW2FyZ3NMZW5ndGgtLV0sIDIpO1xcbicgK1xuICAgICAgICAgIFwifSBlbHNlIGlmIChhcmdzTGVuZ3RoID4gMiAmJiB0eXBlb2YgYXJnc1thcmdzTGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykge1xcblwiICtcbiAgICAgICAgICAnICBjYWxsYmFjayA9IGFyZ3NbLS1hcmdzTGVuZ3RoXTtcXG4nICtcbiAgICAgICAgICAnfSdcbiAgICAgICAgKSxcbiAgICAgICdsb29wJzogJ3Jlc3VsdFtpbmRleF0gPSBjYWxsYmFjayA/IGNhbGxiYWNrKHJlc3VsdFtpbmRleF0sIGl0ZXJhYmxlW2luZGV4XSkgOiBpdGVyYWJsZVtpbmRleF0nXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHZhbHVlYC4gSWYgYGlzRGVlcGAgaXMgYHRydWVgIG5lc3RlZCBvYmplY3RzIHdpbGwgYWxzb1xuICAgICAqIGJlIGNsb25lZCwgb3RoZXJ3aXNlIHRoZXkgd2lsbCBiZSBhc3NpZ25lZCBieSByZWZlcmVuY2UuIElmIGEgY2FsbGJhY2tcbiAgICAgKiBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZXMuIElmIHRoZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHVuZGVmaW5lZGAgY2xvbmluZyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcD1mYWxzZV0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKGNoYXJhY3RlcnMpO1xuICAgICAqIHNoYWxsb3dbMF0gPT09IGNoYXJhY3RlcnNbMF07XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lKGNoYXJhY3RlcnMsIHRydWUpO1xuICAgICAqIGRlZXBbMF0gPT09IGNoYXJhY3RlcnNbMF07XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubWl4aW4oe1xuICAgICAqICAgJ2Nsb25lJzogXy5wYXJ0aWFsUmlnaHQoXy5jbG9uZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgcmV0dXJuIF8uaXNFbGVtZW50KHZhbHVlKSA/IHZhbHVlLmNsb25lTm9kZShmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICogICB9KVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNsb25lID0gXy5jbG9uZShkb2N1bWVudC5ib2R5KTtcbiAgICAgKiBjbG9uZS5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUsIGlzRGVlcCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIC8vIGFsbG93cyB3b3JraW5nIHdpdGggXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMgd2l0aG91dCB1c2luZyB0aGVpciBgaW5kZXhgXG4gICAgICAvLyBhbmQgYGNvbGxlY3Rpb25gIGFyZ3VtZW50cyBmb3IgYGlzRGVlcGAgYW5kIGBjYWxsYmFja2BcbiAgICAgIGlmICh0eXBlb2YgaXNEZWVwICE9ICdib29sZWFuJyAmJiBpc0RlZXAgIT0gbnVsbCkge1xuICAgICAgICB0aGlzQXJnID0gY2FsbGJhY2s7XG4gICAgICAgIGNhbGxiYWNrID0gaXNEZWVwO1xuICAgICAgICBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIGlzRGVlcCwgdHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicgJiYgYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlZXAgY2xvbmUgb2YgYHZhbHVlYC4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlXG4gICAgICogZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlcy4gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBjbG9uaW5nIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlIHN0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtLiBGdW5jdGlvbnNcbiAgICAgKiBhbmQgRE9NIG5vZGVzIGFyZSAqKm5vdCoqIGNsb25lZC4gVGhlIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFuZFxuICAgICAqIG9iamVjdHMgY3JlYXRlZCBieSBjb25zdHJ1Y3RvcnMgb3RoZXIgdGhhbiBgT2JqZWN0YCBhcmUgY2xvbmVkIHRvIHBsYWluIGBPYmplY3RgIG9iamVjdHMuXG4gICAgICogU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2luZnJhc3RydWN0dXJlLmh0bWwjaW50ZXJuYWwtc3RydWN0dXJlZC1jbG9uaW5nLWFsZ29yaXRobS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZGVlcCBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAoY2hhcmFjdGVycyk7XG4gICAgICogZGVlcFswXSA9PT0gY2hhcmFjdGVyc1swXTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnbm9kZSc6IGVsZW1lbnRcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGNsb25lID0gXy5jbG9uZURlZXAodmlldywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzRWxlbWVudCh2YWx1ZSkgPyB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjbG9uZS5ub2RlID09IHZpZXcubm9kZTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIHRydWUsIHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nICYmIGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBwcm92aWRlZCBpdHMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgYXNzaWduZWRcbiAgICAgKiB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwgeyAnY29uc3RydWN0b3InOiBDaXJjbGUgfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA/IGFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuICAgICAqIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBPbmNlIGFcbiAgICAgKiBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgZGVmYXVsdHMgb2YgdGhlIHNhbWUgcHJvcGVydHkgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZV0gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBBbGxvd3Mgd29ya2luZyB3aXRoIGBfLnJlZHVjZWAgd2l0aG91dCB1c2luZyBpdHNcbiAgICAgKiAgYGtleWAgYW5kIGBvYmplY3RgIGFyZ3VtZW50cyBhcyBzb3VyY2VzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ25hbWUnOiAnYmFybmV5JyB9O1xuICAgICAqIF8uZGVmYXVsdHMob2JqZWN0LCB7ICduYW1lJzogJ2ZyZWQnLCAnZW1wbG95ZXInOiAnc2xhdGUnIH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2VtcGxveWVyJzogJ3NsYXRlJyB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gY3JlYXRlSXRlcmF0b3IoZGVmYXVsdHNJdGVyYXRvck9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXJcbiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0b1xuICAgICAqICBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6IHsgICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9LFxuICAgICAqICAgJ2ZyZWQnOiB7ICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYmxvY2tlZCc6IGZhbHNlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KGNoYXJhY3RlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2UgPCA0MDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEtleShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAxIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kS2V5KGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgZm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlclxuICAgICAqICBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkIHRvXG4gICAgICogIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogeyAgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogeyAgICAnYWdlJzogNDAsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkoY2hhcmFjdGVycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLmFnZSA8IDQwO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgYHBlYmJsZXNgLCBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zIGBiYXJuZXlgXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRMYXN0S2V5KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDQwIH0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEtleShjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBmb3JPd25SaWdodChvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QsXG4gICAgICogZXhlY3V0aW5nIHRoZSBjYWxsYmFjayBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYFxuICAgICAqIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGtleSwgb2JqZWN0KS4gQ2FsbGJhY2tzIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIFNoYXBlLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgdGhpcy54ICs9IHg7XG4gICAgICogICB0aGlzLnkgKz0geTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgU2hhcGUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAneCcsICd5JywgYW5kICdtb3ZlJyAocHJvcGVydHkgb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIGVudmlyb25tZW50cylcbiAgICAgKi9cbiAgICB2YXIgZm9ySW4gPSBjcmVhdGVJdGVyYXRvcihlYWNoSXRlcmF0b3JPcHRpb25zLCBmb3JPd25JdGVyYXRvck9wdGlvbnMsIHtcbiAgICAgICd1c2VIYXMnOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIFNoYXBlLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgdGhpcy54ICs9IHg7XG4gICAgICogICB0aGlzLnkgKz0geTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBTaGFwZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdtb3ZlJywgJ3knLCBhbmQgJ3gnIGFzc3VtaW5nIGBfLmZvckluIGAgbG9ncyAneCcsICd5JywgYW5kICdtb3ZlJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIHBhaXJzID0gW107XG5cbiAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBwYWlycy5wdXNoKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBwYWlycy5sZW5ndGg7XG4gICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKHBhaXJzW2xlbmd0aC0tXSwgcGFpcnNbbGVuZ3RoXSwgb2JqZWN0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0LCBleGVjdXRpbmcgdGhlIGNhbGxiYWNrXG4gICAgICogZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBrZXksIG9iamVjdCkuIENhbGxiYWNrcyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnlcbiAgICAgKiBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JPd24oeyAnMCc6ICd6ZXJvJywgJzEnOiAnb25lJywgJ2xlbmd0aCc6IDIgfSwgZnVuY3Rpb24obnVtLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnMCcsICcxJywgYW5kICdsZW5ndGgnIChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIHZhciBmb3JPd24gPSBjcmVhdGVJdGVyYXRvcihlYWNoSXRlcmF0b3JPcHRpb25zLCBmb3JPd25JdGVyYXRvck9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodCh7ICcwJzogJ3plcm8nLCAnMSc6ICdvbmUnLCAnbGVuZ3RoJzogMiB9LCBmdW5jdGlvbihudW0sIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdsZW5ndGgnLCAnMScsIGFuZCAnMCcgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICcwJywgJzEnLCBhbmQgJ2xlbmd0aCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICBjYWxsYmFjayA9IGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF07XG4gICAgICAgIGlmIChjYWxsYmFjayhvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzb3J0ZWQgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgb2YgYWxsIGVudW1lcmFibGUgcHJvcGVydGllcyxcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCwgb2YgYG9iamVjdGAgdGhhdCBoYXZlIGZ1bmN0aW9uIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBtZXRob2RzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgdGhhdCBoYXZlIGZ1bmN0aW9uIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMoXyk7XG4gICAgICogLy8gPT4gWydhbGwnLCAnYW55JywgJ2JpbmQnLCAnYmluZEFsbCcsICdjbG9uZScsICdjb21wYWN0JywgJ2NvbXBvc2UnLCAuLi5dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgbmFtZSBleGlzdHMgYXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAsXG4gICAgICogaW5zdGVhZCBvZiBhbiBpbmhlcml0ZWQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBrZXkgaXMgYSBkaXJlY3QgcHJvcGVydHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oYXMoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sICdiJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA/IGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNyZWF0ZWQgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludmVydCh7ICdmaXJzdCc6ICdmcmVkJywgJ3NlY29uZCc6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiAnZmlyc3QnLCAnYmFybmV5JzogJ3NlY29uZCcgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludmVydChvYmplY3QpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W29iamVjdFtrZXldXSA9IGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuIHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBib29sZWFuIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBib29sQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBkYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBkYXRlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IGRhdGVDbGFzcyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZW1wdHkuIEFycmF5cywgc3RyaW5ncywgb3IgYGFyZ3VtZW50c2Agb2JqZWN0cyB3aXRoIGFcbiAgICAgKiBsZW5ndGggb2YgYDBgIGFuZCBvYmplY3RzIHdpdGggbm8gb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgY29uc2lkZXJlZFxuICAgICAqIFwiZW1wdHlcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KCcnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICBpZiAoKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzIHx8IGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcyB8fFxuICAgICAgICAgIChzdXBwb3J0LmFyZ3NDbGFzcyA/IGNsYXNzTmFtZSA9PSBhcmdzQ2xhc3MgOiBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB8fFxuICAgICAgICAgIChjbGFzc05hbWUgPT0gb2JqZWN0Q2xhc3MgJiYgdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNwbGljZSkpKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yT3duKHZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChyZXN1bHQgPSBmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQgdG8gZWFjaCBvdGhlci4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkXG4gICAgICogdG8gY29tcGFyZSB2YWx1ZXMuIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgIGNvbXBhcmlzb25zIHdpbGxcbiAgICAgKiBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czsgKGEsIGIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IGEgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBiIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogdmFyIGNvcHkgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiBvYmplY3QgPT0gY29weTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgY29weSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHdvcmRzID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyV29yZHMgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbCh3b3Jkcywgb3RoZXJXb3JkcywgZnVuY3Rpb24oYSwgYikge1xuICAgICAqICAgdmFyIHJlR3JlZXQgPSAvXig/OmhlbGxvfGhpKSQvaSxcbiAgICAgKiAgICAgICBhR3JlZXQgPSBfLmlzU3RyaW5nKGEpICYmIHJlR3JlZXQudGVzdChhKSxcbiAgICAgKiAgICAgICBiR3JlZXQgPSBfLmlzU3RyaW5nKGIpICYmIHJlR3JlZXQudGVzdChiKTtcbiAgICAgKlxuICAgICAqICAgcmV0dXJuIChhR3JlZXQgfHwgYkdyZWV0KSA/IChhR3JlZXQgPT0gYkdyZWV0KSA6IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbChhLCBiLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKGEsIGIsIHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nICYmIGJhc2VDcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzLCBvciBjYW4gYmUgY29lcmNlZCB0bywgYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgbmF0aXZlIGBpc0Zpbml0ZWAgd2hpY2ggd2lsbCByZXR1cm4gdHJ1ZSBmb3JcbiAgICAgKiBib29sZWFucyBhbmQgZW1wdHkgc3RyaW5ncy4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBmaW5pdGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgtMTAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCcxMCcpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUodHJ1ZSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlSXNGaW5pdGUodmFsdWUpICYmICFuYXRpdmVJc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbic7XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuICAgIGlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgICAgIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gZnVuY0NsYXNzO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUgbGFuZ3VhZ2UgdHlwZSBvZiBPYmplY3QuXG4gICAgICogKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIHRoZSBFQ01BU2NyaXB0IGxhbmd1YWdlIHR5cGUgb2YgT2JqZWN0XG4gICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDhcbiAgICAgIC8vIGFuZCBhdm9pZCBhIFY4IGJ1Z1xuICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MVxuICAgICAgcmV0dXJuICEhKHZhbHVlICYmIG9iamVjdFR5cGVzW3R5cGVvZiB2YWx1ZV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgbmF0aXZlIGBpc05hTmAgd2hpY2ggd2lsbCByZXR1cm4gYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtZXJpYyB2YWx1ZXMuIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi40LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBgTmFOYCBhcyBhIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGZcbiAgICAgIC8vIChwZXJmb3JtIHRoZSBbW0NsYXNzXV0gY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZSBob3N0IG9iamVjdHMgaW4gSUUpXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogTm90ZTogYE5hTmAgaXMgY29uc2lkZXJlZCBhIG51bWJlci4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4OC41LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcig4LjQgKiA1KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG51bWJlckNsYXNzIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IFNoYXBlKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICB2YXIgaXNQbGFpbk9iamVjdCA9ICFnZXRQcm90b3R5cGVPZiA/IHNoaW1Jc1BsYWluT2JqZWN0IDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghKHZhbHVlICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IG9iamVjdENsYXNzKSB8fCAoIXN1cHBvcnQuYXJnc0NsYXNzICYmIGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mLFxuICAgICAgICAgIG9ialByb3RvID0gaXNOYXRpdmUodmFsdWVPZikgJiYgKG9ialByb3RvID0gZ2V0UHJvdG90eXBlT2YodmFsdWVPZikpICYmIGdldFByb3RvdHlwZU9mKG9ialByb3RvKTtcblxuICAgICAgcmV0dXJuIG9ialByb3RvXG4gICAgICAgID8gKHZhbHVlID09IG9ialByb3RvIHx8IGdldFByb3RvdHlwZU9mKHZhbHVlKSA9PSBvYmpQcm90bylcbiAgICAgICAgOiBzaGltSXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcmVndWxhciBleHByZXNzaW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvZnJlZC8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICYmIG9iamVjdFR5cGVzW3R5cGVvZiB2YWx1ZV0gJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gcmVnZXhwQ2xhc3MgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdmcmVkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdDbGFzcyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkIGJ5XG4gICAgICogcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocm91Z2ggdGhlIGNhbGxiYWNrLlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBvYmplY3Qgd2l0aCB2YWx1ZXMgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXMoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzfSAsIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICogMzsgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiwgJ2MnOiA5IH1cbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcFZhbHVlcyhjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG5cbiAgICAgIGZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgbWVyZ2VzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QocyksIHRoYXRcbiAgICAgKiBkb24ndCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGludG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gU3Vic2VxdWVudCBzb3VyY2VzXG4gICAgICogd2lsbCBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy4gSWYgYSBjYWxsYmFjayBpc1xuICAgICAqIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBhbmQgc291cmNlIHByb3BlcnRpZXMuIElmIHRoZSBjYWxsYmFjayByZXR1cm5zIGB1bmRlZmluZWRgIG1lcmdpbmcgd2lsbFxuICAgICAqIGJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOyAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdpbmcgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBuYW1lcyA9IHtcbiAgICAgKiAgICdjaGFyYWN0ZXJzJzogW1xuICAgICAqICAgICB7ICduYW1lJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgICAgeyAnbmFtZSc6ICdmcmVkJyB9XG4gICAgICogICBdXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBhZ2VzID0ge1xuICAgICAqICAgJ2NoYXJhY3RlcnMnOiBbXG4gICAgICogICAgIHsgJ2FnZSc6IDM2IH0sXG4gICAgICogICAgIHsgJ2FnZSc6IDQwIH1cbiAgICAgKiAgIF1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShuYW1lcywgYWdlcyk7XG4gICAgICogLy8gPT4geyAnY2hhcmFjdGVycyc6IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV0gfVxuICAgICAqXG4gICAgICogdmFyIGZvb2QgPSB7XG4gICAgICogICAnZnJ1aXRzJzogWydhcHBsZSddLFxuICAgICAqICAgJ3ZlZ2V0YWJsZXMnOiBbJ2JlZXQnXVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXJGb29kID0ge1xuICAgICAqICAgJ2ZydWl0cyc6IFsnYmFuYW5hJ10sXG4gICAgICogICAndmVnZXRhYmxlcyc6IFsnY2Fycm90J11cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShmb29kLCBvdGhlckZvb2QsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzQXJyYXkoYSkgPyBhLmNvbmNhdChiKSA6IHVuZGVmaW5lZDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcnVpdHMnOiBbJ2FwcGxlJywgJ2JhbmFuYSddLCAndmVnZXRhYmxlcyc6IFsnYmVldCcsICdjYXJyb3RdIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZShvYmplY3QpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGxlbmd0aCA9IDI7XG5cbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAgd2l0aG91dCB1c2luZ1xuICAgICAgLy8gdGhlaXIgYGluZGV4YCBhbmQgYGNvbGxlY3Rpb25gIGFyZ3VtZW50c1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdICE9ICdudW1iZXInKSB7XG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMl0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBiYXNlQ3JlYXRlQ2FsbGJhY2soYXJnc1stLWxlbmd0aCAtIDFdLCBhcmdzW2xlbmd0aC0tXSwgMik7XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3NbLS1sZW5ndGhdO1xuICAgICAgfVxuICAgICAgdmFyIHNvdXJjZXMgPSBzbGljZShhcmd1bWVudHMsIDEsIGxlbmd0aCksXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBzdGFja0EgPSBnZXRBcnJheSgpLFxuICAgICAgICAgIHN0YWNrQiA9IGdldEFycmF5KCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZXNbaW5kZXhdLCBjYWxsYmFjaywgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgfVxuICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7XG4gICAgICByZWxlYXNlQXJyYXkoc3RhY2tCKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYG9iamVjdGAgZXhjbHVkaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZlxuICAgICAqIHByb3BlcnR5IG5hbWVzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2hcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCBvbWl0dGluZyB0aGUgcHJvcGVydGllcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleVxuICAgICAqIGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50cztcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufC4uLnN0cmluZ3xzdHJpbmdbXX0gW2NhbGxiYWNrXSBUaGUgcHJvcGVydGllcyB0byBvbWl0IG9yIHRoZVxuICAgICAqICBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRob3V0IHRoZSBvbWl0dGVkIHByb3BlcnRpZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ub21pdCh7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSwgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcgfVxuICAgICAqXG4gICAgICogXy5vbWl0KHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0KG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcHJvcHMgPSBbXTtcbiAgICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgcHJvcHMucHVzaChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvcHMgPSBiYXNlRGlmZmVyZW5jZShwcm9wcywgYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSkpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgaWYgKCFjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0d28gZGltZW5zaW9uYWwgYXJyYXkgb2YgYW4gb2JqZWN0J3Mga2V5LXZhbHVlIHBhaXJzLFxuICAgICAqIGkuZS4gYFtba2V5MSwgdmFsdWUxXSwgW2tleTIsIHZhbHVlMl1dYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIG5ldyBhcnJheSBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFpcnMoeyAnYmFybmV5JzogMzYsICdmcmVkJzogNDAgfSk7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF1dIChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhaXJzKG9iamVjdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGBvYmplY3RgIGNvbXBvc2VkIG9mIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZlxuICAgICAqIHByb3BlcnR5IG5hbWVzLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2hcbiAgICAgKiBwcm9wZXJ0eSBvZiBgb2JqZWN0YCBwaWNraW5nIHRoZSBwcm9wZXJ0aWVzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5XG4gICAgICogZm9yLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzO1xuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258Li4uc3RyaW5nfHN0cmluZ1tdfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyXG4gICAgICogIGl0ZXJhdGlvbiBvciBwcm9wZXJ0eSBuYW1lcyB0byBwaWNrLCBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBwcm9wZXJ0eVxuICAgICAqICBuYW1lcyBvciBhcnJheXMgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdmcmVkJywgJ191c2VyaWQnOiAnZnJlZDEnIH0sICduYW1lJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdmcmVkJyB9XG4gICAgICpcbiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdmcmVkJywgJ191c2VyaWQnOiAnZnJlZDEnIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkuY2hhckF0KDApICE9ICdfJztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrKG9iamVjdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIHByb3BzID0gYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSksXG4gICAgICAgICAgICBsZW5ndGggPSBpc09iamVjdChvYmplY3QpID8gcHJvcHMubGVuZ3RoIDogMDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYCB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyB0aHJvdWdoIGEgY2FsbGJhY2ssIHdpdGggZWFjaCBjYWxsYmFjayBleGVjdXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOyAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogQ2FsbGJhY2tzIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdHNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNxdWFyZXMgPSBfLnRyYW5zZm9ybShbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdLCBmdW5jdGlvbihyZXN1bHQsIG51bSkge1xuICAgICAqICAgbnVtICo9IG51bTtcbiAgICAgKiAgIGlmIChudW0gJSAyKSB7XG4gICAgICogICAgIHJldHVybiByZXN1bHQucHVzaChudW0pIDwgMztcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgOSwgMjVdXG4gICAgICpcbiAgICAgKiB2YXIgbWFwcGVkID0gXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtLCBrZXkpIHtcbiAgICAgKiAgIHJlc3VsdFtrZXldID0gbnVtICogMztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2LCAnYyc6IDkgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGNhbGxiYWNrLCBhY2N1bXVsYXRvciwgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICAgIHByb3RvID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZTtcblxuICAgICAgICAgIGFjY3VtdWxhdG9yID0gYmFzZUNyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7XG4gICAgICAgIChpc0FyciA/IGJhc2VFYWNoIDogZm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gb2JqZWN0W3Byb3BzW2luZGV4XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5kZXhlcywgb3Iga2V5cywgb2YgdGhlXG4gICAgICogYGNvbGxlY3Rpb25gLiBJbmRleGVzIG1heSBiZSBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXMgYXJyYXlzXG4gICAgICogb2YgaW5kZXhlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdfHN0cmluZ3xzdHJpbmdbXSl9IFtpbmRleF0gVGhlIGluZGV4ZXMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogICB0byByZXRyaWV2ZSwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgaW5kZXhlcyBvciBhcnJheXMgb2YgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZWxlbWVudHMgY29ycmVzcG9uZGluZyB0byB0aGVcbiAgICAgKiAgcHJvdmlkZWQgaW5kZXhlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hdChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddLCBbMCwgMiwgNF0pO1xuICAgICAqIC8vID0+IFsnYScsICdjJywgJ2UnXVxuICAgICAqXG4gICAgICogXy5hdChbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXSwgMCwgMik7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGF0KGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBiYXNlRmxhdHRlbihhcmdzLCB0cnVlLCBmYWxzZSwgMSksXG4gICAgICAgICAgbGVuZ3RoID0gKGFyZ3NbMl0gJiYgYXJnc1syXVthcmdzWzFdXSA9PT0gY29sbGVjdGlvbikgPyAxIDogcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNvbGxlY3Rpb25bcHJvcHNbaW5kZXhdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgcHJlc2VudCBpbiBhIGNvbGxlY3Rpb24gdXNpbmcgc3RyaWN0IGVxdWFsaXR5XG4gICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQgaXMgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGluY2x1ZGVcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBjaGVjayBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHRhcmdldGAgZWxlbWVudCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbnRhaW5zKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb250YWlucyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmNvbnRhaW5zKHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCAnZnJlZCcpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29udGFpbnMoJ3BlYmJsZXMnLCAnZWInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29udGFpbnMoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KSA6IGZyb21JbmRleCkgfHwgMDtcbiAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpID4gLTE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmVzdWx0ID0gKGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbi5pbmRleE9mKHRhcmdldCwgZnJvbUluZGV4KSA6IGluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpKSA+IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoKytpbmRleCA+PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAhKHJlc3VsdCA9IHZhbHVlID09PSB0YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgICogb2YgZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2suXG4gICAgICogVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50cztcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSsrIDogcmVzdWx0W2tleV0gPSAxKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gY2FsbGJhY2sgcmV0dXJucyB0cnVleSB2YWx1ZSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbGxcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzZWQgdGhlIGNhbGxiYWNrIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeShjaGFyYWN0ZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeShjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAzNiB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmICghKHJlc3VsdCA9ICEhY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIChyZXN1bHQgPSAhIWNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleSBmb3IuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgc2VsZWN0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBldmVucyA9IF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gJSAyID09IDA7IH0pO1xuICAgICAqIC8vID0+IFsyLCA0LCA2XVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2Jsb2NrZWQnOiBmYWxzZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmlsdGVyKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbHRlcihjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAzNiB9KTtcbiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbGxlY3Rpb25baW5kZXhdO1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdFxuICAgICAqIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvci4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBkZXRlY3QsIGZpbmRXaGVyZVxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQoY2hhcmFjdGVycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLmFnZSA8IDQwO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZChjaGFyYWN0ZXJzLCB7ICdhZ2UnOiAxIH0pO1xuICAgICAqIC8vID0+ICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgJ2Jsb2NrZWQnOiBmYWxzZSB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmQoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3QoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBhIGNvbGxlY3Rpb24sIGV4ZWN1dGluZyB0aGUgY2FsbGJhY2sgZm9yIGVhY2hcbiAgICAgKiBlbGVtZW50LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzO1xuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4gQ2FsbGJhY2tzIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieVxuICAgICAqIGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBOb3RlOiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBgbGVuZ3RoYCBwcm9wZXJ0eVxuICAgICAqIGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciBgXy5mb3JJbmAgb3IgYF8uZm9yT3duYFxuICAgICAqIG1heSBiZSB1c2VkIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLmZvckVhY2goZnVuY3Rpb24obnVtKSB7IGNvbnNvbGUubG9nKG51bSk7IH0pLmpvaW4oJywnKTtcbiAgICAgKiAvLyA9PiBsb2dzIGVhY2ggbnVtYmVyIGFuZCByZXR1cm5zICcxLDIsMydcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9LCBmdW5jdGlvbihudW0pIHsgY29uc29sZS5sb2cobnVtKTsgfSk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIG51bWJlciBhbmQgcmV0dXJucyB0aGUgb2JqZWN0IChwcm9wZXJ0eSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgZW52aXJvbm1lbnRzKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYSBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdHxzdHJpbmd9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkuZm9yRWFjaFJpZ2h0KGZ1bmN0aW9uKG51bSkgeyBjb25zb2xlLmxvZyhudW0pOyB9KS5qb2luKCcsJyk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIG51bWJlciBmcm9tIHJpZ2h0IHRvIGxlZnQgYW5kIHJldHVybnMgJzMsMiwxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGl0ZXJhYmxlID0gY29sbGVjdGlvbixcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwO1xuXG4gICAgICBjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBiYXNlQ3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKGNvbGxlY3Rpb25bbGVuZ3RoXSwgbGVuZ3RoLCBjb2xsZWN0aW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT0gJ251bWJlcicpIHtcbiAgICAgICAgICB2YXIgcHJvcHMgPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgaXRlcmFibGUgPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTtcbiAgICAgICAgfVxuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAga2V5ID0gcHJvcHMgPyBwcm9wc1stLWxlbmd0aF0gOiAtLWxlbmd0aDtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soaXRlcmFibGVba2V5XSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICAqIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIHRoZSBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzQuMiwgNi4xLCA2LjRdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguZmxvb3IobnVtKTsgfSk7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuNF0gfVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs0LjIsIDYuMSwgNi40XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiB0aGlzLmZsb29yKG51bSk7IH0sIE1hdGgpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjRdIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldIDogcmVzdWx0W2tleV0gPSBbXSkucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgdGhlIGNvbGxlY3Rpb24gdGhyb3VnaCB0aGUgZ2l2ZW4gY2FsbGJhY2suIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGtleXMgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleXMsICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleXMsIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShrZXkuY29kZSk7IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8uaW5kZXhCeShjaGFyYWN0ZXJzLCBmdW5jdGlvbihrZXkpIHsgdGhpcy5mcm9tQ2hhckNvZGUoa2V5LmNvZGUpOyB9LCBTdHJpbmcpO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIgaW5kZXhCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIG5hbWVkIGJ5IGBtZXRob2ROYW1lYCBvbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYFxuICAgICAqIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIHdpbGwgYmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYG1ldGhvZE5hbWVgIGlzIGEgZnVuY3Rpb24gaXRcbiAgICAgKiB3aWxsIGJlIGludm9rZWQgZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZShbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlKGNvbGxlY3Rpb24sIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAyKSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBtZXRob2ROYW1lID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7XG5cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gKGlzRnVuYyA/IG1ldGhvZE5hbWUgOiB2YWx1ZVttZXRob2ROYW1lXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICogdGhyb3VnaCB0aGUgY2FsbGJhY2suIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgY29sbGVjdFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWRcbiAgICAgKiAgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAqIDM7IH0pO1xuICAgICAqIC8vID0+IFszLCA2LCA5XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gKiAzOyB9KTtcbiAgICAgKiAvLyA9PiBbMywgNiwgOV0gKHByb3BlcnR5IG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkIGFjcm9zcyBlbnZpcm9ubWVudHMpXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWFwKGNoYXJhY3RlcnMsICduYW1lJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgPyBsZW5ndGggOiAwKTtcblxuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGNhbGxiYWNrKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGEgY29sbGVjdGlvbi4gSWYgdGhlIGNvbGxlY3Rpb24gaXMgZW1wdHkgb3JcbiAgICAgKiBmYWxzZXkgYC1JbmZpbml0eWAgaXMgcmV0dXJuZWQuIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBleGVjdXRlZFxuICAgICAqIGZvciBlYWNoIHZhbHVlIGluIHRoZSBjb2xsZWN0aW9uIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2ggdGhlIHZhbHVlXG4gICAgICogaXMgcmFua2VkLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1heChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHsgcmV0dXJuIGNoci5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9O1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5tYXgoY2hhcmFjdGVycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGNvbXB1dGVkID0gLUluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVkO1xuXG4gICAgICAvLyBhbGxvd3Mgd29ya2luZyB3aXRoIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAgd2l0aG91dCB1c2luZ1xuICAgICAgLy8gdGhlaXIgYGluZGV4YCBhcmd1bWVudCBhcyBhIGNhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdmdW5jdGlvbicgJiYgdGhpc0FyZyAmJiB0aGlzQXJnW2NhbGxiYWNrXSA9PT0gY29sbGVjdGlvbikge1xuICAgICAgICBjYWxsYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTtcbiAgICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgPSAoY2FsbGJhY2sgPT0gbnVsbCAmJiBpc1N0cmluZyhjb2xsZWN0aW9uKSlcbiAgICAgICAgICA/IGNoYXJBdENhbGxiYWNrXG4gICAgICAgICAgOiBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgICBpZiAoY3VycmVudCA+IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICBjb21wdXRlZCA9IGN1cnJlbnQ7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYSBjb2xsZWN0aW9uLiBJZiB0aGUgY29sbGVjdGlvbiBpcyBlbXB0eSBvclxuICAgICAqIGZhbHNleSBgSW5maW5pdHlgIGlzIHJldHVybmVkLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgZXhlY3V0ZWRcbiAgICAgKiBmb3IgZWFjaCB2YWx1ZSBpbiB0aGUgY29sbGVjdGlvbiB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoIHRoZSB2YWx1ZVxuICAgICAqIGlzIHJhbmtlZC4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5taW4oY2hhcmFjdGVycywgZnVuY3Rpb24oY2hyKSB7IHJldHVybiBjaHIuYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9O1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5taW4oY2hhcmFjdGVycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgY29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBjb21wdXRlZDtcblxuICAgICAgLy8gYWxsb3dzIHdvcmtpbmcgd2l0aCBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgIHdpdGhvdXQgdXNpbmdcbiAgICAgIC8vIHRoZWlyIGBpbmRleGAgYXJndW1lbnQgYXMgYSBjYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnZnVuY3Rpb24nICYmIHRoaXNBcmcgJiYgdGhpc0FyZ1tjYWxsYmFja10gPT09IGNvbGxlY3Rpb24pIHtcbiAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwgJiYgaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgaWYgKHZhbHVlIDwgcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrID0gKGNhbGxiYWNrID09IG51bGwgJiYgaXNTdHJpbmcoY29sbGVjdGlvbikpXG4gICAgICAgICAgPyBjaGFyQXRDYWxsYmFja1xuICAgICAgICAgIDogbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcblxuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPCBjb21wdXRlZCkge1xuICAgICAgICAgICAgY29tcHV0ZWQgPSBjdXJyZW50O1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZSBvZiBhIHNwZWNpZmllZCBwcm9wZXJ0eSBmcm9tIGFsbCBlbGVtZW50cyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHBsdWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wbHVjayhjaGFyYWN0ZXJzLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIHZhciBwbHVjayA9IG1hcDtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYSBjb2xsZWN0aW9uIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIHRoZSBjb2xsZWN0aW9uIHRocm91Z2ggdGhlIGNhbGxiYWNrLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBjYWxsYmFjayBleGVjdXRpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgZXhlY3V0aW9uLiBJZlxuICAgICAqIGBhY2N1bXVsYXRvcmAgaXMgbm90IHByb3ZpZGVkIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2xsZWN0aW9uIHdpbGwgYmVcbiAgICAgKiB1c2VkIGFzIHRoZSBpbml0aWFsIGBhY2N1bXVsYXRvcmAgdmFsdWUuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOyAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGZvbGRsLCBpbmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBJbml0aWFsIHZhbHVlIG9mIHRoZSBhY2N1bXVsYXRvci5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzdW0gPSBfLnJlZHVjZShbMSwgMiwgM10sIGZ1bmN0aW9uKHN1bSwgbnVtKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbnVtO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIHZhciBtYXBwZWQgPSBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgZnVuY3Rpb24ocmVzdWx0LCBudW0sIGtleSkge1xuICAgICAqICAgcmVzdWx0W2tleV0gPSBudW0gKiAzO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiwgJ2MnOiA5IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgY2FsbGJhY2ssIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbm9hY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDQpO1xuXG4gICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIGlmIChub2FjY3VtKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBjb2xsZWN0aW9uWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFjayhhY2N1bXVsYXRvciwgY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBub2FjY3VtXG4gICAgICAgICAgICA/IChub2FjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICAgICAgOiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGEgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBmb2xkclxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIEluaXRpYWwgdmFsdWUgb2YgdGhlIGFjY3VtdWxhdG9yLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxpc3QgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICogdmFyIGZsYXQgPSBfLnJlZHVjZVJpZ2h0KGxpc3QsIGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGIpOyB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgY2FsbGJhY2ssIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbm9hY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDQpO1xuICAgICAgZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBhY2N1bXVsYXRvciA9IG5vYWNjdW1cbiAgICAgICAgICA/IChub2FjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICAgIDogY2FsbGJhY2soYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBhXG4gICAgICogY29sbGVjdGlvbiB0aGF0IHRoZSBjYWxsYmFjayBkb2VzICoqbm90KiogcmV0dXJuIHRydWV5IGZvci5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGZhaWxlZCB0aGUgY2FsbGJhY2sgY2hlY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvZGRzID0gXy5yZWplY3QoWzEsIDIsIDMsIDQsIDUsIDZdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAlIDIgPT0gMDsgfSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5yZWplY3QoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucmVqZWN0KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDM2IH0pO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAsICdibG9ja2VkJzogdHJ1ZSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgcmV0dXJuIGZpbHRlcihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuICFjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgcmFuZG9tIGVsZW1lbnQgb3IgYG5gIHJhbmRvbSBlbGVtZW50cyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gQWxsb3dzIHdvcmtpbmcgd2l0aCBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgXG4gICAgICogIHdpdGhvdXQgdXNpbmcgdGhlaXIgYGluZGV4YCBhcmd1bWVudHMgYXMgYG5gLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIHNhbXBsZShzKSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uICYmIHR5cGVvZiBjb2xsZWN0aW9uLmxlbmd0aCAhPSAnbnVtYmVyJykge1xuICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uW2Jhc2VSYW5kb20oMCwgY29sbGVjdGlvbi5sZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc2h1ZmZsZShjb2xsZWN0aW9uKTtcbiAgICAgIHJlc3VsdC5sZW5ndGggPSBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCByZXN1bHQubGVuZ3RoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGUgRmlzaGVyLVlhdGVzXG4gICAgICogc2h1ZmZsZS4gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgc2h1ZmZsZWQgY29sbGVjdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0LCA1LCA2XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDYsIDMsIDUsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgPyBsZW5ndGggOiAwKTtcblxuICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oMCwgKytpbmRleCk7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSByZXN1bHRbcmFuZF07XG4gICAgICAgIHJlc3VsdFtyYW5kXSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgdGhlIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgYGNvbGxlY3Rpb24ubGVuZ3RoYCBmb3IgYXJyYXlzXG4gICAgICogYW5kIGFycmF5LWxpa2Ugb2JqZWN0cyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGBjb2xsZWN0aW9uLmxlbmd0aGAgb3IgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDoga2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjYWxsYmFjayByZXR1cm5zIGEgdHJ1ZXkgdmFsdWUgZm9yICoqYW55KiogZWxlbWVudCBvZiBhXG4gICAgICogY29sbGVjdGlvbi4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYXMgc29vbiBhcyBpdCBmaW5kcyBhIHBhc3NpbmcgdmFsdWUgYW5kXG4gICAgICogZG9lcyBub3QgaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgY29sbGVjdGlvbi4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvXG4gICAgICogYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbnlcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb21lKGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuXG4gICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKChyZXN1bHQgPSBjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gIShyZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJvdWdoIHRoZSBjYWxsYmFjay4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCB3aWxsIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyXG4gICAgICogb2YgZXF1YWwgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNvbGxlY3Rpb25cbiAgICAgKiB3aWxsIGJlIHNvcnRlZCBieSBlYWNoIHByb3BlcnR5IHZhbHVlLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHNvcnRlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguc2luKG51bSk7IH0pO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuc2luKG51bSk7IH0sIE1hdGgpO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdiYXJuZXknLCAgJ2FnZSc6IDI2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYWdlJzogMzAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcChfLnNvcnRCeShjaGFyYWN0ZXJzLCAnYWdlJyksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9PiBbWydiYXJuZXknLCAyNl0sIFsnZnJlZCcsIDMwXSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIC8vIHNvcnRpbmcgYnkgbXVsdGlwbGUgcHJvcGVydGllc1xuICAgICAqIF8ubWFwKF8uc29ydEJ5KGNoYXJhY3RlcnMsIFsnbmFtZScsICdhZ2UnXSksIF8udmFsdWVzKTtcbiAgICAgKiAvLyA9ID4gW1snYmFybmV5JywgMjZdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydEJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoY2FsbGJhY2spLFxuICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkodHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJyA/IGxlbmd0aCA6IDApO1xuXG4gICAgICBpZiAoIWlzQXJyKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIH1cbiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgb2JqZWN0ID0gcmVzdWx0WysraW5kZXhdID0gZ2V0T2JqZWN0KCk7XG4gICAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAgIG9iamVjdC5jcml0ZXJpYSA9IG1hcChjYWxsYmFjaywgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAob2JqZWN0LmNyaXRlcmlhID0gZ2V0QXJyYXkoKSlbMF0gPSBjYWxsYmFjayh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QuaW5kZXggPSBpbmRleDtcbiAgICAgICAgb2JqZWN0LnZhbHVlID0gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdC5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSByZXN1bHRbbGVuZ3RoXTtcbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBvYmplY3QudmFsdWU7XG4gICAgICAgIGlmICghaXNBcnIpIHtcbiAgICAgICAgICByZWxlYXNlQXJyYXkob2JqZWN0LmNyaXRlcmlhKTtcbiAgICAgICAgfVxuICAgICAgICByZWxlYXNlT2JqZWN0KG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBgY29sbGVjdGlvbmAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpOyB9KSgxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uICYmIHR5cGVvZiBjb2xsZWN0aW9uLmxlbmd0aCA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gKHN1cHBvcnQudW5pbmRleGVkQ2hhcnMgJiYgaXNTdHJpbmcoY29sbGVjdGlvbikpXG4gICAgICAgICAgPyBjb2xsZWN0aW9uLnNwbGl0KCcnKVxuICAgICAgICAgIDogc2xpY2UoY29sbGVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIG9mIGVhY2ggZWxlbWVudCBpbiBhIGBjb2xsZWN0aW9uYCB0byB0aGUgZ2l2ZW5cbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0LCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzIHRoYXQgaGF2ZSBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUgRnVuY3Rpb25cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBmaWx0ZXIgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgZ2l2ZW4gcHJvcGVydGllcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ3BldHMnOiBbJ2hvcHB5J10gfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAncGV0cyc6IFsnYmFieSBwdXNzJywgJ2Rpbm8nXSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ud2hlcmUoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAncGV0cyc6IFsnaG9wcHknXSB9XVxuICAgICAqXG4gICAgICogXy53aGVyZShjaGFyYWN0ZXJzLCB7ICdwZXRzJzogWydkaW5vJ10gfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCwgJ3BldHMnOiBbJ2JhYnkgcHVzcycsICdkaW5vJ10gfV1cbiAgICAgKi9cbiAgICB2YXIgd2hlcmUgPSBmaWx0ZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgYWxsIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIHZhbHVlcyBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzIHVzaW5nIHN0cmljdFxuICAgICAqIGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgYXJyYXlzIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMSwgMiwgMywgNCwgNV0sIFs1LCAyLCAxMF0pO1xuICAgICAqIC8vID0+IFsxLCAzLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpZmZlcmVuY2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2Jsb2NrZWQnOiB0cnVlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgMjA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgoY2hhcmFjdGVycywgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBhIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdibG9ja2VkJzogdHJ1ZSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYmxvY2tlZCc6IGZhbHNlIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdibG9ja2VkJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleChjaGFyYWN0ZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlID4gMzA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLndoZXJlXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEluZGV4KGNoYXJhY3RlcnMsIHsgJ2FnZSc6IDM2IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RJbmRleChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvciBmaXJzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGEgY2FsbGJhY2tcbiAgICAgKiBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZ1xuICAgICAqIGFzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGhlYWQsIHRha2VcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fG51bWJlcnxzdHJpbmd9IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHVybi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yXG4gICAgICogIG9iamVjdCBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIGEgXCJfLnBsdWNrXCIgb3IgXCJfLndoZXJlXCJcbiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpcnN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSA8IDM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICduYScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpcnN0KGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgJ2Jsb2NrZWQnOiB0cnVlLCAnZW1wbG95ZXInOiAnc2xhdGUnIH1dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZmlyc3QoY2hhcmFjdGVycywgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpcnN0KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIG4rKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBhIG5lc3RlZCBhcnJheSAodGhlIG5lc3RpbmcgY2FuIGJlIHRvIGFueSBkZXB0aCkuIElmIGBpc1NoYWxsb3dgXG4gICAgICogaXMgdHJ1ZXksIHRoZSBhcnJheSB3aWxsIG9ubHkgYmUgZmxhdHRlbmVkIGEgc2luZ2xlIGxldmVsLiBJZiBhIGNhbGxiYWNrXG4gICAgICogaXMgcHJvdmlkZWQgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBpcyBwYXNzZWQgdGhyb3VnaCB0aGUgY2FsbGJhY2sgYmVmb3JlXG4gICAgICogZmxhdHRlbmluZy4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1NoYWxsb3c9ZmFsc2VdIEEgZmxhZyB0byByZXN0cmljdCBmbGF0dGVuaW5nIHRvIGEgc2luZ2xlIGxldmVsLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkXG4gICAgICogIHBlciBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkXG4gICAgICogIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMl0sIFszLCBbWzRdXV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyXSwgWzMsIFtbNF1dXV0sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbWzRdXV07XG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDMwLCAncGV0cyc6IFsnaG9wcHknXSB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAsICdwZXRzJzogWydiYWJ5IHB1c3MnLCAnZGlubyddIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5mbGF0dGVuKGNoYXJhY3RlcnMsICdwZXRzJyk7XG4gICAgICogLy8gPT4gWydob3BweScsICdiYWJ5IHB1c3MnLCAnZGlubyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgLy8ganVnZ2xlIGFyZ3VtZW50c1xuICAgICAgaWYgKHR5cGVvZiBpc1NoYWxsb3cgIT0gJ2Jvb2xlYW4nICYmIGlzU2hhbGxvdyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSAodHlwZW9mIGlzU2hhbGxvdyAhPSAnZnVuY3Rpb24nICYmIHRoaXNBcmcgJiYgdGhpc0FyZ1tpc1NoYWxsb3ddID09PSBhcnJheSkgPyBudWxsIDogaXNTaGFsbG93O1xuICAgICAgICBpc1NoYWxsb3cgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIGFycmF5ID0gbWFwKGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGlzU2hhbGxvdyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZ1xuICAgICAqIHN0cmljdCBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIHRoZSBhcnJheSBpcyBhbHJlYWR5IHNvcnRlZFxuICAgICAqIHByb3ZpZGluZyBgdHJ1ZWAgZm9yIGBmcm9tSW5kZXhgIHdpbGwgcnVuIGEgZmFzdGVyIGJpbmFyeSBzZWFyY2guXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tIG9yIGB0cnVlYFxuICAgICAqICB0byBwZXJmb3JtIGEgYmluYXJ5IHNlYXJjaCBvbiBhIHNvcnRlZCBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyLCAzKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDEsIDIsIDIsIDMsIDNdLCAyLCB0cnVlKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KSA6IGZyb21JbmRleCB8fCAwKTtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpbmRleF0gPT09IHZhbHVlID8gaW5kZXggOiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb3IgbGFzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGFcbiAgICAgKiBjYWxsYmFjayBpcyBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgZXhjbHVkZWQgZnJvbVxuICAgICAqIHRoZSByZXN1bHQgYXMgbG9uZyBhcyB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVleS4gVGhlIGNhbGxiYWNrIGlzIGJvdW5kXG4gICAgICogdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3JcbiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIlxuICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gPiAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYmxvY2tlZCc6IGZhbHNlLCAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnbmEnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5pbml0aWFsKGNoYXJhY3RlcnMsICdibG9ja2VkJyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5pbml0aWFsKGNoYXJhY3RlcnMsIHsgJ2VtcGxveWVyJzogJ25hJyB9KSwgJ25hbWUnKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB3aGlsZSAoaW5kZXgtLSAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBjYWxsYmFjayB8fCBuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIGxlbmd0aCAtIG4pLCBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgcHJlc2VudCBpbiBhbGwgcHJvdmlkZWQgYXJyYXlzIHVzaW5nXG4gICAgICogc3RyaWN0IGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzEsIDIsIDNdLCBbNSwgMiwgMSwgNF0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBnZXRBcnJheSgpLFxuICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksXG4gICAgICAgICAgdHJ1c3RJbmRleE9mID0gaW5kZXhPZiA9PT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgc2VlbiA9IGdldEFycmF5KCk7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzW2FyZ3NJbmRleF07XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgICAgICBhcmdzLnB1c2godmFsdWUpO1xuICAgICAgICAgIGNhY2hlcy5wdXNoKHRydXN0SW5kZXhPZiAmJiB2YWx1ZS5sZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiZcbiAgICAgICAgICAgIGNyZWF0ZUNhY2hlKGFyZ3NJbmRleCA/IGFyZ3NbYXJnc0luZGV4XSA6IHNlZW4pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGFycmF5ID0gYXJnc1swXSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbMF07XG4gICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIGlmICgoY2FjaGUgPyBjYWNoZUluZGV4T2YoY2FjaGUsIHZhbHVlKSA6IGluZGV4T2Yoc2VlbiwgdmFsdWUpKSA8IDApIHtcbiAgICAgICAgICBhcmdzSW5kZXggPSBhcmdzTGVuZ3RoO1xuICAgICAgICAgIChjYWNoZSB8fCBzZWVuKS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB3aGlsZSAoLS1hcmdzSW5kZXgpIHtcbiAgICAgICAgICAgIGNhY2hlID0gY2FjaGVzW2FyZ3NJbmRleF07XG4gICAgICAgICAgICBpZiAoKGNhY2hlID8gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkgOiBpbmRleE9mKGFyZ3NbYXJnc0luZGV4XSwgdmFsdWUpKSA8IDApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICBjYWNoZSA9IGNhY2hlc1thcmdzTGVuZ3RoXTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgcmVsZWFzZU9iamVjdChjYWNoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbGVhc2VBcnJheShjYWNoZXMpO1xuICAgICAgcmVsZWFzZUFycmF5KHNlZW4pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb3IgbGFzdCBgbmAgZWxlbWVudHMgb2YgYW4gYXJyYXkuIElmIGEgY2FsbGJhY2sgaXNcbiAgICAgKiBwcm92aWRlZCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZyBhcyB0aGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIHRydWV5LiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ucGx1Y2tcIiBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGNhbGxiYWNrYCB0aGUgY3JlYXRlZCBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFja1xuICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsXG4gICAgICogZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxudW1iZXJ8c3RyaW5nfSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZXR1cm4uIElmIGEgcHJvcGVydHkgbmFtZSBvclxuICAgICAqICBvYmplY3QgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhIFwiXy5wbHVja1wiIG9yIFwiXy53aGVyZVwiXG4gICAgICogIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudChzKSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkge1xuICAgICAqICAgcmV0dXJuIG51bSA+IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdibG9ja2VkJzogZmFsc2UsICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnZnJlZCcsICAgICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICdzbGF0ZScgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgICdlbXBsb3llcic6ICduYScgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8ubGFzdChjaGFyYWN0ZXJzLCAnYmxvY2tlZCcpLCAnbmFtZScpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy53aGVyZVwiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubGFzdChjaGFyYWN0ZXJzLCB7ICdlbXBsb3llcic6ICduYScgfSk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAncGViYmxlcycsICdibG9ja2VkJzogdHJ1ZSwgJ2VtcGxveWVyJzogJ25hJyB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgbiA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdudW1iZXInICYmIGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMyk7XG4gICAgICAgIHdoaWxlIChpbmRleC0tICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIG4rKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAobiA9PSBudWxsIHx8IHRoaXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuYXRpdmVNYXgoMCwgbGVuZ3RoIC0gbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBsYXN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZyBzdHJpY3RcbiAgICAgKiBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkXG4gICAgICogYXMgdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSBvciBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAzLCAxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIsIDMpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGluZGV4ID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heCgwLCBpbmRleCArIGZyb21JbmRleCkgOiBuYXRpdmVNaW4oZnJvbUluZGV4LCBpbmRleCAtIDEpKSArIDE7XG4gICAgICB9XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHByb3ZpZGVkIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBhcnJheSB1c2luZyBzdHJpY3QgZXF1YWxpdHkgZm9yXG4gICAgICogY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZV0gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCAxLCAyLCAzXTtcbiAgICAgKiBfLnB1bGwoYXJyYXksIDIsIDMpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsKGFycmF5KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBhcmdzSW5kZXggPSAwLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LS0sIDEpO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIGBlbmRgLiBJZiBgc3RhcnRgIGlzIGxlc3MgdGhhbiBgc3RvcGAgYVxuICAgICAqIHplcm8tbGVuZ3RoIHJhbmdlIGlzIGNyZWF0ZWQgdW5sZXNzIGEgbmVnYXRpdmUgYHN0ZXBgIGlzIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IHJhbmdlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgIHN0YXJ0ID0gK3N0YXJ0IHx8IDA7XG4gICAgICBzdGVwID0gdHlwZW9mIHN0ZXAgPT0gJ251bWJlcicgPyBzdGVwIDogKCtzdGVwIHx8IDEpO1xuXG4gICAgICBpZiAoZW5kID09IG51bGwpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIC8vIHVzZSBgQXJyYXkobGVuZ3RoKWAgc28gZW5naW5lcyBsaWtlIENoYWtyYSBhbmQgVjggYXZvaWQgc2xvd2VyIG1vZGVzXG4gICAgICAvLyBodHRwOi8veW91dHUuYmUvWEFxSXBHVThaWmsjdD0xN20yNXNcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heCgwLCBjZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSkpLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSB0aGF0IHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWV5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNCwgNSwgNl07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICUgMiA9PSAwOyB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNCwgNl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleC0tLCAxKTtcbiAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uaW5pdGlhbGAgdGhpcyBtZXRob2QgZ2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9yXG4gICAgICogZmlyc3QgYG5gIGVsZW1lbnRzIG9mIGFuIGFycmF5LiBJZiBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGVsZW1lbnRzXG4gICAgICogYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJlc3VsdCBhcyBsb25nIGFzIHRoZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgdHJ1ZXkuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZHJvcCwgdGFpbFxuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8bnVtYmVyfHN0cmluZ30gW2NhbGxiYWNrPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWRcbiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBleGNsdWRlLiBJZiBhIHByb3BlcnR5IG5hbWUgb3JcbiAgICAgKiAgb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIlxuICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5yZXN0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnJlc3QoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHtcbiAgICAgKiAgIHJldHVybiBudW0gPCAzO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogdmFyIGNoYXJhY3RlcnMgPSBbXG4gICAgICogICB7ICduYW1lJzogJ2Jhcm5leScsICAnYmxvY2tlZCc6IHRydWUsICAnZW1wbG95ZXInOiAnc2xhdGUnIH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICAnYmxvY2tlZCc6IGZhbHNlLCAgJ2VtcGxveWVyJzogJ3NsYXRlJyB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdwZWJibGVzJywgJ2Jsb2NrZWQnOiB0cnVlLCAnZW1wbG95ZXInOiAnbmEnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgXCJfLnBsdWNrXCIgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnJlc3QoY2hhcmFjdGVycywgJ2Jsb2NrZWQnKSwgJ25hbWUnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ud2hlcmVcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlc3QoY2hhcmFjdGVycywgeyAnZW1wbG95ZXInOiAnc2xhdGUnIH0pO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ3BlYmJsZXMnLCAnYmxvY2tlZCc6IHRydWUsICdlbXBsb3llcic6ICduYScgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGFycmF5LCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnbnVtYmVyJyAmJiBjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIHZhciBuID0gMCxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBuYXRpdmVNYXgoMCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoIGEgdmFsdWVcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBhIGdpdmVuIHNvcnRlZCBhcnJheSBpbiBvcmRlciB0byBtYWludGFpbiB0aGUgc29ydFxuICAgICAqIG9yZGVyIG9mIHRoZSBhcnJheS4gSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIGV4ZWN1dGVkIGZvclxuICAgICAqIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXIgc29ydCByYW5raW5nLiBUaGVcbiAgICAgKiBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLnBsdWNrXCIgc3R5bGVcbiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBjYWxsYmFja2AgdGhlIGNyZWF0ZWQgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2tcbiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LFxuICAgICAqIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMjAsIDMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBcIl8ucGx1Y2tcIiBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnNvcnRlZEluZGV4KFt7ICd4JzogMjAgfSwgeyAneCc6IDMwIH0sIHsgJ3gnOiA1MCB9XSwgeyAneCc6IDQwIH0sICd4Jyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogdmFyIGRpY3QgPSB7XG4gICAgICogICAnd29yZFRvTnVtYmVyJzogeyAndHdlbnR5JzogMjAsICd0aGlydHknOiAzMCwgJ2ZvdXJ0eSc6IDQwLCAnZmlmdHknOiA1MCB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7XG4gICAgICogICByZXR1cm4gZGljdC53b3JkVG9OdW1iZXJbd29yZF07XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbJ3R3ZW50eScsICd0aGlydHknLCAnZmlmdHknXSwgJ2ZvdXJ0eScsIGZ1bmN0aW9uKHdvcmQpIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLndvcmRUb051bWJlclt3b3JkXTtcbiAgICAgKiB9LCBkaWN0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogbG93O1xuXG4gICAgICAvLyBleHBsaWNpdGx5IHJlZmVyZW5jZSBgaWRlbnRpdHlgIGZvciBiZXR0ZXIgaW5saW5pbmcgaW4gRmlyZWZveFxuICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayA/IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkgOiBpZGVudGl0eTtcbiAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUpO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxO1xuICAgICAgICAoY2FsbGJhY2soYXJyYXlbbWlkXSkgPCB2YWx1ZSlcbiAgICAgICAgICA/IGxvdyA9IG1pZCArIDFcbiAgICAgICAgICA6IGhpZ2ggPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG93O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIG9mIHRoZSBwcm92aWRlZCBhcnJheXMgdXNpbmdcbiAgICAgKiBzdHJpY3QgZXF1YWxpdHkgZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheV0gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzEsIDIsIDNdLCBbNSwgMiwgMSwgNF0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDUsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pb24oKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXkgdXNpbmcgc3RyaWN0IGVxdWFsaXR5XG4gICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiB0aGUgYXJyYXkgaXMgc29ydGVkLCBwcm92aWRpbmdcbiAgICAgKiBgdHJ1ZWAgZm9yIGBpc1NvcnRlZGAgd2lsbCB1c2UgYSBmYXN0ZXIgYWxnb3JpdGhtLiBJZiBhIGNhbGxiYWNrIGlzIHByb3ZpZGVkXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgaXMgcGFzc2VkIHRocm91Z2ggdGhlIGNhbGxiYWNrIGJlZm9yZSB1bmlxdWVuZXNzXG4gICAgICogaXMgY29tcHV0ZWQuIFRoZSBjYWxsYmFjayBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy5wbHVja1wiIHN0eWxlXG4gICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgY2FsbGJhY2tgIHRoZSBjcmVhdGVkIFwiXy53aGVyZVwiIHN0eWxlIGNhbGxiYWNrXG4gICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCxcbiAgICAgKiBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW5pcXVlXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU29ydGVkPWZhbHNlXSBBIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBgYXJyYXlgIGlzIHNvcnRlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHByb3ZpZGVkIGl0IHdpbGwgYmUgdXNlZFxuICAgICAqICB0byBjcmVhdGUgYSBcIl8ucGx1Y2tcIiBvciBcIl8ud2hlcmVcIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIGR1cGxpY2F0ZS12YWx1ZS1mcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzEsIDIsIDEsIDMsIDFdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udW5pcShbMSwgMSwgMiwgMiwgM10sIHRydWUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy51bmlxKFsnQScsICdiJywgJ0MnLCAnYScsICdCJywgJ2MnXSwgZnVuY3Rpb24obGV0dGVyKSB7IHJldHVybiBsZXR0ZXIudG9Mb3dlckNhc2UoKTsgfSk7XG4gICAgICogLy8gPT4gWydBJywgJ2InLCAnQyddXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzEsIDIuNSwgMywgMS41LCAyLCAzLjVdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuZmxvb3IobnVtKTsgfSwgTWF0aCk7XG4gICAgICogLy8gPT4gWzEsIDIuNSwgM11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIFwiXy5wbHVja1wiIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8udW5pcShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSwgaXNTb3J0ZWQsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAvLyBqdWdnbGUgYXJndW1lbnRzXG4gICAgICBpZiAodHlwZW9mIGlzU29ydGVkICE9ICdib29sZWFuJyAmJiBpc1NvcnRlZCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXNBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2sgPSAodHlwZW9mIGlzU29ydGVkICE9ICdmdW5jdGlvbicgJiYgdGhpc0FyZyAmJiB0aGlzQXJnW2lzU29ydGVkXSA9PT0gYXJyYXkpID8gbnVsbCA6IGlzU29ydGVkO1xuICAgICAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBwcm92aWRlZCB2YWx1ZXMgdXNpbmcgc3RyaWN0IGVxdWFsaXR5IGZvclxuICAgICAqIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5c1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzEsIDIsIDEsIDAsIDMsIDEsIDRdLCAwLCAxKTtcbiAgICAgKiAvLyA9PiBbMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3aXRob3V0KGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZURpZmZlcmVuY2UoYXJyYXksIHNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgc3ltbWV0cmljIGRpZmZlcmVuY2Ugb2YgdGhlIHByb3ZpZGVkIGFycmF5cy5cbiAgICAgKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheXNcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXldIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMiwgM10sIFs1LCAyLCAxLCA0XSk7XG4gICAgICogLy8gPT4gWzMsIDUsIDRdXG4gICAgICpcbiAgICAgKiBfLnhvcihbMSwgMiwgNV0sIFsyLCAzLCA1XSwgWzMsIDQsIDVdKTtcbiAgICAgKiAvLyA9PiBbMSwgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB4b3IoKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICBpZiAoaXNBcnJheShhcnJheSkgfHwgaXNBcmd1bWVudHMoYXJyYXkpKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdFxuICAgICAgICAgICAgPyBiYXNlVW5pcShiYXNlRGlmZmVyZW5jZShyZXN1bHQsIGFycmF5KS5jb25jYXQoYmFzZURpZmZlcmVuY2UoYXJyYXksIHJlc3VsdCkpKVxuICAgICAgICAgICAgOiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCB8fCBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW56aXBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5XSBBcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snZnJlZCcsIDMwLCB0cnVlXSwgWydiYXJuZXknLCA0MCwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcCgpIHtcbiAgICAgIHZhciBhcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzIDogYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBtYXgocGx1Y2soYXJyYXksICdsZW5ndGgnKSkgOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHBsdWNrKGFycmF5LCBpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIGZyb20gYXJyYXlzIG9mIGBrZXlzYCBhbmQgYHZhbHVlc2AuIFByb3ZpZGVcbiAgICAgKiBlaXRoZXIgYSBzaW5nbGUgdHdvIGRpbWVuc2lvbmFsIGFycmF5LCBpLmUuIGBbW2tleTEsIHZhbHVlMV0sIFtrZXkyLCB2YWx1ZTJdXWBcbiAgICAgKiBvciB0d28gYXJyYXlzLCBvbmUgb2YgYGtleXNgIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBvYmplY3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzXG4gICAgICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUgYXJyYXkgb2Yga2V5cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBnaXZlbiBrZXlzIGFuZFxuICAgICAqICBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDMwLCAnYmFybmV5JzogNDAgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGtleXMgPyBrZXlzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIGlmICghdmFsdWVzICYmIGxlbmd0aCAmJiAhaXNBcnJheShrZXlzWzBdKSkge1xuICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkpIHtcbiAgICAgICAgICByZXN1bHRba2V5WzBdXSA9IGtleVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGBmdW5jYCwgd2l0aCAgdGhlIGB0aGlzYCBiaW5kaW5nIGFuZFxuICAgICAqIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgb25seSBhZnRlciBiZWluZyBjYWxsZWQgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJlZm9yZVxuICAgICAqICBgZnVuY2AgaXMgZXhlY3V0ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdEb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ0RvbmUgc2F2aW5nIScsIGFmdGVyIGFsbCBzYXZlcyBoYXZlIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgcHJlcGVuZHMgYW55IGFkZGl0aW9uYWwgYGJpbmRgIGFyZ3VtZW50cyB0byB0aG9zZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBib3VuZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMubmFtZTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZnVuYyA9IF8uYmluZChmdW5jLCB7ICduYW1lJzogJ2ZyZWQnIH0sICdoaScpO1xuICAgICAqIGZ1bmMoKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiaW5kKGZ1bmMsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMlxuICAgICAgICA/IGNyZWF0ZVdyYXBwZXIoZnVuYywgMTcsIHNsaWNlKGFyZ3VtZW50cywgMiksIG51bGwsIHRoaXNBcmcpXG4gICAgICAgIDogY3JlYXRlV3JhcHBlcihmdW5jLCAxLCBudWxsLCBudWxsLCB0aGlzQXJnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLiBNZXRob2QgbmFtZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXNcbiAgICAgKiBvZiBtZXRob2QgbmFtZXMuIElmIG5vIG1ldGhvZCBuYW1lcyBhcmUgcHJvdmlkZWQgYWxsIHRoZSBmdW5jdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAgd2lsbCBiZSBib3VuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uc3RyaW5nfSBbbWV0aG9kTmFtZV0gVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG9cbiAgICAgKiAgYmluZCwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgbWV0aG9kIG5hbWVzIG9yIGFycmF5cyBvZiBtZXRob2QgbmFtZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnb25DbGljayc6IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7IH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcpO1xuICAgICAqIGpRdWVyeSgnI2RvY3MnKS5vbignY2xpY2snLCB2aWV3Lm9uQ2xpY2spO1xuICAgICAqIC8vID0+IGxvZ3MgJ2NsaWNrZWQgZG9jcycsIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmluZEFsbChvYmplY3QpIHtcbiAgICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYmFzZUZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCBmYWxzZSwgMSkgOiBmdW5jdGlvbnMob2JqZWN0KSxcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBjcmVhdGVXcmFwcGVyKG9iamVjdFtrZXldLCAxLCBudWxsLCBudWxsLCBvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gXG4gICAgICogYW5kIHByZXBlbmRzIGFueSBhZGRpdGlvbmFsIGBiaW5kS2V5YCBhcmd1bWVudHMgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGJvdW5kXG4gICAgICogZnVuY3Rpb24uIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG9cbiAgICAgKiByZWZlcmVuY2UgbWV0aG9kcyB0aGF0IHdpbGwgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC5cbiAgICAgKiBTZWUgaHR0cDovL21pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmddIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICduYW1lJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy5uYW1lO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGZ1bmMoKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMubmFtZSArICchJztcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZnVuYygpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJpbmRLZXkob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMlxuICAgICAgICA/IGNyZWF0ZVdyYXBwZXIoa2V5LCAxOSwgc2xpY2UoYXJndW1lbnRzLCAyKSwgbnVsbCwgb2JqZWN0KVxuICAgICAgICA6IGNyZWF0ZVdyYXBwZXIoa2V5LCAzLCBudWxsLCBudWxsLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zLFxuICAgICAqIHdoZXJlIGVhY2ggZnVuY3Rpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICAgICAqIEZvciBleGFtcGxlLCBjb21wb3NpbmcgdGhlIGZ1bmN0aW9ucyBgZigpYCwgYGcoKWAsIGFuZCBgaCgpYCBwcm9kdWNlcyBgZihnKGgoKSkpYC5cbiAgICAgKiBFYWNoIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjb21wb3NlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBbZnVuY10gRnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFsTmFtZU1hcCA9IHtcbiAgICAgKiAgICdwZWJibGVzJzogJ3BlbmVsb3BlJ1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZm9ybWF0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAqICAgbmFtZSA9IHJlYWxOYW1lTWFwW25hbWUudG9Mb3dlckNhc2UoKV0gfHwgbmFtZTtcbiAgICAgKiAgIHJldHVybiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihmb3JtYXR0ZWQpIHtcbiAgICAgKiAgIHJldHVybiAnSGl5YSAnICsgZm9ybWF0dGVkICsgJyEnO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgd2VsY29tZSA9IF8uY29tcG9zZShncmVldCwgZm9ybWF0KTtcbiAgICAgKiB3ZWxjb21lKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ0hpeWEgUGVuZWxvcGUhJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gICAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgbGVuZ3RoID0gZnVuY3MubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmNzW2xlbmd0aF0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzID0gW2Z1bmNzW2xlbmd0aF0uYXBwbHkodGhpcywgYXJncyldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0cyBvbmUgb3IgbW9yZSBhcmd1bWVudHMgb2YgYGZ1bmNgIHRoYXQgd2hlblxuICAgICAqIGludm9rZWQgZWl0aGVyIGV4ZWN1dGVzIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYWxsIGBmdW5jYCBhcmd1bWVudHNcbiAgICAgKiBoYXZlIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIG9yIG1vcmUgb2YgdGhlXG4gICAgICogcmVtYWluaW5nIGBmdW5jYCBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBjYW4gYmUgc3BlY2lmaWVkXG4gICAgICogaWYgYGZ1bmMubGVuZ3RoYCBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhhICsgYiArIGMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gNlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5KSB7XG4gICAgICBhcml0eSA9IHR5cGVvZiBhcml0eSA9PSAnbnVtYmVyJyA/IGFyaXR5IDogKCthcml0eSB8fCBmdW5jLmxlbmd0aCk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLCA0LCBudWxsLCBudWxsLCBudWxsLCBhcml0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWxheSB0aGUgZXhlY3V0aW9uIG9mIGBmdW5jYCB1bnRpbCBhZnRlclxuICAgICAqIGB3YWl0YCBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGludm9rZWQuXG4gICAgICogUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvblxuICAgICAqIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gU3Vic2VxdWVudCBjYWxsc1xuICAgICAqIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC5cbiAgICAgKlxuICAgICAqIE5vdGU6IElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAgYGZ1bmNgIHdpbGwgYmUgY2FsbGVkXG4gICAgICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpc1xuICAgICAqIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBjYWxsZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXhcbiAgICAgKiB2YXIgbGF6eUxheW91dCA9IF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApO1xuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBsYXp5TGF5b3V0KTtcbiAgICAgKlxuICAgICAqIC8vIGV4ZWN1dGUgYHNlbmRNYWlsYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzXG4gICAgICogalF1ZXJ5KCcjcG9zdGJveCcpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIGVuc3VyZSBgYmF0Y2hMb2dgIGlzIGV4ZWN1dGVkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzXG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7XG4gICAgICogICAnbWF4V2FpdCc6IDEwMDBcbiAgICAgKiB9LCBmYWxzZSk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MsXG4gICAgICAgICAgbWF4VGltZW91dElkLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdGFtcCxcbiAgICAgICAgICB0aGlzQXJnLFxuICAgICAgICAgIHRpbWVvdXRJZCxcbiAgICAgICAgICB0cmFpbGluZ0NhbGwsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDAsXG4gICAgICAgICAgbWF4V2FpdCA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICB3YWl0ID0gbmF0aXZlTWF4KDAsIHdhaXQpIHx8IDA7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgbGVhZGluZyA9IHRydWU7XG4gICAgICAgIHRyYWlsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSBvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heFdhaXQgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucyAmJiAobmF0aXZlTWF4KHdhaXQsIG9wdGlvbnMubWF4V2FpdCkgfHwgMCk7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGRlbGF5ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93KCkgLSBzdGFtcCk7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgICAgIGlmIChtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChtYXhUaW1lb3V0SWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaXNDYWxsZWQgPSB0cmFpbGluZ0NhbGw7XG4gICAgICAgICAgbWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgbGFzdENhbGxlZCA9IG5vdygpO1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICghdGltZW91dElkICYmICFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgYXJncyA9IHRoaXNBcmcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsIHJlbWFpbmluZyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtYXhEZWxheWVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhUaW1lb3V0SWQgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0cmFpbGluZyB8fCAobWF4V2FpdCAhPT0gd2FpdCkpIHtcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gbm93KCk7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXRJZCAmJiAhbWF4VGltZW91dElkKSB7XG4gICAgICAgICAgICBhcmdzID0gdGhpc0FyZyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN0YW1wID0gbm93KCk7XG4gICAgICAgIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cmFpbGluZyAmJiAodGltZW91dElkIHx8ICFsZWFkaW5nKTtcblxuICAgICAgICBpZiAobWF4V2FpdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgbGVhZGluZ0NhbGwgPSBsZWFkaW5nICYmICF0aW1lb3V0SWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFtYXhUaW1lb3V0SWQgJiYgIWxlYWRpbmcpIHtcbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlbWFpbmluZyA9IG1heFdhaXQgLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKSxcbiAgICAgICAgICAgICAgaXNDYWxsZWQgPSByZW1haW5pbmcgPD0gMDtcblxuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgaWYgKG1heFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICBtYXhUaW1lb3V0SWQgPSBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIG1heFRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWF4RGVsYXllZCwgcmVtYWluaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmIHRpbWVvdXRJZCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aW1lb3V0SWQgJiYgd2FpdCAhPT0gbWF4V2FpdCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZGVsYXllZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XG4gICAgICAgICAgaXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmICF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCkge1xuICAgICAgICAgIGFyZ3MgPSB0aGlzQXJnID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgZXhlY3V0aW5nIHRoZSBgZnVuY2AgZnVuY3Rpb24gdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC5cbiAgICAgKiBBZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnXSBBcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHsgY29uc29sZS5sb2codGV4dCk7IH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vIGxvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgb3IgbW9yZSBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZlcihmdW5jKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBgZnVuY2AgZnVuY3Rpb24gYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiB3aWxsIGJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0IGlzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgZXhlY3V0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7IGNvbnNvbGUubG9nKHRleHQpOyB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBsb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbGF5KGZ1bmMsIHdhaXQpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDIpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCBpdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdFxuICAgICAqIGJhc2VkIG9uIHRoZSBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGVcbiAgICAgKiBmaXJzdCBhcmd1bWVudCBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgY2FjaGUga2V5LlxuICAgICAqIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIFRoZSByZXN1bHQgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gQSBmdW5jdGlvbiB1c2VkIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXppbmcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmaWJvbmFjY2kgPSBfLm1lbW9pemUoZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gPCAyID8gbiA6IGZpYm9uYWNjaShuIC0gMSkgKyBmaWJvbmFjY2kobiAtIDIpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmlib25hY2NpKDkpXG4gICAgICogLy8gPT4gMzRcbiAgICAgKlxuICAgICAqIHZhciBkYXRhID0ge1xuICAgICAqICAgJ2ZyZWQnOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyBtb2RpZnlpbmcgdGhlIHJlc3VsdCBjYWNoZVxuICAgICAqIHZhciBnZXQgPSBfLm1lbW9pemUoZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gZGF0YVtuYW1lXTsgfSwgXy5pZGVudGl0eSk7XG4gICAgICogZ2V0KCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqXG4gICAgICogZ2V0LmNhY2hlLnBlYmJsZXMubmFtZSA9ICdwZW5lbG9wZSc7XG4gICAgICogZ2V0KCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdwZW5lbG9wZScsICdhZ2UnOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBtZW1vaXplZC5jYWNoZSxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleVByZWZpeCArIGFyZ3VtZW50c1swXTtcblxuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwga2V5KVxuICAgICAgICAgID8gY2FjaGVba2V5XVxuICAgICAgICAgIDogKGNhY2hlW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSB7fTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGV4ZWN1dGUgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxscyB0b1xuICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNhbGwuIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWRcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyBgaW5pdGlhbGl6ZWAgZXhlY3V0ZXMgYGNyZWF0ZUFwcGxpY2F0aW9uYCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICB2YXIgcmFuLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyYW4pIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICAvLyBjbGVhciB0aGUgYGZ1bmNgIHZhcmlhYmxlIHNvIHRoZSBmdW5jdGlvbiBtYXkgYmUgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICAgICAgZnVuYyA9IG51bGw7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyBgZnVuY2Agd2l0aCBhbnkgYWRkaXRpb25hbFxuICAgICAqIGBwYXJ0aWFsYCBhcmd1bWVudHMgcHJlcGVuZGVkIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uIFRoaXNcbiAgICAgKiBtZXRob2QgaXMgc2ltaWxhciB0byBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgbmFtZSkgeyByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lOyB9O1xuICAgICAqIHZhciBoaSA9IF8ucGFydGlhbChncmVldCwgJ2hpJyk7XG4gICAgICogaGkoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJ0aWFsKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIDE2LCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IGBwYXJ0aWFsYCBhcmd1bWVudHMgYXJlXG4gICAgICogYXBwZW5kZWQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ10gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHNEZWVwID0gXy5wYXJ0aWFsUmlnaHQoXy5tZXJnZSwgXy5kZWZhdWx0cyk7XG4gICAgICpcbiAgICAgKiB2YXIgb3B0aW9ucyA9IHtcbiAgICAgKiAgICd2YXJpYWJsZSc6ICdkYXRhJyxcbiAgICAgKiAgICdpbXBvcnRzJzogeyAnanEnOiAkIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogZGVmYXVsdHNEZWVwKG9wdGlvbnMsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG4gICAgICpcbiAgICAgKiBvcHRpb25zLnZhcmlhYmxlXG4gICAgICogLy8gPT4gJ2RhdGEnXG4gICAgICpcbiAgICAgKiBvcHRpb25zLmltcG9ydHNcbiAgICAgKiAvLyA9PiB7ICdfJzogXywgJ2pxJzogJCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFydGlhbFJpZ2h0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIDMyLCBudWxsLCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBleGVjdXRlZCwgd2lsbCBvbmx5IGNhbGwgdGhlIGBmdW5jYCBmdW5jdGlvblxuICAgICAqIGF0IG1vc3Qgb25jZSBwZXIgZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0b1xuICAgICAqIGluZGljYXRlIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlXG4gICAgICogb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbFxuICAgICAqIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBjYWxsLlxuICAgICAqXG4gICAgICogTm90ZTogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCBgZnVuY2Agd2lsbCBiZSBjYWxsZWRcbiAgICAgKiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGlzXG4gICAgICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGV4ZWN1dGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmdcbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKTtcbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIGV4ZWN1dGUgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlc1xuICAgICAqIGpRdWVyeSgnLmludGVyYWN0aXZlJykub24oJ2NsaWNrJywgXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHtcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGxlYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZU9wdGlvbnMubGVhZGluZyA9IGxlYWRpbmc7XG4gICAgICBkZWJvdW5jZU9wdGlvbnMubWF4V2FpdCA9IHdhaXQ7XG4gICAgICBkZWJvdW5jZU9wdGlvbnMudHJhaWxpbmcgPSB0cmFpbGluZztcblxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGRlYm91bmNlT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byB0aGUgd3JhcHBlciBmdW5jdGlvbiBhcyBpdHNcbiAgICAgKiBmaXJzdCBhcmd1bWVudC4gQWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBpcyBleGVjdXRlZCB3aXRoXG4gICAgICogdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uc1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdGcmVkLCBXaWxtYSwgJiBQZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPkZyZWQsIFdpbG1hLCAmYW1wOyBQZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcHBlcih3cmFwcGVyLCAxNiwgW3ZhbHVlXSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ25hbWUnOiAnZnJlZCcgfTtcbiAgICAgKiB2YXIgZ2V0dGVyID0gXy5jb25zdGFudChvYmplY3QpO1xuICAgICAqIGdldHRlcigpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSBjYWxsYmFjayBib3VuZCB0byBhbiBvcHRpb25hbCBgdGhpc0FyZ2AuIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5XG4gICAgICogbmFtZSB0aGUgY3JlYXRlZCBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKiBJZiBgZnVuY2AgaXMgYW4gb2JqZWN0IHRoZSBjcmVhdGVkIGNhbGxiYWNrIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHNcbiAgICAgKiB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnQgb2JqZWN0IHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCB3aWxsIHJldHVybiBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9aWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJnQ291bnRdIFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRoZSBjYWxsYmFjayBhY2NlcHRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHdyYXAgdG8gY3JlYXRlIGN1c3RvbSBjYWxsYmFjayBzaG9ydGhhbmRzXG4gICAgICogXy5jcmVhdGVDYWxsYmFjayA9IF8ud3JhcChfLmNyZWF0ZUNhbGxiYWNrLCBmdW5jdGlvbihmdW5jLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAqICAgdmFyIG1hdGNoID0gL14oLis/KV9fKFtnbF10KSguKykkLy5leGVjKGNhbGxiYWNrKTtcbiAgICAgKiAgIHJldHVybiAhbWF0Y2ggPyBmdW5jKGNhbGxiYWNrLCB0aGlzQXJnKSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgICByZXR1cm4gbWF0Y2hbMl0gPT0gJ2d0JyA/IG9iamVjdFttYXRjaFsxXV0gPiBtYXRjaFszXSA6IG9iamVjdFttYXRjaFsxXV0gPCBtYXRjaFszXTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihjaGFyYWN0ZXJzLCAnYWdlX19ndDM4Jyk7XG4gICAgICogLy8gPT4gW3sgJ25hbWUnOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGFyZ0NvdW50KSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBmdW5jO1xuICAgICAgaWYgKGZ1bmMgPT0gbnVsbCB8fCB0eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDcmVhdGVDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCk7XG4gICAgICB9XG4gICAgICAvLyBoYW5kbGUgXCJfLnBsdWNrXCIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAgaWYgKHR5cGUgIT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5KGZ1bmMpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0ga2V5cyhmdW5jKSxcbiAgICAgICAgICBrZXkgPSBwcm9wc1swXSxcbiAgICAgICAgICBhID0gZnVuY1trZXldO1xuXG4gICAgICAvLyBoYW5kbGUgXCJfLndoZXJlXCIgc3R5bGUgY2FsbGJhY2sgc2hvcnRoYW5kc1xuICAgICAgaWYgKHByb3BzLmxlbmd0aCA9PSAxICYmIGEgPT09IGEgJiYgIWlzT2JqZWN0KGEpKSB7XG4gICAgICAgIC8vIGZhc3QgcGF0aCB0aGUgY29tbW9uIGNhc2Ugb2YgcHJvdmlkaW5nIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlXG4gICAgICAgIC8vIHByb3BlcnR5IGNvbnRhaW5pbmcgYSBwcmltaXRpdmUgdmFsdWVcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIHZhciBiID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgcmV0dXJuIGEgPT09IGIgJiYgKGEgIT09IDAgfHwgKDEgLyBhID09IDEgLyBiKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBiYXNlSXNFcXVhbChvYmplY3RbcHJvcHNbbGVuZ3RoXV0sIGZ1bmNbcHJvcHNbbGVuZ3RoXV0sIG51bGwsIHRydWUpKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIGAmYCwgYDxgLCBgPmAsIGBcImAsIGFuZCBgJ2AgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ0ZyZWQsIFdpbG1hLCAmIFBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCwgV2lsbWEsICZhbXA7IFBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IHByb3ZpZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24gbWV0aG9kcyB3aWxsIGJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIHRoZSBmdW5jdGlvbnMgYWRkZWQgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ2NhcGl0YWxpemUnOiBjYXBpdGFsaXplIH0pO1xuICAgICAqIF8uY2FwaXRhbGl6ZSgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXygnZnJlZCcpLmNhcGl0YWxpemUoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy5taXhpbih7ICdjYXBpdGFsaXplJzogY2FwaXRhbGl6ZSB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS5jYXBpdGFsaXplKCk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjaGFpbiA9IHRydWUsXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBzb3VyY2UgJiYgZnVuY3Rpb25zKHNvdXJjZSk7XG5cbiAgICAgIGlmICghc291cmNlIHx8ICghb3B0aW9ucyAmJiAhbWV0aG9kTmFtZXMubGVuZ3RoKSkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBjdG9yID0gbG9kYXNoV3JhcHBlcjtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSBsb2Rhc2g7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gZnVuY3Rpb25zKHNvdXJjZSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY2hhaW4gPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGNoYWluID0gb3B0aW9ucy5jaGFpbjtcbiAgICAgIH1cbiAgICAgIHZhciBjdG9yID0gb2JqZWN0LFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24oY3Rvcik7XG5cbiAgICAgIGZvckVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBvYmplY3RbbWV0aG9kTmFtZV0gPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBbdmFsdWVdO1xuXG4gICAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShvYmplY3QsIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gcmVzdWx0ICYmIGlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgY3RvcihyZXN1bHQpO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlICdfJyB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBjb250ZXh0Ll8gPSBvbGREYXNoO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBuby1vcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICduYW1lJzogJ2ZyZWQnIH07XG4gICAgICogXy5ub29wKG9iamVjdCkgPT09IHVuZGVmaW5lZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIG5vIG9wZXJhdGlvbiBwZXJmb3JtZWRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBVbml4IGVwb2NoXG4gICAgICogKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzdGFtcCA9IF8ubm93KCk7XG4gICAgICogXy5kZWZlcihmdW5jdGlvbigpIHsgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTsgfSk7XG4gICAgICogLy8gPT4gbG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGlzTmF0aXZlKG5vdyA9IERhdGUubm93KSAmJiBub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC5cbiAgICAgKiBJZiBgcmFkaXhgIGlzIGB1bmRlZmluZWRgIG9yIGAwYCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyB0aGVcbiAgICAgKiBgdmFsdWVgIGlzIGEgaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGF2b2lkcyBkaWZmZXJlbmNlcyBpbiBuYXRpdmUgRVMzIGFuZCBFUzUgYHBhcnNlSW50YFxuICAgICAqIGltcGxlbWVudGF0aW9ucy4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmlvLyNFLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFyc2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeF0gVGhlIHJhZGl4IHVzZWQgdG8gaW50ZXJwcmV0IHRoZSB2YWx1ZSB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBuZXcgaW50ZWdlciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICovXG4gICAgdmFyIHBhcnNlSW50ID0gbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZSArICcwOCcpID09IDggPyBuYXRpdmVQYXJzZUludCA6IGZ1bmN0aW9uKHZhbHVlLCByYWRpeCkge1xuICAgICAgLy8gRmlyZWZveCA8IDIxIGFuZCBPcGVyYSA8IDE1IGZvbGxvdyB0aGUgRVMzIHNwZWNpZmllZCBpbXBsZW1lbnRhdGlvbiBvZiBgcGFyc2VJbnRgXG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoaXNTdHJpbmcodmFsdWUpID8gdmFsdWUucmVwbGFjZShyZUxlYWRpbmdTcGFjZXNBbmRaZXJvcywgJycpIDogdmFsdWUsIHJhZGl4IHx8IDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgXCJfLnBsdWNrXCIgc3R5bGUgZnVuY3Rpb24sIHdoaWNoIHJldHVybnMgdGhlIGBrZXlgIHZhbHVlIG9mIGFcbiAgICAgKiBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gcmV0cmlldmUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBjaGFyYWN0ZXJzID0gW1xuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIGdldE5hbWUgPSBfLnByb3BlcnR5KCduYW1lJyk7XG4gICAgICpcbiAgICAgKiBfLm1hcChjaGFyYWN0ZXJzLCBnZXROYW1lKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KGNoYXJhY3RlcnMsIGdldE5hbWUpO1xuICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KGtleSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCAoaW5jbHVzaXZlKS4gSWYgb25seSBvbmVcbiAgICAgKiBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlciB3aWxsIGJlXG4gICAgICogcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgdHJ1ZXkgb3IgZWl0aGVyIGBtaW5gIG9yIGBtYXhgIGFyZSBmbG9hdHMgYVxuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlciB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbj0wXSBUaGUgbWluaW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZz1mYWxzZV0gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCBmbG9hdGluZykge1xuICAgICAgdmFyIG5vTWluID0gbWluID09IG51bGwsXG4gICAgICAgICAgbm9NYXggPSBtYXggPT0gbnVsbDtcblxuICAgICAgaWYgKGZsb2F0aW5nID09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtaW4gPT0gJ2Jvb2xlYW4nICYmIG5vTWF4KSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBtaW47XG4gICAgICAgICAgbWluID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbm9NYXggJiYgdHlwZW9mIG1heCA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IG1heDtcbiAgICAgICAgICBub01heCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub01pbiAmJiBub01heCkge1xuICAgICAgICBtYXggPSAxO1xuICAgICAgfVxuICAgICAgbWluID0gK21pbiB8fCAwO1xuICAgICAgaWYgKG5vTWF4KSB7XG4gICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heCA9ICttYXggfHwgMDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBtaW4gJSAxIHx8IG1heCAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihtaW4gKyAocmFuZCAqIChtYXggLSBtaW4gKyBwYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsnJykubGVuZ3RoIC0gMSkpKSksIG1heCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShtaW4sIG1heCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIG9mIHByb3BlcnR5IGBrZXlgIG9uIGBvYmplY3RgLiBJZiBga2V5YCBpcyBhIGZ1bmN0aW9uXG4gICAgICogaXQgd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBvYmplY3RgIGFuZCBpdHMgcmVzdWx0IHJldHVybmVkLFxuICAgICAqIGVsc2UgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHJldHVybmVkLiBJZiBgb2JqZWN0YCBpcyBmYWxzZXkgdGhlbiBgdW5kZWZpbmVkYFxuICAgICAqIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2NoZWVzZSc6ICdjcnVtcGV0cycsXG4gICAgICogICAnc3R1ZmYnOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgcmV0dXJuICdub25zZW5zZSc7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2NoZWVzZScpO1xuICAgICAqIC8vID0+ICdjcnVtcGV0cydcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ3N0dWZmJyk7XG4gICAgICogLy8gPT4gJ25vbnNlbnNlJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpID8gb2JqZWN0W2tleV0oKSA6IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgbWljcm8tdGVtcGxhdGluZyBtZXRob2QgdGhhdCBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXNcbiAgICAgKiB3aGl0ZXNwYWNlLCBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCwgYF8udGVtcGxhdGVgIHV0aWxpemVzIHNvdXJjZVVSTHMgZm9yIGVhc2llclxuICAgICAqIGRlYnVnZ2luZy4gU2VlIGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmxcbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlOlxuICAgICAqIGh0dHA6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHNcbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZTpcbiAgICAgKiBodHRwOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vc3RhYmxlL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwuaHRtbFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBkYXRhIG9iamVjdCB1c2VkIHRvIHBvcHVsYXRlIHRoZSB0ZXh0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGVdIFRoZSBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGVdIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzXSBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGxvY2FsIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGVdIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc291cmNlVVJMXSBUaGUgc291cmNlVVJMIG9mIHRoZSB0ZW1wbGF0ZSdzIGNvbXBpbGVkIHNvdXJjZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ZhcmlhYmxlXSBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258c3RyaW5nfSBSZXR1cm5zIGEgY29tcGlsZWQgZnVuY3Rpb24gd2hlbiBubyBgZGF0YWAgb2JqZWN0XG4gICAgICogIGlzIGdpdmVuLCBlbHNlIGl0IHJldHVybnMgdGhlIGludGVycG9sYXRlZCB0ZXh0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSBuYW1lICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAnbmFtZSc6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgSFRNTCBpbiBkYXRhIHByb3BlcnR5IHZhbHVlc1xuICAgICAqIF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nLCB7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGdlbmVyYXRlIEhUTUxcbiAgICAgKiB2YXIgbGlzdCA9ICc8JSBfLmZvckVhY2gocGVvcGxlLCBmdW5jdGlvbihuYW1lKSB7ICU+PGxpPjwlLSBuYW1lICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIF8udGVtcGxhdGUobGlzdCwgeyAncGVvcGxlJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIEVTNiBkZWxpbWl0ZXIgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdGhlIGRlZmF1bHQgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlclxuICAgICAqIF8udGVtcGxhdGUoJ2hlbGxvICR7IG5hbWUgfScsIHsgJ25hbWUnOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVyc1xuICAgICAqIF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyBuYW1lKTsgJT4hJywgeyAnbmFtZSc6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVyc1xuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICAgKiAgICdpbnRlcnBvbGF0ZSc6IC97eyhbXFxzXFxTXSs/KX19L2dcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy50ZW1wbGF0ZSgnaGVsbG8ge3sgbmFtZSB9fSEnLCB7ICduYW1lJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGpRdWVyeVxuICAgICAqIHZhciBsaXN0ID0gJzwlIGpxLmVhY2gocGVvcGxlLCBmdW5jdGlvbihuYW1lKSB7ICU+PGxpPjwlLSBuYW1lICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIF8udGVtcGxhdGUobGlzdCwgeyAncGVvcGxlJzogWydmcmVkJywgJ2Jhcm5leSddIH0sIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IG5hbWUgJT4nLCBudWxsLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gZmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3RvclxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEubmFtZSAlPiEnLCBudWxsLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqICAgdmFyIF9fdCwgX19wID0gJycsIF9fZSA9IF8uZXNjYXBlO1xuICAgICAqICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEubmFtZSApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqICAgcmV0dXJuIF9fcDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgYSBzdGFjayB0cmFjZVxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKGN3ZCwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZSh0ZXh0LCBkYXRhLCBvcHRpb25zKSB7XG4gICAgICAvLyBiYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nL1xuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qc1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVFxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG4gICAgICB0ZXh0ID0gU3RyaW5nKHRleHQgfHwgJycpO1xuXG4gICAgICAvLyBhdm9pZCBtaXNzaW5nIGRlcGVuZGVuY2llcyB3aGVuIGBpdGVyYXRvclRlbXBsYXRlYCBpcyBub3QgZGVmaW5lZFxuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRzKHt9LCBvcHRpb25zLCBzZXR0aW5ncyk7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gZGVmYXVsdHMoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSB2YWx1ZXMoaW1wb3J0cyk7XG5cbiAgICAgIHZhciBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBjb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXJcbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIHRleHQucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gZXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW5ub3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzXG4gICAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIHJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgcmVxdWlyZXMgcmV0dXJuaW5nIHRoZSBgbWF0Y2hgXG4gICAgICAgIC8vIHN0cmluZyBpbiBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBpZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQsIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluXG4gICAgICB2YXIgdmFyaWFibGUgPSBvcHRpb25zLnZhcmlhYmxlLFxuICAgICAgICAgIGhhc1ZhcmlhYmxlID0gdmFyaWFibGU7XG5cbiAgICAgIGlmICghaGFzVmFyaWFibGUpIHtcbiAgICAgICAgdmFyaWFibGUgPSAnb2JqJztcbiAgICAgICAgc291cmNlID0gJ3dpdGggKCcgKyB2YXJpYWJsZSArICcpIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gY2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIGZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHlcbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgdmFyaWFibGUgKyAnKSB7XFxuJyArXG4gICAgICAgIChoYXNWYXJpYWJsZSA/ICcnIDogdmFyaWFibGUgKyAnIHx8ICgnICsgdmFyaWFibGUgKyAnID0ge30pO1xcbicpICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJywgX19lID0gXy5lc2NhcGVcIiArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsXG4gICAgICB2YXIgc291cmNlVVJMID0gJ1xcbi8qXFxuLy8jIHNvdXJjZVVSTD0nICsgKG9wdGlvbnMuc291cmNlVVJMIHx8ICcvbG9kYXNoL3RlbXBsYXRlL3NvdXJjZVsnICsgKHRlbXBsYXRlQ291bnRlcisrKSArICddJykgKyAnXFxuKi8nO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24oaW1wb3J0c0tleXMsICdyZXR1cm4gJyArIHNvdXJjZSArIHNvdXJjZVVSTCkuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQoZGF0YSk7XG4gICAgICB9XG4gICAgICAvLyBwcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2QsIGluXG4gICAgICAvLyBzdXBwb3J0ZWQgZW52aXJvbm1lbnRzLCBvciB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3JcbiAgICAgIC8vIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcyBkdXJpbmcgdGhlIGJ1aWxkIHByb2Nlc3NcbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjYWxsYmFjayBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0c1xuICAgICAqIG9mIGVhY2ggY2FsbGJhY2sgZXhlY3V0aW9uLiBUaGUgY2FsbGJhY2sgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBleGVjdXRlIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggYGNhbGxiYWNrYCBleGVjdXRpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBkaWNlUm9sbHMgPSBfLnRpbWVzKDMsIF8ucGFydGlhbChfLnJhbmRvbSwgMSwgNikpO1xuICAgICAqIC8vID0+IFszLCA2LCA0XVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBmdW5jdGlvbihuKSB7IG1hZ2UuY2FzdFNwZWxsKG4pOyB9KTtcbiAgICAgKiAvLyA9PiBjYWxscyBgbWFnZS5jYXN0U3BlbGwobilgIHRocmVlIHRpbWVzLCBwYXNzaW5nIGBuYCBvZiBgMGAsIGAxYCwgYW5kIGAyYCByZXNwZWN0aXZlbHlcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgZnVuY3Rpb24obikgeyB0aGlzLmNhc3Qobik7IH0sIG1hZ2UpO1xuICAgICAqIC8vID0+IGFsc28gY2FsbHMgYG1hZ2UuY2FzdFNwZWxsKG4pYCB0aHJlZSB0aW1lc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICBuID0gKG4gPSArbikgPiAtMSA/IG4gOiAwO1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICAgIGNhbGxiYWNrID0gYmFzZUNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAxKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FsbGJhY2soaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgIHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnRnJlZCwgQmFybmV5ICZhbXA7IFBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCwgQmFybmV5ICYgUGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHN0cmluZykucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIHByb3ZpZGVkIHRoZSBJRCB3aWxsIGJlIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4XSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIFN0cmluZyhwcmVmaXggPT0gbnVsbCA/ICcnIDogcHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB0aGF0IHdyYXBzIHRoZSBnaXZlbiB2YWx1ZSB3aXRoIGV4cGxpY2l0XG4gICAgICogbWV0aG9kIGNoYWluaW5nIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAnbmFtZSc6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICduYW1lJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF8uY2hhaW4oY2hhcmFjdGVycylcbiAgICAgKiAgICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgICAgLm1hcChmdW5jdGlvbihjaHIpIHsgcmV0dXJuIGNoci5uYW1lICsgJyBpcyAnICsgY2hyLmFnZTsgfSlcbiAgICAgKiAgICAgLmZpcnN0KClcbiAgICAgKiAgICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBuZXcgbG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgICB2YWx1ZS5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGludGVyY2VwdG9yYCB3aXRoIHRoZSBgdmFsdWVgIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBhbmQgdGhlblxuICAgICAqIHJldHVybnMgYHZhbHVlYC4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kXG4gICAgICogY2hhaW4gaW4gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpblxuICAgICAqIHRoZSBjaGFpbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDMsIDRdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7IGFycmF5LnBvcCgpOyB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIGV4cGxpY2l0IG1ldGhvZCBjaGFpbmluZyBvbiB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluaW5nXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgY2hhcmFjdGVycyA9IFtcbiAgICAgKiAgIHsgJ25hbWUnOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICduYW1lJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmdcbiAgICAgKiBfKGNoYXJhY3RlcnMpLmZpcnN0KCk7XG4gICAgICogLy8gPT4geyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gd2l0aCBleHBsaWNpdCBjaGFpbmluZ1xuICAgICAqIF8oY2hhcmFjdGVycykuY2hhaW4oKVxuICAgICAqICAgLmZpcnN0KClcbiAgICAgKiAgIC5waWNrKCdhZ2UnKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAnYWdlJzogMzYgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIHRoZSBgdG9TdHJpbmdgIHJlc3VsdCBvZiB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHRvU3RyaW5nXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmdcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVzdWx0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudG9TdHJpbmcoKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlT2ZcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBDaGFpbmluZ1xuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWVPZigpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZU9mKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX193cmFwcGVkX187XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBhZGQgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIHdoZW4gY2hhaW5pbmdcbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29tcG9zZSA9IGNvbXBvc2U7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmNyZWF0ZUNhbGxiYWNrID0gY3JlYXRlQ2FsbGJhY2s7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbmRleEJ5ID0gaW5kZXhCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLnBhaXJzID0gcGFpcnM7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5wbHVjayA9IHBsdWNrO1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLndoZXJlID0gd2hlcmU7XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcblxuICAgIC8vIGFkZCBhbGlhc2VzXG4gICAgbG9kYXNoLmNvbGxlY3QgPSBtYXA7XG4gICAgbG9kYXNoLmRyb3AgPSByZXN0O1xuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ247XG4gICAgbG9kYXNoLm1ldGhvZHMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLm9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guc2VsZWN0ID0gZmlsdGVyO1xuICAgIGxvZGFzaC50YWlsID0gcmVzdDtcbiAgICBsb2Rhc2gudW5pcXVlID0gdW5pcTtcbiAgICBsb2Rhc2gudW56aXAgPSB6aXA7XG5cbiAgICAvLyBhZGQgZnVuY3Rpb25zIHRvIGBsb2Rhc2gucHJvdG90eXBlYFxuICAgIG1peGluKGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIGFkZCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nXG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY29udGFpbnMgPSBjb250YWlucztcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG5cbiAgICAvLyBhZGQgYWxpYXNlc1xuICAgIGxvZGFzaC5hbGwgPSBldmVyeTtcbiAgICBsb2Rhc2guYW55ID0gc29tZTtcbiAgICBsb2Rhc2guZGV0ZWN0ID0gZmluZDtcbiAgICBsb2Rhc2guZmluZFdoZXJlID0gZmluZDtcbiAgICBsb2Rhc2guZm9sZGwgPSByZWR1Y2U7XG4gICAgbG9kYXNoLmZvbGRyID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLmluY2x1ZGUgPSBjb250YWlucztcbiAgICBsb2Rhc2guaW5qZWN0ID0gcmVkdWNlO1xuXG4gICAgbWl4aW4oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge31cbiAgICAgIGZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSwgZmFsc2UpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBhZGQgZnVuY3Rpb25zIGNhcGFibGUgb2YgcmV0dXJuaW5nIHdyYXBwZWQgYW5kIHVud3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZ1xuICAgIGxvZGFzaC5maXJzdCA9IGZpcnN0O1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuXG4gICAgLy8gYWRkIGFsaWFzZXNcbiAgICBsb2Rhc2gudGFrZSA9IGZpcnN0O1xuICAgIGxvZGFzaC5oZWFkID0gZmlyc3Q7XG5cbiAgICBmb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2FsbGJhY2thYmxlID0gbWV0aG9kTmFtZSAhPT0gJ3NhbXBsZSc7XG4gICAgICBpZiAoIWxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXT0gZnVuY3Rpb24obiwgZ3VhcmQpIHtcbiAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYyh0aGlzLl9fd3JhcHBlZF9fLCBuLCBndWFyZCk7XG5cbiAgICAgICAgICByZXR1cm4gIWNoYWluQWxsICYmIChuID09IG51bGwgfHwgKGd1YXJkICYmICEoY2FsbGJhY2thYmxlICYmIHR5cGVvZiBuID09ICdmdW5jdGlvbicpKSlcbiAgICAgICAgICAgID8gcmVzdWx0XG4gICAgICAgICAgICA6IG5ldyBsb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9ICcyLjQuMSc7XG5cbiAgICAvLyBhZGQgXCJDaGFpbmluZ1wiIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlclxuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b1N0cmluZyA9IHdyYXBwZXJUb1N0cmluZztcbiAgICBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlT2Y7XG4gICAgbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gd3JhcHBlclZhbHVlT2Y7XG5cbiAgICAvLyBhZGQgYEFycmF5YCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlc1xuICAgIGJhc2VFYWNoKFsnam9pbicsICdwb3AnLCAnc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVJlZlttZXRob2ROYW1lXTtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMuX193cmFwcGVkX18sIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgcmV0dXJuIGNoYWluQWxsXG4gICAgICAgICAgPyBuZXcgbG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKVxuICAgICAgICAgIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIGFkZCBgQXJyYXlgIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGUgZXhpc3Rpbmcgd3JhcHBlZCB2YWx1ZVxuICAgIGJhc2VFYWNoKFsncHVzaCcsICdyZXZlcnNlJywgJ3NvcnQnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdO1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jLmFwcGx5KHRoaXMuX193cmFwcGVkX18sIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIGFkZCBgQXJyYXlgIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBuZXcgd3JhcHBlZCB2YWx1ZXNcbiAgICBiYXNlRWFjaChbJ2NvbmNhdCcsICdzbGljZScsICdzcGxpY2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVJlZlttZXRob2ROYW1lXTtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb2Rhc2hXcmFwcGVyKGZ1bmMuYXBwbHkodGhpcy5fX3dyYXBwZWRfXywgYXJndW1lbnRzKSwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIGF2b2lkIGFycmF5LWxpa2Ugb2JqZWN0IGJ1Z3Mgd2l0aCBgQXJyYXkjc2hpZnRgIGFuZCBgQXJyYXkjc3BsaWNlYFxuICAgIC8vIGluIElFIDwgOSwgRmlyZWZveCA8IDEwLCBOYXJ3aGFsLCBhbmQgUmluZ29KU1xuICAgIGlmICghc3VwcG9ydC5zcGxpY2VPYmplY3RzKSB7XG4gICAgICBiYXNlRWFjaChbJ3BvcCcsICdzaGlmdCcsICdzcGxpY2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdLFxuICAgICAgICAgICAgaXNTcGxpY2UgPSBtZXRob2ROYW1lID09ICdzcGxpY2UnO1xuXG4gICAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gKGNoYWluQWxsIHx8IGlzU3BsaWNlKVxuICAgICAgICAgICAgPyBuZXcgbG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKVxuICAgICAgICAgICAgOiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gZXhwb3NlIExvLURhc2hcbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBzb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzIGxpa2Ugci5qcyBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2UgdGhlIGZvbGxvd2luZzpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvLURhc2ggdG8gdGhlIGdsb2JhbCBvYmplY3QgZXZlbiB3aGVuIGFuIEFNRCBsb2FkZXIgaXMgcHJlc2VudCBpblxuICAgIC8vIGNhc2UgTG8tRGFzaCBpcyBsb2FkZWQgd2l0aCBhIFJlcXVpcmVKUyBzaGltIGNvbmZpZy5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9hcGkuaHRtbCNjb25maWctc2hpbVxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBkZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZVxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIGNoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGFuIGBleHBvcnRzYCBvYmplY3RcbiAgZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuICAgIC8vIGluIE5vZGUuanMgb3IgUmluZ29KU1xuICAgIGlmIChtb2R1bGVFeHBvcnRzKSB7XG4gICAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgfVxuICAgIC8vIGluIE5hcndoYWwgb3IgUmhpbm8gLXJlcXVpcmVcbiAgICBlbHNlIHtcbiAgICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBpbiBhIGJyb3dzZXIgb3IgUmhpbm9cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIFZFUlNJT049XCIyLjAuMVwiO3ZhciBFTlRJVElFUz17fTt2YXIgbGF0aW5fbWFwPXtcIsOBXCI6XCJBXCIsXCLEglwiOlwiQVwiLFwi4bquXCI6XCJBXCIsXCLhurZcIjpcIkFcIixcIuG6sFwiOlwiQVwiLFwi4bqyXCI6XCJBXCIsXCLhurRcIjpcIkFcIixcIseNXCI6XCJBXCIsXCLDglwiOlwiQVwiLFwi4bqkXCI6XCJBXCIsXCLhuqxcIjpcIkFcIixcIuG6plwiOlwiQVwiLFwi4bqoXCI6XCJBXCIsXCLhuqpcIjpcIkFcIixcIsOEXCI6XCJBXCIsXCLHnlwiOlwiQVwiLFwiyKZcIjpcIkFcIixcIsegXCI6XCJBXCIsXCLhuqBcIjpcIkFcIixcIsiAXCI6XCJBXCIsXCLDgFwiOlwiQVwiLFwi4bqiXCI6XCJBXCIsXCLIglwiOlwiQVwiLFwixIBcIjpcIkFcIixcIsSEXCI6XCJBXCIsXCLDhVwiOlwiQVwiLFwix7pcIjpcIkFcIixcIuG4gFwiOlwiQVwiLFwiyLpcIjpcIkFcIixcIsODXCI6XCJBXCIsXCLqnLJcIjpcIkFBXCIsXCLDhlwiOlwiQUVcIixcIse8XCI6XCJBRVwiLFwix6JcIjpcIkFFXCIsXCLqnLRcIjpcIkFPXCIsXCLqnLZcIjpcIkFVXCIsXCLqnLhcIjpcIkFWXCIsXCLqnLpcIjpcIkFWXCIsXCLqnLxcIjpcIkFZXCIsXCLhuIJcIjpcIkJcIixcIuG4hFwiOlwiQlwiLFwixoFcIjpcIkJcIixcIuG4hlwiOlwiQlwiLFwiyYNcIjpcIkJcIixcIsaCXCI6XCJCXCIsXCLEhlwiOlwiQ1wiLFwixIxcIjpcIkNcIixcIsOHXCI6XCJDXCIsXCLhuIhcIjpcIkNcIixcIsSIXCI6XCJDXCIsXCLEilwiOlwiQ1wiLFwixodcIjpcIkNcIixcIsi7XCI6XCJDXCIsXCLEjlwiOlwiRFwiLFwi4biQXCI6XCJEXCIsXCLhuJJcIjpcIkRcIixcIuG4ilwiOlwiRFwiLFwi4biMXCI6XCJEXCIsXCLGilwiOlwiRFwiLFwi4biOXCI6XCJEXCIsXCLHslwiOlwiRFwiLFwix4VcIjpcIkRcIixcIsSQXCI6XCJEXCIsXCLGi1wiOlwiRFwiLFwix7FcIjpcIkRaXCIsXCLHhFwiOlwiRFpcIixcIsOJXCI6XCJFXCIsXCLElFwiOlwiRVwiLFwixJpcIjpcIkVcIixcIsioXCI6XCJFXCIsXCLhuJxcIjpcIkVcIixcIsOKXCI6XCJFXCIsXCLhur5cIjpcIkVcIixcIuG7hlwiOlwiRVwiLFwi4buAXCI6XCJFXCIsXCLhu4JcIjpcIkVcIixcIuG7hFwiOlwiRVwiLFwi4biYXCI6XCJFXCIsXCLDi1wiOlwiRVwiLFwixJZcIjpcIkVcIixcIuG6uFwiOlwiRVwiLFwiyIRcIjpcIkVcIixcIsOIXCI6XCJFXCIsXCLhurpcIjpcIkVcIixcIsiGXCI6XCJFXCIsXCLEklwiOlwiRVwiLFwi4biWXCI6XCJFXCIsXCLhuJRcIjpcIkVcIixcIsSYXCI6XCJFXCIsXCLJhlwiOlwiRVwiLFwi4bq8XCI6XCJFXCIsXCLhuJpcIjpcIkVcIixcIuqdqlwiOlwiRVRcIixcIuG4nlwiOlwiRlwiLFwixpFcIjpcIkZcIixcIse0XCI6XCJHXCIsXCLEnlwiOlwiR1wiLFwix6ZcIjpcIkdcIixcIsSiXCI6XCJHXCIsXCLEnFwiOlwiR1wiLFwixKBcIjpcIkdcIixcIsaTXCI6XCJHXCIsXCLhuKBcIjpcIkdcIixcIsekXCI6XCJHXCIsXCLhuKpcIjpcIkhcIixcIsieXCI6XCJIXCIsXCLhuKhcIjpcIkhcIixcIsSkXCI6XCJIXCIsXCLisadcIjpcIkhcIixcIuG4plwiOlwiSFwiLFwi4biiXCI6XCJIXCIsXCLhuKRcIjpcIkhcIixcIsSmXCI6XCJIXCIsXCLDjVwiOlwiSVwiLFwixKxcIjpcIklcIixcIsePXCI6XCJJXCIsXCLDjlwiOlwiSVwiLFwiw49cIjpcIklcIixcIuG4rlwiOlwiSVwiLFwixLBcIjpcIklcIixcIuG7ilwiOlwiSVwiLFwiyIhcIjpcIklcIixcIsOMXCI6XCJJXCIsXCLhu4hcIjpcIklcIixcIsiKXCI6XCJJXCIsXCLEqlwiOlwiSVwiLFwixK5cIjpcIklcIixcIsaXXCI6XCJJXCIsXCLEqFwiOlwiSVwiLFwi4bisXCI6XCJJXCIsXCLqnblcIjpcIkRcIixcIuqdu1wiOlwiRlwiLFwi6p29XCI6XCJHXCIsXCLqnoJcIjpcIlJcIixcIuqehFwiOlwiU1wiLFwi6p6GXCI6XCJUXCIsXCLqnaxcIjpcIklTXCIsXCLEtFwiOlwiSlwiLFwiyYhcIjpcIkpcIixcIuG4sFwiOlwiS1wiLFwix6hcIjpcIktcIixcIsS2XCI6XCJLXCIsXCLisalcIjpcIktcIixcIuqdglwiOlwiS1wiLFwi4biyXCI6XCJLXCIsXCLGmFwiOlwiS1wiLFwi4bi0XCI6XCJLXCIsXCLqnYBcIjpcIktcIixcIuqdhFwiOlwiS1wiLFwixLlcIjpcIkxcIixcIsi9XCI6XCJMXCIsXCLEvVwiOlwiTFwiLFwixLtcIjpcIkxcIixcIuG4vFwiOlwiTFwiLFwi4bi2XCI6XCJMXCIsXCLhuLhcIjpcIkxcIixcIuKxoFwiOlwiTFwiLFwi6p2IXCI6XCJMXCIsXCLhuLpcIjpcIkxcIixcIsS/XCI6XCJMXCIsXCLisaJcIjpcIkxcIixcIseIXCI6XCJMXCIsXCLFgVwiOlwiTFwiLFwix4dcIjpcIkxKXCIsXCLhuL5cIjpcIk1cIixcIuG5gFwiOlwiTVwiLFwi4bmCXCI6XCJNXCIsXCLisa5cIjpcIk1cIixcIsWDXCI6XCJOXCIsXCLFh1wiOlwiTlwiLFwixYVcIjpcIk5cIixcIuG5ilwiOlwiTlwiLFwi4bmEXCI6XCJOXCIsXCLhuYZcIjpcIk5cIixcIse4XCI6XCJOXCIsXCLGnVwiOlwiTlwiLFwi4bmIXCI6XCJOXCIsXCLIoFwiOlwiTlwiLFwix4tcIjpcIk5cIixcIsORXCI6XCJOXCIsXCLHilwiOlwiTkpcIixcIsOTXCI6XCJPXCIsXCLFjlwiOlwiT1wiLFwix5FcIjpcIk9cIixcIsOUXCI6XCJPXCIsXCLhu5BcIjpcIk9cIixcIuG7mFwiOlwiT1wiLFwi4buSXCI6XCJPXCIsXCLhu5RcIjpcIk9cIixcIuG7llwiOlwiT1wiLFwiw5ZcIjpcIk9cIixcIsiqXCI6XCJPXCIsXCLIrlwiOlwiT1wiLFwiyLBcIjpcIk9cIixcIuG7jFwiOlwiT1wiLFwixZBcIjpcIk9cIixcIsiMXCI6XCJPXCIsXCLDklwiOlwiT1wiLFwi4buOXCI6XCJPXCIsXCLGoFwiOlwiT1wiLFwi4buaXCI6XCJPXCIsXCLhu6JcIjpcIk9cIixcIuG7nFwiOlwiT1wiLFwi4bueXCI6XCJPXCIsXCLhu6BcIjpcIk9cIixcIsiOXCI6XCJPXCIsXCLqnYpcIjpcIk9cIixcIuqdjFwiOlwiT1wiLFwixYxcIjpcIk9cIixcIuG5klwiOlwiT1wiLFwi4bmQXCI6XCJPXCIsXCLGn1wiOlwiT1wiLFwix6pcIjpcIk9cIixcIsesXCI6XCJPXCIsXCLDmFwiOlwiT1wiLFwix75cIjpcIk9cIixcIsOVXCI6XCJPXCIsXCLhuYxcIjpcIk9cIixcIuG5jlwiOlwiT1wiLFwiyKxcIjpcIk9cIixcIsaiXCI6XCJPSVwiLFwi6p2OXCI6XCJPT1wiLFwixpBcIjpcIkVcIixcIsaGXCI6XCJPXCIsXCLIolwiOlwiT1VcIixcIuG5lFwiOlwiUFwiLFwi4bmWXCI6XCJQXCIsXCLqnZJcIjpcIlBcIixcIsakXCI6XCJQXCIsXCLqnZRcIjpcIlBcIixcIuKxo1wiOlwiUFwiLFwi6p2QXCI6XCJQXCIsXCLqnZhcIjpcIlFcIixcIuqdllwiOlwiUVwiLFwixZRcIjpcIlJcIixcIsWYXCI6XCJSXCIsXCLFllwiOlwiUlwiLFwi4bmYXCI6XCJSXCIsXCLhuZpcIjpcIlJcIixcIuG5nFwiOlwiUlwiLFwiyJBcIjpcIlJcIixcIsiSXCI6XCJSXCIsXCLhuZ5cIjpcIlJcIixcIsmMXCI6XCJSXCIsXCLisaRcIjpcIlJcIixcIuqcvlwiOlwiQ1wiLFwixo5cIjpcIkVcIixcIsWaXCI6XCJTXCIsXCLhuaRcIjpcIlNcIixcIsWgXCI6XCJTXCIsXCLhuaZcIjpcIlNcIixcIsWeXCI6XCJTXCIsXCLFnFwiOlwiU1wiLFwiyJhcIjpcIlNcIixcIuG5oFwiOlwiU1wiLFwi4bmiXCI6XCJTXCIsXCLhuahcIjpcIlNcIixcIuG6nlwiOlwiU1NcIixcIsWkXCI6XCJUXCIsXCLFolwiOlwiVFwiLFwi4bmwXCI6XCJUXCIsXCLImlwiOlwiVFwiLFwiyL5cIjpcIlRcIixcIuG5qlwiOlwiVFwiLFwi4bmsXCI6XCJUXCIsXCLGrFwiOlwiVFwiLFwi4bmuXCI6XCJUXCIsXCLGrlwiOlwiVFwiLFwixaZcIjpcIlRcIixcIuKxr1wiOlwiQVwiLFwi6p6AXCI6XCJMXCIsXCLGnFwiOlwiTVwiLFwiyYVcIjpcIlZcIixcIuqcqFwiOlwiVFpcIixcIsOaXCI6XCJVXCIsXCLFrFwiOlwiVVwiLFwix5NcIjpcIlVcIixcIsObXCI6XCJVXCIsXCLhubZcIjpcIlVcIixcIsOcXCI6XCJVXCIsXCLHl1wiOlwiVVwiLFwix5lcIjpcIlVcIixcIsebXCI6XCJVXCIsXCLHlVwiOlwiVVwiLFwi4bmyXCI6XCJVXCIsXCLhu6RcIjpcIlVcIixcIsWwXCI6XCJVXCIsXCLIlFwiOlwiVVwiLFwiw5lcIjpcIlVcIixcIuG7plwiOlwiVVwiLFwixq9cIjpcIlVcIixcIuG7qFwiOlwiVVwiLFwi4buwXCI6XCJVXCIsXCLhu6pcIjpcIlVcIixcIuG7rFwiOlwiVVwiLFwi4buuXCI6XCJVXCIsXCLIllwiOlwiVVwiLFwixapcIjpcIlVcIixcIuG5ulwiOlwiVVwiLFwixbJcIjpcIlVcIixcIsWuXCI6XCJVXCIsXCLFqFwiOlwiVVwiLFwi4bm4XCI6XCJVXCIsXCLhubRcIjpcIlVcIixcIuqdnlwiOlwiVlwiLFwi4bm+XCI6XCJWXCIsXCLGslwiOlwiVlwiLFwi4bm8XCI6XCJWXCIsXCLqnaBcIjpcIlZZXCIsXCLhuoJcIjpcIldcIixcIsW0XCI6XCJXXCIsXCLhuoRcIjpcIldcIixcIuG6hlwiOlwiV1wiLFwi4bqIXCI6XCJXXCIsXCLhuoBcIjpcIldcIixcIuKxslwiOlwiV1wiLFwi4bqMXCI6XCJYXCIsXCLhuopcIjpcIlhcIixcIsOdXCI6XCJZXCIsXCLFtlwiOlwiWVwiLFwixbhcIjpcIllcIixcIuG6jlwiOlwiWVwiLFwi4bu0XCI6XCJZXCIsXCLhu7JcIjpcIllcIixcIsazXCI6XCJZXCIsXCLhu7ZcIjpcIllcIixcIuG7vlwiOlwiWVwiLFwiyLJcIjpcIllcIixcIsmOXCI6XCJZXCIsXCLhu7hcIjpcIllcIixcIsW5XCI6XCJaXCIsXCLFvVwiOlwiWlwiLFwi4bqQXCI6XCJaXCIsXCLisatcIjpcIlpcIixcIsW7XCI6XCJaXCIsXCLhupJcIjpcIlpcIixcIsikXCI6XCJaXCIsXCLhupRcIjpcIlpcIixcIsa1XCI6XCJaXCIsXCLEslwiOlwiSUpcIixcIsWSXCI6XCJPRVwiLFwi4bSAXCI6XCJBXCIsXCLhtIFcIjpcIkFFXCIsXCLKmVwiOlwiQlwiLFwi4bSDXCI6XCJCXCIsXCLhtIRcIjpcIkNcIixcIuG0hVwiOlwiRFwiLFwi4bSHXCI6XCJFXCIsXCLqnLBcIjpcIkZcIixcIsmiXCI6XCJHXCIsXCLKm1wiOlwiR1wiLFwiypxcIjpcIkhcIixcIsmqXCI6XCJJXCIsXCLKgVwiOlwiUlwiLFwi4bSKXCI6XCJKXCIsXCLhtItcIjpcIktcIixcIsqfXCI6XCJMXCIsXCLhtIxcIjpcIkxcIixcIuG0jVwiOlwiTVwiLFwiybRcIjpcIk5cIixcIuG0j1wiOlwiT1wiLFwiybZcIjpcIk9FXCIsXCLhtJBcIjpcIk9cIixcIuG0lVwiOlwiT1VcIixcIuG0mFwiOlwiUFwiLFwiyoBcIjpcIlJcIixcIuG0jlwiOlwiTlwiLFwi4bSZXCI6XCJSXCIsXCLqnLFcIjpcIlNcIixcIuG0m1wiOlwiVFwiLFwi4rG7XCI6XCJFXCIsXCLhtJpcIjpcIlJcIixcIuG0nFwiOlwiVVwiLFwi4bSgXCI6XCJWXCIsXCLhtKFcIjpcIldcIixcIsqPXCI6XCJZXCIsXCLhtKJcIjpcIlpcIixcIsOhXCI6XCJhXCIsXCLEg1wiOlwiYVwiLFwi4bqvXCI6XCJhXCIsXCLhurdcIjpcImFcIixcIuG6sVwiOlwiYVwiLFwi4bqzXCI6XCJhXCIsXCLhurVcIjpcImFcIixcIseOXCI6XCJhXCIsXCLDolwiOlwiYVwiLFwi4bqlXCI6XCJhXCIsXCLhuq1cIjpcImFcIixcIuG6p1wiOlwiYVwiLFwi4bqpXCI6XCJhXCIsXCLhuqtcIjpcImFcIixcIsOkXCI6XCJhXCIsXCLHn1wiOlwiYVwiLFwiyKdcIjpcImFcIixcIsehXCI6XCJhXCIsXCLhuqFcIjpcImFcIixcIsiBXCI6XCJhXCIsXCLDoFwiOlwiYVwiLFwi4bqjXCI6XCJhXCIsXCLIg1wiOlwiYVwiLFwixIFcIjpcImFcIixcIsSFXCI6XCJhXCIsXCLhto9cIjpcImFcIixcIuG6mlwiOlwiYVwiLFwiw6VcIjpcImFcIixcIse7XCI6XCJhXCIsXCLhuIFcIjpcImFcIixcIuKxpVwiOlwiYVwiLFwiw6NcIjpcImFcIixcIuqcs1wiOlwiYWFcIixcIsOmXCI6XCJhZVwiLFwix71cIjpcImFlXCIsXCLHo1wiOlwiYWVcIixcIuqctVwiOlwiYW9cIixcIuqct1wiOlwiYXVcIixcIuqcuVwiOlwiYXZcIixcIuqcu1wiOlwiYXZcIixcIuqcvVwiOlwiYXlcIixcIuG4g1wiOlwiYlwiLFwi4biFXCI6XCJiXCIsXCLJk1wiOlwiYlwiLFwi4biHXCI6XCJiXCIsXCLhtaxcIjpcImJcIixcIuG2gFwiOlwiYlwiLFwixoBcIjpcImJcIixcIsaDXCI6XCJiXCIsXCLJtVwiOlwib1wiLFwixIdcIjpcImNcIixcIsSNXCI6XCJjXCIsXCLDp1wiOlwiY1wiLFwi4biJXCI6XCJjXCIsXCLEiVwiOlwiY1wiLFwiyZVcIjpcImNcIixcIsSLXCI6XCJjXCIsXCLGiFwiOlwiY1wiLFwiyLxcIjpcImNcIixcIsSPXCI6XCJkXCIsXCLhuJFcIjpcImRcIixcIuG4k1wiOlwiZFwiLFwiyKFcIjpcImRcIixcIuG4i1wiOlwiZFwiLFwi4biNXCI6XCJkXCIsXCLJl1wiOlwiZFwiLFwi4baRXCI6XCJkXCIsXCLhuI9cIjpcImRcIixcIuG1rVwiOlwiZFwiLFwi4baBXCI6XCJkXCIsXCLEkVwiOlwiZFwiLFwiyZZcIjpcImRcIixcIsaMXCI6XCJkXCIsXCLEsVwiOlwiaVwiLFwiyLdcIjpcImpcIixcIsmfXCI6XCJqXCIsXCLKhFwiOlwialwiLFwix7NcIjpcImR6XCIsXCLHhlwiOlwiZHpcIixcIsOpXCI6XCJlXCIsXCLElVwiOlwiZVwiLFwixJtcIjpcImVcIixcIsipXCI6XCJlXCIsXCLhuJ1cIjpcImVcIixcIsOqXCI6XCJlXCIsXCLhur9cIjpcImVcIixcIuG7h1wiOlwiZVwiLFwi4buBXCI6XCJlXCIsXCLhu4NcIjpcImVcIixcIuG7hVwiOlwiZVwiLFwi4biZXCI6XCJlXCIsXCLDq1wiOlwiZVwiLFwixJdcIjpcImVcIixcIuG6uVwiOlwiZVwiLFwiyIVcIjpcImVcIixcIsOoXCI6XCJlXCIsXCLhurtcIjpcImVcIixcIsiHXCI6XCJlXCIsXCLEk1wiOlwiZVwiLFwi4biXXCI6XCJlXCIsXCLhuJVcIjpcImVcIixcIuKxuFwiOlwiZVwiLFwixJlcIjpcImVcIixcIuG2klwiOlwiZVwiLFwiyYdcIjpcImVcIixcIuG6vVwiOlwiZVwiLFwi4bibXCI6XCJlXCIsXCLqnatcIjpcImV0XCIsXCLhuJ9cIjpcImZcIixcIsaSXCI6XCJmXCIsXCLhta5cIjpcImZcIixcIuG2glwiOlwiZlwiLFwix7VcIjpcImdcIixcIsSfXCI6XCJnXCIsXCLHp1wiOlwiZ1wiLFwixKNcIjpcImdcIixcIsSdXCI6XCJnXCIsXCLEoVwiOlwiZ1wiLFwiyaBcIjpcImdcIixcIuG4oVwiOlwiZ1wiLFwi4baDXCI6XCJnXCIsXCLHpVwiOlwiZ1wiLFwi4birXCI6XCJoXCIsXCLIn1wiOlwiaFwiLFwi4bipXCI6XCJoXCIsXCLEpVwiOlwiaFwiLFwi4rGoXCI6XCJoXCIsXCLhuKdcIjpcImhcIixcIuG4o1wiOlwiaFwiLFwi4bilXCI6XCJoXCIsXCLJplwiOlwiaFwiLFwi4bqWXCI6XCJoXCIsXCLEp1wiOlwiaFwiLFwixpVcIjpcImh2XCIsXCLDrVwiOlwiaVwiLFwixK1cIjpcImlcIixcIseQXCI6XCJpXCIsXCLDrlwiOlwiaVwiLFwiw69cIjpcImlcIixcIuG4r1wiOlwiaVwiLFwi4buLXCI6XCJpXCIsXCLIiVwiOlwiaVwiLFwiw6xcIjpcImlcIixcIuG7iVwiOlwiaVwiLFwiyItcIjpcImlcIixcIsSrXCI6XCJpXCIsXCLEr1wiOlwiaVwiLFwi4baWXCI6XCJpXCIsXCLJqFwiOlwiaVwiLFwixKlcIjpcImlcIixcIuG4rVwiOlwiaVwiLFwi6p26XCI6XCJkXCIsXCLqnbxcIjpcImZcIixcIuG1uVwiOlwiZ1wiLFwi6p6DXCI6XCJyXCIsXCLqnoVcIjpcInNcIixcIuqeh1wiOlwidFwiLFwi6p2tXCI6XCJpc1wiLFwix7BcIjpcImpcIixcIsS1XCI6XCJqXCIsXCLKnVwiOlwialwiLFwiyYlcIjpcImpcIixcIuG4sVwiOlwia1wiLFwix6lcIjpcImtcIixcIsS3XCI6XCJrXCIsXCLisapcIjpcImtcIixcIuqdg1wiOlwia1wiLFwi4bizXCI6XCJrXCIsXCLGmVwiOlwia1wiLFwi4bi1XCI6XCJrXCIsXCLhtoRcIjpcImtcIixcIuqdgVwiOlwia1wiLFwi6p2FXCI6XCJrXCIsXCLEulwiOlwibFwiLFwixppcIjpcImxcIixcIsmsXCI6XCJsXCIsXCLEvlwiOlwibFwiLFwixLxcIjpcImxcIixcIuG4vVwiOlwibFwiLFwiyLRcIjpcImxcIixcIuG4t1wiOlwibFwiLFwi4bi5XCI6XCJsXCIsXCLisaFcIjpcImxcIixcIuqdiVwiOlwibFwiLFwi4bi7XCI6XCJsXCIsXCLFgFwiOlwibFwiLFwiyatcIjpcImxcIixcIuG2hVwiOlwibFwiLFwiya1cIjpcImxcIixcIsWCXCI6XCJsXCIsXCLHiVwiOlwibGpcIixcIsW/XCI6XCJzXCIsXCLhupxcIjpcInNcIixcIuG6m1wiOlwic1wiLFwi4bqdXCI6XCJzXCIsXCLhuL9cIjpcIm1cIixcIuG5gVwiOlwibVwiLFwi4bmDXCI6XCJtXCIsXCLJsVwiOlwibVwiLFwi4bWvXCI6XCJtXCIsXCLhtoZcIjpcIm1cIixcIsWEXCI6XCJuXCIsXCLFiFwiOlwiblwiLFwixYZcIjpcIm5cIixcIuG5i1wiOlwiblwiLFwiyLVcIjpcIm5cIixcIuG5hVwiOlwiblwiLFwi4bmHXCI6XCJuXCIsXCLHuVwiOlwiblwiLFwiybJcIjpcIm5cIixcIuG5iVwiOlwiblwiLFwixp5cIjpcIm5cIixcIuG1sFwiOlwiblwiLFwi4baHXCI6XCJuXCIsXCLJs1wiOlwiblwiLFwiw7FcIjpcIm5cIixcIseMXCI6XCJualwiLFwiw7NcIjpcIm9cIixcIsWPXCI6XCJvXCIsXCLHklwiOlwib1wiLFwiw7RcIjpcIm9cIixcIuG7kVwiOlwib1wiLFwi4buZXCI6XCJvXCIsXCLhu5NcIjpcIm9cIixcIuG7lVwiOlwib1wiLFwi4buXXCI6XCJvXCIsXCLDtlwiOlwib1wiLFwiyKtcIjpcIm9cIixcIsivXCI6XCJvXCIsXCLIsVwiOlwib1wiLFwi4buNXCI6XCJvXCIsXCLFkVwiOlwib1wiLFwiyI1cIjpcIm9cIixcIsOyXCI6XCJvXCIsXCLhu49cIjpcIm9cIixcIsahXCI6XCJvXCIsXCLhu5tcIjpcIm9cIixcIuG7o1wiOlwib1wiLFwi4budXCI6XCJvXCIsXCLhu59cIjpcIm9cIixcIuG7oVwiOlwib1wiLFwiyI9cIjpcIm9cIixcIuqdi1wiOlwib1wiLFwi6p2NXCI6XCJvXCIsXCLisbpcIjpcIm9cIixcIsWNXCI6XCJvXCIsXCLhuZNcIjpcIm9cIixcIuG5kVwiOlwib1wiLFwix6tcIjpcIm9cIixcIsetXCI6XCJvXCIsXCLDuFwiOlwib1wiLFwix79cIjpcIm9cIixcIsO1XCI6XCJvXCIsXCLhuY1cIjpcIm9cIixcIuG5j1wiOlwib1wiLFwiyK1cIjpcIm9cIixcIsajXCI6XCJvaVwiLFwi6p2PXCI6XCJvb1wiLFwiyZtcIjpcImVcIixcIuG2k1wiOlwiZVwiLFwiyZRcIjpcIm9cIixcIuG2l1wiOlwib1wiLFwiyKNcIjpcIm91XCIsXCLhuZVcIjpcInBcIixcIuG5l1wiOlwicFwiLFwi6p2TXCI6XCJwXCIsXCLGpVwiOlwicFwiLFwi4bWxXCI6XCJwXCIsXCLhtohcIjpcInBcIixcIuqdlVwiOlwicFwiLFwi4bW9XCI6XCJwXCIsXCLqnZFcIjpcInBcIixcIuqdmVwiOlwicVwiLFwiyqBcIjpcInFcIixcIsmLXCI6XCJxXCIsXCLqnZdcIjpcInFcIixcIsWVXCI6XCJyXCIsXCLFmVwiOlwiclwiLFwixZdcIjpcInJcIixcIuG5mVwiOlwiclwiLFwi4bmbXCI6XCJyXCIsXCLhuZ1cIjpcInJcIixcIsiRXCI6XCJyXCIsXCLJvlwiOlwiclwiLFwi4bWzXCI6XCJyXCIsXCLIk1wiOlwiclwiLFwi4bmfXCI6XCJyXCIsXCLJvFwiOlwiclwiLFwi4bWyXCI6XCJyXCIsXCLhtolcIjpcInJcIixcIsmNXCI6XCJyXCIsXCLJvVwiOlwiclwiLFwi4oaEXCI6XCJjXCIsXCLqnL9cIjpcImNcIixcIsmYXCI6XCJlXCIsXCLJv1wiOlwiclwiLFwixZtcIjpcInNcIixcIuG5pVwiOlwic1wiLFwixaFcIjpcInNcIixcIuG5p1wiOlwic1wiLFwixZ9cIjpcInNcIixcIsWdXCI6XCJzXCIsXCLImVwiOlwic1wiLFwi4bmhXCI6XCJzXCIsXCLhuaNcIjpcInNcIixcIuG5qVwiOlwic1wiLFwiyoJcIjpcInNcIixcIuG1tFwiOlwic1wiLFwi4baKXCI6XCJzXCIsXCLIv1wiOlwic1wiLFwiyaFcIjpcImdcIixcIsOfXCI6XCJzc1wiLFwi4bSRXCI6XCJvXCIsXCLhtJNcIjpcIm9cIixcIuG0nVwiOlwidVwiLFwixaVcIjpcInRcIixcIsWjXCI6XCJ0XCIsXCLhubFcIjpcInRcIixcIsibXCI6XCJ0XCIsXCLItlwiOlwidFwiLFwi4bqXXCI6XCJ0XCIsXCLisaZcIjpcInRcIixcIuG5q1wiOlwidFwiLFwi4bmtXCI6XCJ0XCIsXCLGrVwiOlwidFwiLFwi4bmvXCI6XCJ0XCIsXCLhtbVcIjpcInRcIixcIsarXCI6XCJ0XCIsXCLKiFwiOlwidFwiLFwixadcIjpcInRcIixcIuG1ulwiOlwidGhcIixcIsmQXCI6XCJhXCIsXCLhtIJcIjpcImFlXCIsXCLHnVwiOlwiZVwiLFwi4bW3XCI6XCJnXCIsXCLJpVwiOlwiaFwiLFwiyq5cIjpcImhcIixcIsqvXCI6XCJoXCIsXCLhtIlcIjpcImlcIixcIsqeXCI6XCJrXCIsXCLqnoFcIjpcImxcIixcIsmvXCI6XCJtXCIsXCLJsFwiOlwibVwiLFwi4bSUXCI6XCJvZVwiLFwiyblcIjpcInJcIixcIsm7XCI6XCJyXCIsXCLJulwiOlwiclwiLFwi4rG5XCI6XCJyXCIsXCLKh1wiOlwidFwiLFwiyoxcIjpcInZcIixcIsqNXCI6XCJ3XCIsXCLKjlwiOlwieVwiLFwi6pypXCI6XCJ0elwiLFwiw7pcIjpcInVcIixcIsWtXCI6XCJ1XCIsXCLHlFwiOlwidVwiLFwiw7tcIjpcInVcIixcIuG5t1wiOlwidVwiLFwiw7xcIjpcInVcIixcIseYXCI6XCJ1XCIsXCLHmlwiOlwidVwiLFwix5xcIjpcInVcIixcIseWXCI6XCJ1XCIsXCLhubNcIjpcInVcIixcIuG7pVwiOlwidVwiLFwixbFcIjpcInVcIixcIsiVXCI6XCJ1XCIsXCLDuVwiOlwidVwiLFwi4bunXCI6XCJ1XCIsXCLGsFwiOlwidVwiLFwi4bupXCI6XCJ1XCIsXCLhu7FcIjpcInVcIixcIuG7q1wiOlwidVwiLFwi4butXCI6XCJ1XCIsXCLhu69cIjpcInVcIixcIsiXXCI6XCJ1XCIsXCLFq1wiOlwidVwiLFwi4bm7XCI6XCJ1XCIsXCLFs1wiOlwidVwiLFwi4baZXCI6XCJ1XCIsXCLFr1wiOlwidVwiLFwixalcIjpcInVcIixcIuG5uVwiOlwidVwiLFwi4bm1XCI6XCJ1XCIsXCLhtatcIjpcInVlXCIsXCLqnbhcIjpcInVtXCIsXCLisbRcIjpcInZcIixcIuqdn1wiOlwidlwiLFwi4bm/XCI6XCJ2XCIsXCLKi1wiOlwidlwiLFwi4baMXCI6XCJ2XCIsXCLisbFcIjpcInZcIixcIuG5vVwiOlwidlwiLFwi6p2hXCI6XCJ2eVwiLFwi4bqDXCI6XCJ3XCIsXCLFtVwiOlwid1wiLFwi4bqFXCI6XCJ3XCIsXCLhuodcIjpcIndcIixcIuG6iVwiOlwid1wiLFwi4bqBXCI6XCJ3XCIsXCLisbNcIjpcIndcIixcIuG6mFwiOlwid1wiLFwi4bqNXCI6XCJ4XCIsXCLhuotcIjpcInhcIixcIuG2jVwiOlwieFwiLFwiw71cIjpcInlcIixcIsW3XCI6XCJ5XCIsXCLDv1wiOlwieVwiLFwi4bqPXCI6XCJ5XCIsXCLhu7VcIjpcInlcIixcIuG7s1wiOlwieVwiLFwixrRcIjpcInlcIixcIuG7t1wiOlwieVwiLFwi4bu/XCI6XCJ5XCIsXCLIs1wiOlwieVwiLFwi4bqZXCI6XCJ5XCIsXCLJj1wiOlwieVwiLFwi4bu5XCI6XCJ5XCIsXCLFulwiOlwielwiLFwixb5cIjpcInpcIixcIuG6kVwiOlwielwiLFwiypFcIjpcInpcIixcIuKxrFwiOlwielwiLFwixbxcIjpcInpcIixcIuG6k1wiOlwielwiLFwiyKVcIjpcInpcIixcIuG6lVwiOlwielwiLFwi4bW2XCI6XCJ6XCIsXCLhto5cIjpcInpcIixcIsqQXCI6XCJ6XCIsXCLGtlwiOlwielwiLFwiyYBcIjpcInpcIixcIu+sgFwiOlwiZmZcIixcIu+sg1wiOlwiZmZpXCIsXCLvrIRcIjpcImZmbFwiLFwi76yBXCI6XCJmaVwiLFwi76yCXCI6XCJmbFwiLFwixLNcIjpcImlqXCIsXCLFk1wiOlwib2VcIixcIu+shlwiOlwic3RcIixcIuKCkFwiOlwiYVwiLFwi4oKRXCI6XCJlXCIsXCLhtaJcIjpcImlcIixcIuKxvFwiOlwialwiLFwi4oKSXCI6XCJvXCIsXCLhtaNcIjpcInJcIixcIuG1pFwiOlwidVwiLFwi4bWlXCI6XCJ2XCIsXCLigpNcIjpcInhcIn07ZnVuY3Rpb24gaW5pdGlhbGl6ZShvYmplY3Qscyl7aWYocyE9PW51bGwmJnMhPT11bmRlZmluZWQpe2lmKHR5cGVvZiBzPT09XCJzdHJpbmdcIilvYmplY3Qucz1zO2Vsc2Ugb2JqZWN0LnM9cy50b1N0cmluZygpfWVsc2V7b2JqZWN0LnM9c31vYmplY3Qub3JpZz1zO2lmKHMhPT1udWxsJiZzIT09dW5kZWZpbmVkKXtpZihvYmplY3QuX19kZWZpbmVHZXR0ZXJfXyl7b2JqZWN0Ll9fZGVmaW5lR2V0dGVyX18oXCJsZW5ndGhcIixmdW5jdGlvbigpe3JldHVybiBvYmplY3Qucy5sZW5ndGh9KX1lbHNle29iamVjdC5sZW5ndGg9cy5sZW5ndGh9fWVsc2V7b2JqZWN0Lmxlbmd0aD0tMX19ZnVuY3Rpb24gUyhzKXtpbml0aWFsaXplKHRoaXMscyl9dmFyIF9fbnNwPVN0cmluZy5wcm90b3R5cGU7dmFyIF9fc3A9Uy5wcm90b3R5cGU9e2JldHdlZW46ZnVuY3Rpb24obGVmdCxyaWdodCl7dmFyIHM9dGhpcy5zO3ZhciBzdGFydFBvcz1zLmluZGV4T2YobGVmdCk7dmFyIGVuZFBvcz1zLmluZGV4T2YocmlnaHQsc3RhcnRQb3MrbGVmdC5sZW5ndGgpO2lmKGVuZFBvcz09LTEmJnJpZ2h0IT1udWxsKXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcIlwiKTtlbHNlIGlmKGVuZFBvcz09LTEmJnJpZ2h0PT1udWxsKXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzLnN1YnN0cmluZyhzdGFydFBvcytsZWZ0Lmxlbmd0aCkpO2Vsc2UgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMuc2xpY2Uoc3RhcnRQb3MrbGVmdC5sZW5ndGgsZW5kUG9zKSl9LGNhbWVsaXplOmZ1bmN0aW9uKCl7dmFyIHM9dGhpcy50cmltKCkucy5yZXBsYWNlKC8oXFwtfF98XFxzKSsoLik/L2csZnVuY3Rpb24obWF0aGMsc2VwLGMpe3JldHVybiBjP2MudG9VcHBlckNhc2UoKTpcIlwifSk7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfSxjYXBpdGFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMucy5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpK3RoaXMucy5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSl9LGNoYXJBdDpmdW5jdGlvbihpbmRleCl7cmV0dXJuIHRoaXMucy5jaGFyQXQoaW5kZXgpfSxjaG9tcExlZnQ6ZnVuY3Rpb24ocHJlZml4KXt2YXIgcz10aGlzLnM7aWYocy5pbmRleE9mKHByZWZpeCk9PT0wKXtzPXMuc2xpY2UocHJlZml4Lmxlbmd0aCk7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfWVsc2V7cmV0dXJuIHRoaXN9fSxjaG9tcFJpZ2h0OmZ1bmN0aW9uKHN1ZmZpeCl7aWYodGhpcy5lbmRzV2l0aChzdWZmaXgpKXt2YXIgcz10aGlzLnM7cz1zLnNsaWNlKDAscy5sZW5ndGgtc3VmZml4Lmxlbmd0aCk7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfWVsc2V7cmV0dXJuIHRoaXN9fSxjb2xsYXBzZVdoaXRlc3BhY2U6ZnVuY3Rpb24oKXt2YXIgcz10aGlzLnMucmVwbGFjZSgvW1xcc1xceGEwXSsvZyxcIiBcIikucmVwbGFjZSgvXlxccyt8XFxzKyQvZyxcIlwiKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iocyl9LGNvbnRhaW5zOmZ1bmN0aW9uKHNzKXtyZXR1cm4gdGhpcy5zLmluZGV4T2Yoc3MpPj0wfSxjb3VudDpmdW5jdGlvbihzcyl7dmFyIGNvdW50PTAscG9zPXRoaXMucy5pbmRleE9mKHNzKTt3aGlsZShwb3M+PTApe2NvdW50Kz0xO3Bvcz10aGlzLnMuaW5kZXhPZihzcyxwb3MrMSl9cmV0dXJuIGNvdW50fSxkYXNoZXJpemU6ZnVuY3Rpb24oKXt2YXIgcz10aGlzLnRyaW0oKS5zLnJlcGxhY2UoL1tfXFxzXSsvZyxcIi1cIikucmVwbGFjZSgvKFtBLVpdKS9nLFwiLSQxXCIpLnJlcGxhY2UoLy0rL2csXCItXCIpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfSxsYXRpbmlzZTpmdW5jdGlvbigpe3ZhciBzPXRoaXMucmVwbGFjZSgvW15BLVphLXowLTlcXFtcXF0gXS9nLGZ1bmN0aW9uKHgpe3JldHVybiBsYXRpbl9tYXBbeF18fHh9KTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iocyl9LGRlY29kZUh0bWxFbnRpdGllczpmdW5jdGlvbigpe3ZhciBzPXRoaXMucztzPXMucmVwbGFjZSgvJiMoXFxkKyk7Py9nLGZ1bmN0aW9uKF8sY29kZSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSl9KS5yZXBsYWNlKC8mI1t4WF0oW0EtRmEtZjAtOV0rKTs/L2csZnVuY3Rpb24oXyxoZXgpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwxNikpfSkucmVwbGFjZSgvJihbXjtcXFddKzs/KS9nLGZ1bmN0aW9uKG0sZSl7dmFyIGVlPWUucmVwbGFjZSgvOyQvLFwiXCIpO3ZhciB0YXJnZXQ9RU5USVRJRVNbZV18fGUubWF0Y2goLzskLykmJkVOVElUSUVTW2VlXTtpZih0eXBlb2YgdGFyZ2V0PT09XCJudW1iZXJcIil7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGFyZ2V0KX1lbHNlIGlmKHR5cGVvZiB0YXJnZXQ9PT1cInN0cmluZ1wiKXtyZXR1cm4gdGFyZ2V0fWVsc2V7cmV0dXJuIG19fSk7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfSxlbmRzV2l0aDpmdW5jdGlvbihzdWZmaXgpe3ZhciBsPXRoaXMucy5sZW5ndGgtc3VmZml4Lmxlbmd0aDtyZXR1cm4gbD49MCYmdGhpcy5zLmluZGV4T2Yoc3VmZml4LGwpPT09bH0sZXNjYXBlSFRNTDpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnMucmVwbGFjZSgvWyY8PlwiJ10vZyxmdW5jdGlvbihtKXtyZXR1cm5cIiZcIityZXZlcnNlZEVzY2FwZUNoYXJzW21dK1wiO1wifSkpfSxlbnN1cmVMZWZ0OmZ1bmN0aW9uKHByZWZpeCl7dmFyIHM9dGhpcy5zO2lmKHMuaW5kZXhPZihwcmVmaXgpPT09MCl7cmV0dXJuIHRoaXN9ZWxzZXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IocHJlZml4K3MpfX0sZW5zdXJlUmlnaHQ6ZnVuY3Rpb24oc3VmZml4KXt2YXIgcz10aGlzLnM7aWYodGhpcy5lbmRzV2l0aChzdWZmaXgpKXtyZXR1cm4gdGhpc31lbHNle3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzK3N1ZmZpeCl9fSxodW1hbml6ZTpmdW5jdGlvbigpe2lmKHRoaXMucz09PW51bGx8fHRoaXMucz09PXVuZGVmaW5lZClyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXCJcIik7dmFyIHM9dGhpcy51bmRlcnNjb3JlKCkucmVwbGFjZSgvX2lkJC8sXCJcIikucmVwbGFjZSgvXy9nLFwiIFwiKS50cmltKCkuY2FwaXRhbGl6ZSgpO3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzKX0saXNBbHBoYTpmdW5jdGlvbigpe3JldHVybiEvW15hLXpcXHhERi1cXHhGRl18XiQvLnRlc3QodGhpcy5zLnRvTG93ZXJDYXNlKCkpfSxpc0FscGhhTnVtZXJpYzpmdW5jdGlvbigpe3JldHVybiEvW14wLTlhLXpcXHhERi1cXHhGRl0vLnRlc3QodGhpcy5zLnRvTG93ZXJDYXNlKCkpfSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucz09PW51bGx8fHRoaXMucz09PXVuZGVmaW5lZD90cnVlOi9eW1xcc1xceGEwXSokLy50ZXN0KHRoaXMucyl9LGlzTG93ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc0FscGhhKCkmJnRoaXMucy50b0xvd2VyQ2FzZSgpPT09dGhpcy5zfSxpc051bWVyaWM6ZnVuY3Rpb24oKXtyZXR1cm4hL1teMC05XS8udGVzdCh0aGlzLnMpfSxpc1VwcGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNBbHBoYSgpJiZ0aGlzLnMudG9VcHBlckNhc2UoKT09PXRoaXMuc30sbGVmdDpmdW5jdGlvbihOKXtpZihOPj0wKXt2YXIgcz10aGlzLnMuc3Vic3RyKDAsTik7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfWVsc2V7cmV0dXJuIHRoaXMucmlnaHQoLU4pfX0sbGluZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlQWxsKFwiXFxyXFxuXCIsXCJcXG5cIikucy5zcGxpdChcIlxcblwiKX0scGFkOmZ1bmN0aW9uKGxlbixjaCl7aWYoY2g9PW51bGwpY2g9XCIgXCI7aWYodGhpcy5zLmxlbmd0aD49bGVuKXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnMpO2xlbj1sZW4tdGhpcy5zLmxlbmd0aDt2YXIgbGVmdD1BcnJheShNYXRoLmNlaWwobGVuLzIpKzEpLmpvaW4oY2gpO3ZhciByaWdodD1BcnJheShNYXRoLmZsb29yKGxlbi8yKSsxKS5qb2luKGNoKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IobGVmdCt0aGlzLnMrcmlnaHQpfSxwYWRMZWZ0OmZ1bmN0aW9uKGxlbixjaCl7aWYoY2g9PW51bGwpY2g9XCIgXCI7aWYodGhpcy5zLmxlbmd0aD49bGVuKXJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnMpO3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihBcnJheShsZW4tdGhpcy5zLmxlbmd0aCsxKS5qb2luKGNoKSt0aGlzLnMpfSxwYWRSaWdodDpmdW5jdGlvbihsZW4sY2gpe2lmKGNoPT1udWxsKWNoPVwiIFwiO2lmKHRoaXMucy5sZW5ndGg+PWxlbilyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zK0FycmF5KGxlbi10aGlzLnMubGVuZ3RoKzEpLmpvaW4oY2gpKX0scGFyc2VDU1Y6ZnVuY3Rpb24oZGVsaW1pdGVyLHF1YWxpZmllcixlc2NhcGUsbGluZURlbGltaXRlcil7ZGVsaW1pdGVyPWRlbGltaXRlcnx8XCIsXCI7ZXNjYXBlPWVzY2FwZXx8XCJcXFxcXCI7aWYodHlwZW9mIHF1YWxpZmllcj09XCJ1bmRlZmluZWRcIilxdWFsaWZpZXI9J1wiJzt2YXIgaT0wLGZpZWxkQnVmZmVyPVtdLGZpZWxkcz1bXSxsZW49dGhpcy5zLmxlbmd0aCxpbkZpZWxkPWZhbHNlLGluVW5xdWFsaWZpZWRTdHJpbmc9ZmFsc2Usc2VsZj10aGlzO3ZhciBjYT1mdW5jdGlvbihpKXtyZXR1cm4gc2VsZi5zLmNoYXJBdChpKX07aWYodHlwZW9mIGxpbmVEZWxpbWl0ZXIhPT1cInVuZGVmaW5lZFwiKXZhciByb3dzPVtdO2lmKCFxdWFsaWZpZXIpaW5GaWVsZD10cnVlO3doaWxlKGk8bGVuKXt2YXIgY3VycmVudD1jYShpKTtzd2l0Y2goY3VycmVudCl7Y2FzZSBlc2NhcGU6aWYoaW5GaWVsZCYmKGVzY2FwZSE9PXF1YWxpZmllcnx8Y2EoaSsxKT09PXF1YWxpZmllcikpe2krPTE7ZmllbGRCdWZmZXIucHVzaChjYShpKSk7YnJlYWt9aWYoZXNjYXBlIT09cXVhbGlmaWVyKWJyZWFrO2Nhc2UgcXVhbGlmaWVyOmluRmllbGQ9IWluRmllbGQ7YnJlYWs7Y2FzZSBkZWxpbWl0ZXI6aWYoaW5VbnF1YWxpZmllZFN0cmluZyl7aW5GaWVsZD1mYWxzZTtpblVucXVhbGlmaWVkU3RyaW5nPWZhbHNlfWlmKGluRmllbGQmJnF1YWxpZmllcilmaWVsZEJ1ZmZlci5wdXNoKGN1cnJlbnQpO2Vsc2V7ZmllbGRzLnB1c2goZmllbGRCdWZmZXIuam9pbihcIlwiKSk7ZmllbGRCdWZmZXIubGVuZ3RoPTB9YnJlYWs7Y2FzZSBsaW5lRGVsaW1pdGVyOmlmKGluVW5xdWFsaWZpZWRTdHJpbmcpe2luRmllbGQ9ZmFsc2U7aW5VbnF1YWxpZmllZFN0cmluZz1mYWxzZTtmaWVsZHMucHVzaChmaWVsZEJ1ZmZlci5qb2luKFwiXCIpKTtyb3dzLnB1c2goZmllbGRzKTtmaWVsZHM9W107ZmllbGRCdWZmZXIubGVuZ3RoPTB9ZWxzZSBpZihpbkZpZWxkKXtmaWVsZEJ1ZmZlci5wdXNoKGN1cnJlbnQpfWVsc2V7aWYocm93cyl7ZmllbGRzLnB1c2goZmllbGRCdWZmZXIuam9pbihcIlwiKSk7cm93cy5wdXNoKGZpZWxkcyk7ZmllbGRzPVtdO2ZpZWxkQnVmZmVyLmxlbmd0aD0wfX1icmVhaztjYXNlXCIgXCI6aWYoaW5GaWVsZClmaWVsZEJ1ZmZlci5wdXNoKGN1cnJlbnQpO2JyZWFrO2RlZmF1bHQ6aWYoaW5GaWVsZClmaWVsZEJ1ZmZlci5wdXNoKGN1cnJlbnQpO2Vsc2UgaWYoY3VycmVudCE9PXF1YWxpZmllcil7ZmllbGRCdWZmZXIucHVzaChjdXJyZW50KTtpbkZpZWxkPXRydWU7aW5VbnF1YWxpZmllZFN0cmluZz10cnVlfWJyZWFrfWkrPTF9ZmllbGRzLnB1c2goZmllbGRCdWZmZXIuam9pbihcIlwiKSk7aWYocm93cyl7cm93cy5wdXNoKGZpZWxkcyk7cmV0dXJuIHJvd3N9cmV0dXJuIGZpZWxkc30scmVwbGFjZUFsbDpmdW5jdGlvbihzcyxyKXt2YXIgcz10aGlzLnMuc3BsaXQoc3MpLmpvaW4ocik7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfSxyaWdodDpmdW5jdGlvbihOKXtpZihOPj0wKXt2YXIgcz10aGlzLnMuc3Vic3RyKHRoaXMucy5sZW5ndGgtTixOKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iocyl9ZWxzZXtyZXR1cm4gdGhpcy5sZWZ0KC1OKX19LHNldFZhbHVlOmZ1bmN0aW9uKHMpe2luaXRpYWxpemUodGhpcyxzKTtyZXR1cm4gdGhpc30sc2x1Z2lmeTpmdW5jdGlvbigpe3ZhciBzbD1uZXcgUyhuZXcgUyh0aGlzLnMpLmxhdGluaXNlKCkucy5yZXBsYWNlKC9bXlxcd1xccy1dL2csXCJcIikudG9Mb3dlckNhc2UoKSkuZGFzaGVyaXplKCkucztpZihzbC5jaGFyQXQoMCk9PT1cIi1cIilzbD1zbC5zdWJzdHIoMSk7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHNsKX0sc3RhcnRzV2l0aDpmdW5jdGlvbihwcmVmaXgpe3JldHVybiB0aGlzLnMubGFzdEluZGV4T2YocHJlZml4LDApPT09MH0sc3RyaXBQdW5jdHVhdGlvbjpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnMucmVwbGFjZSgvW15cXHdcXHNdfF8vZyxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpKX0sc3RyaXBUYWdzOmZ1bmN0aW9uKCl7dmFyIHM9dGhpcy5zLGFyZ3M9YXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50czpbXCJcIl07bXVsdGlBcmdzKGFyZ3MsZnVuY3Rpb24odGFnKXtzPXMucmVwbGFjZShSZWdFeHAoXCI8Lz9cIit0YWcrXCJbXjw+XSo+XCIsXCJnaVwiKSxcIlwiKX0pO3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzKX0sdGVtcGxhdGU6ZnVuY3Rpb24odmFsdWVzLG9wZW5pbmcsY2xvc2luZyl7dmFyIHM9dGhpcy5zO3ZhciBvcGVuaW5nPW9wZW5pbmd8fEV4cG9ydC5UTVBMX09QRU47dmFyIGNsb3Npbmc9Y2xvc2luZ3x8RXhwb3J0LlRNUExfQ0xPU0U7dmFyIG9wZW49b3BlbmluZy5yZXBsYWNlKC9bLVtcXF0oKSpcXHNdL2csXCJcXFxcJCZcIikucmVwbGFjZSgvXFwkL2csXCJcXFxcJFwiKTt2YXIgY2xvc2U9Y2xvc2luZy5yZXBsYWNlKC9bLVtcXF0oKSpcXHNdL2csXCJcXFxcJCZcIikucmVwbGFjZSgvXFwkL2csXCJcXFxcJFwiKTt2YXIgcj1uZXcgUmVnRXhwKG9wZW4rXCIoLis/KVwiK2Nsb3NlLFwiZ1wiKTt2YXIgbWF0Y2hlcz1zLm1hdGNoKHIpfHxbXTttYXRjaGVzLmZvckVhY2goZnVuY3Rpb24obWF0Y2gpe3ZhciBrZXk9bWF0Y2guc3Vic3RyaW5nKG9wZW5pbmcubGVuZ3RoLG1hdGNoLmxlbmd0aC1jbG9zaW5nLmxlbmd0aCk7aWYodHlwZW9mIHZhbHVlc1trZXldIT1cInVuZGVmaW5lZFwiKXM9cy5yZXBsYWNlKG1hdGNoLHZhbHVlc1trZXldKX0pO3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzKX0sdGltZXM6ZnVuY3Rpb24obil7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5ldyBBcnJheShuKzEpLmpvaW4odGhpcy5zKSl9LHRvQm9vbGVhbjpmdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLm9yaWc9PT1cInN0cmluZ1wiKXt2YXIgcz10aGlzLnMudG9Mb3dlckNhc2UoKTtyZXR1cm4gcz09PVwidHJ1ZVwifHxzPT09XCJ5ZXNcInx8cz09PVwib25cInx8cz09PVwiMVwifWVsc2UgcmV0dXJuIHRoaXMub3JpZz09PXRydWV8fHRoaXMub3JpZz09PTF9LHRvRmxvYXQ6ZnVuY3Rpb24ocHJlY2lzaW9uKXt2YXIgbnVtPXBhcnNlRmxvYXQodGhpcy5zKTtpZihwcmVjaXNpb24pcmV0dXJuIHBhcnNlRmxvYXQobnVtLnRvRml4ZWQocHJlY2lzaW9uKSk7ZWxzZSByZXR1cm4gbnVtfSx0b0ludDpmdW5jdGlvbigpe3JldHVybi9eXFxzKi0/MHgvaS50ZXN0KHRoaXMucyk/cGFyc2VJbnQodGhpcy5zLDE2KTpwYXJzZUludCh0aGlzLnMsMTApfSx0cmltOmZ1bmN0aW9uKCl7dmFyIHM7aWYodHlwZW9mIF9fbnNwLnRyaW09PT1cInVuZGVmaW5lZFwiKXM9dGhpcy5zLnJlcGxhY2UoLyheXFxzKnxcXHMqJCkvZyxcIlwiKTtlbHNlIHM9dGhpcy5zLnRyaW0oKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iocyl9LHRyaW1MZWZ0OmZ1bmN0aW9uKCl7dmFyIHM7aWYoX19uc3AudHJpbUxlZnQpcz10aGlzLnMudHJpbUxlZnQoKTtlbHNlIHM9dGhpcy5zLnJlcGxhY2UoLyheXFxzKikvZyxcIlwiKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iocyl9LHRyaW1SaWdodDpmdW5jdGlvbigpe3ZhciBzO2lmKF9fbnNwLnRyaW1SaWdodClzPXRoaXMucy50cmltUmlnaHQoKTtlbHNlIHM9dGhpcy5zLnJlcGxhY2UoL1xccyskLyxcIlwiKTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Iocyl9LHRydW5jYXRlOmZ1bmN0aW9uKGxlbmd0aCxwcnVuZVN0cil7dmFyIHN0cj10aGlzLnM7bGVuZ3RoPX5+bGVuZ3RoO3BydW5lU3RyPXBydW5lU3RyfHxcIi4uLlwiO2lmKHN0ci5sZW5ndGg8PWxlbmd0aClyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3Ioc3RyKTt2YXIgdG1wbD1mdW5jdGlvbihjKXtyZXR1cm4gYy50b1VwcGVyQ2FzZSgpIT09Yy50b0xvd2VyQ2FzZSgpP1wiQVwiOlwiIFwifSx0ZW1wbGF0ZT1zdHIuc2xpY2UoMCxsZW5ndGgrMSkucmVwbGFjZSgvLig/PVxcVypcXHcqJCkvZyx0bXBsKTtpZih0ZW1wbGF0ZS5zbGljZSh0ZW1wbGF0ZS5sZW5ndGgtMikubWF0Y2goL1xcd1xcdy8pKXRlbXBsYXRlPXRlbXBsYXRlLnJlcGxhY2UoL1xccypcXFMrJC8sXCJcIik7ZWxzZSB0ZW1wbGF0ZT1uZXcgUyh0ZW1wbGF0ZS5zbGljZSgwLHRlbXBsYXRlLmxlbmd0aC0xKSkudHJpbVJpZ2h0KCkucztyZXR1cm4odGVtcGxhdGUrcHJ1bmVTdHIpLmxlbmd0aD5zdHIubGVuZ3RoP25ldyBTKHN0cik6bmV3IFMoc3RyLnNsaWNlKDAsdGVtcGxhdGUubGVuZ3RoKStwcnVuZVN0cil9LHRvQ1NWOmZ1bmN0aW9uKCl7dmFyIGRlbGltPVwiLFwiLHF1YWxpZmllcj0nXCInLGVzY2FwZT1cIlxcXFxcIixlbmNsb3NlTnVtYmVycz10cnVlLGtleXM9ZmFsc2U7dmFyIGRhdGFBcnJheT1bXTtmdW5jdGlvbiBoYXNWYWwoaXQpe3JldHVybiBpdCE9PW51bGwmJml0IT09XCJcIn1pZih0eXBlb2YgYXJndW1lbnRzWzBdPT09XCJvYmplY3RcIil7ZGVsaW09YXJndW1lbnRzWzBdLmRlbGltaXRlcnx8ZGVsaW07ZGVsaW09YXJndW1lbnRzWzBdLnNlcGFyYXRvcnx8ZGVsaW07cXVhbGlmaWVyPWFyZ3VtZW50c1swXS5xdWFsaWZpZXJ8fHF1YWxpZmllcjtlbmNsb3NlTnVtYmVycz0hIWFyZ3VtZW50c1swXS5lbmNsb3NlTnVtYmVycztlc2NhcGU9YXJndW1lbnRzWzBdLmVzY2FwZXx8ZXNjYXBlO2tleXM9ISFhcmd1bWVudHNbMF0ua2V5c31lbHNlIGlmKHR5cGVvZiBhcmd1bWVudHNbMF09PT1cInN0cmluZ1wiKXtkZWxpbT1hcmd1bWVudHNbMF19aWYodHlwZW9mIGFyZ3VtZW50c1sxXT09PVwic3RyaW5nXCIpcXVhbGlmaWVyPWFyZ3VtZW50c1sxXTtpZihhcmd1bWVudHNbMV09PT1udWxsKXF1YWxpZmllcj1udWxsO2lmKHRoaXMub3JpZyBpbnN0YW5jZW9mIEFycmF5KWRhdGFBcnJheT10aGlzLm9yaWc7ZWxzZXtmb3IodmFyIGtleSBpbiB0aGlzLm9yaWcpaWYodGhpcy5vcmlnLmhhc093blByb3BlcnR5KGtleSkpaWYoa2V5cylkYXRhQXJyYXkucHVzaChrZXkpO2Vsc2UgZGF0YUFycmF5LnB1c2godGhpcy5vcmlnW2tleV0pfXZhciByZXA9ZXNjYXBlK3F1YWxpZmllcjt2YXIgYnVpbGRTdHJpbmc9W107Zm9yKHZhciBpPTA7aTxkYXRhQXJyYXkubGVuZ3RoOysraSl7dmFyIHNob3VsZFF1YWxpZnk9aGFzVmFsKHF1YWxpZmllcik7aWYodHlwZW9mIGRhdGFBcnJheVtpXT09XCJudW1iZXJcIilzaG91bGRRdWFsaWZ5Jj1lbmNsb3NlTnVtYmVycztpZihzaG91bGRRdWFsaWZ5KWJ1aWxkU3RyaW5nLnB1c2gocXVhbGlmaWVyKTtpZihkYXRhQXJyYXlbaV0hPT1udWxsJiZkYXRhQXJyYXlbaV0hPT11bmRlZmluZWQpe3ZhciBkPW5ldyBTKGRhdGFBcnJheVtpXSkucmVwbGFjZUFsbChxdWFsaWZpZXIscmVwKS5zO2J1aWxkU3RyaW5nLnB1c2goZCl9ZWxzZSBidWlsZFN0cmluZy5wdXNoKFwiXCIpO2lmKHNob3VsZFF1YWxpZnkpYnVpbGRTdHJpbmcucHVzaChxdWFsaWZpZXIpO2lmKGRlbGltKWJ1aWxkU3RyaW5nLnB1c2goZGVsaW0pfWJ1aWxkU3RyaW5nLmxlbmd0aD1idWlsZFN0cmluZy5sZW5ndGgtMTtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoYnVpbGRTdHJpbmcuam9pbihcIlwiKSl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc30sdW5kZXJzY29yZTpmdW5jdGlvbigpe3ZhciBzPXRoaXMudHJpbSgpLnMucmVwbGFjZSgvKFthLXpcXGRdKShbQS1aXSspL2csXCIkMV8kMlwiKS5yZXBsYWNlKC9bLVxcc10rL2csXCJfXCIpLnRvTG93ZXJDYXNlKCk7aWYobmV3IFModGhpcy5zLmNoYXJBdCgwKSkuaXNVcHBlcigpKXtzPVwiX1wiK3N9cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfSx1bmVzY2FwZUhUTUw6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zLnJlcGxhY2UoL1xcJihbXjtdKyk7L2csZnVuY3Rpb24oZW50aXR5LGVudGl0eUNvZGUpe3ZhciBtYXRjaDtpZihlbnRpdHlDb2RlIGluIGVzY2FwZUNoYXJzKXtyZXR1cm4gZXNjYXBlQ2hhcnNbZW50aXR5Q29kZV19ZWxzZSBpZihtYXRjaD1lbnRpdHlDb2RlLm1hdGNoKC9eI3goW1xcZGEtZkEtRl0rKSQvKSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobWF0Y2hbMV0sMTYpKX1lbHNlIGlmKG1hdGNoPWVudGl0eUNvZGUubWF0Y2goL14jKFxcZCspJC8pKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh+fm1hdGNoWzFdKX1lbHNle3JldHVybiBlbnRpdHl9fSkpfSx2YWx1ZU9mOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucy52YWx1ZU9mKCl9LHdyYXBIVE1MOmZ1bmN0aW9uKHRhZ05hbWUsdGFnQXR0cnMpe3ZhciBzPXRoaXMucyxlbD10YWdOYW1lPT1udWxsP1wic3BhblwiOnRhZ05hbWUsZWxBdHRyPVwiXCIsd3JhcHBlZD1cIlwiO2lmKHR5cGVvZiB0YWdBdHRycz09XCJvYmplY3RcIilmb3IodmFyIHByb3AgaW4gdGFnQXR0cnMpZWxBdHRyKz1cIiBcIitwcm9wKyc9XCInK25ldyB0aGlzLmNvbnN0cnVjdG9yKHRhZ0F0dHJzW3Byb3BdKS5lc2NhcGVIVE1MKCkrJ1wiJztzPXdyYXBwZWQuY29uY2F0KFwiPFwiLGVsLGVsQXR0cixcIj5cIix0aGlzLFwiPC9cIixlbCxcIj5cIik7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHMpfX07dmFyIG1ldGhvZHNBZGRlZD1bXTtmdW5jdGlvbiBleHRlbmRQcm90b3R5cGUoKXtmb3IodmFyIG5hbWUgaW4gX19zcCl7KGZ1bmN0aW9uKG5hbWUpe3ZhciBmdW5jPV9fc3BbbmFtZV07aWYoIV9fbnNwLmhhc093blByb3BlcnR5KG5hbWUpKXttZXRob2RzQWRkZWQucHVzaChuYW1lKTtfX25zcFtuYW1lXT1mdW5jdGlvbigpe1N0cmluZy5wcm90b3R5cGUucz10aGlzO3JldHVybiBmdW5jLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fSkobmFtZSl9fWZ1bmN0aW9uIHJlc3RvcmVQcm90b3R5cGUoKXtmb3IodmFyIGk9MDtpPG1ldGhvZHNBZGRlZC5sZW5ndGg7KytpKWRlbGV0ZSBTdHJpbmcucHJvdG90eXBlW21ldGhvZHNBZGRlZFtpXV07bWV0aG9kc0FkZGVkLmxlbmd0aD0wfXZhciBuYXRpdmVQcm9wZXJ0aWVzPWdldE5hdGl2ZVN0cmluZ1Byb3BlcnRpZXMoKTtmb3IodmFyIG5hbWUgaW4gbmF0aXZlUHJvcGVydGllcyl7KGZ1bmN0aW9uKG5hbWUpe3ZhciBzdHJpbmdQcm9wPV9fbnNwW25hbWVdO2lmKHR5cGVvZiBzdHJpbmdQcm9wPT1cImZ1bmN0aW9uXCIpe2lmKCFfX3NwW25hbWVdKXtpZihuYXRpdmVQcm9wZXJ0aWVzW25hbWVdPT09XCJzdHJpbmdcIil7X19zcFtuYW1lXT1mdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihzdHJpbmdQcm9wLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9fWVsc2V7X19zcFtuYW1lXT1zdHJpbmdQcm9wfX19fSkobmFtZSl9X19zcC5yZXBlYXQ9X19zcC50aW1lcztfX3NwLmluY2x1ZGU9X19zcC5jb250YWlucztfX3NwLnRvSW50ZWdlcj1fX3NwLnRvSW50O19fc3AudG9Cb29sPV9fc3AudG9Cb29sZWFuO19fc3AuZGVjb2RlSFRNTEVudGl0aWVzPV9fc3AuZGVjb2RlSHRtbEVudGl0aWVzO19fc3AuY29uc3RydWN0b3I9UztmdW5jdGlvbiBnZXROYXRpdmVTdHJpbmdQcm9wZXJ0aWVzKCl7dmFyIG5hbWVzPWdldE5hdGl2ZVN0cmluZ1Byb3BlcnR5TmFtZXMoKTt2YXIgcmV0T2JqPXt9O2Zvcih2YXIgaT0wO2k8bmFtZXMubGVuZ3RoOysraSl7dmFyIG5hbWU9bmFtZXNbaV07dmFyIGZ1bmM9X19uc3BbbmFtZV07dHJ5e3ZhciB0eXBlPXR5cGVvZiBmdW5jLmFwcGx5KFwidGVzdHN0cmluZ1wiLFtdKTtyZXRPYmpbbmFtZV09dHlwZX1jYXRjaChlKXt9fXJldHVybiByZXRPYmp9ZnVuY3Rpb24gZ2V0TmF0aXZlU3RyaW5nUHJvcGVydHlOYW1lcygpe3ZhciByZXN1bHRzPVtdO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKXtyZXN1bHRzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKF9fbnNwKTtyZXN1bHRzLnNwbGljZShyZXN1bHRzLmluZGV4T2YoXCJ2YWx1ZU9mXCIpLDEpO3Jlc3VsdHMuc3BsaWNlKHJlc3VsdHMuaW5kZXhPZihcInRvU3RyaW5nXCIpLDEpO3JldHVybiByZXN1bHRzfWVsc2V7dmFyIHN0cmluZ05hbWVzPXt9O3ZhciBvYmplY3ROYW1lcz1bXTtmb3IodmFyIG5hbWUgaW4gU3RyaW5nLnByb3RvdHlwZSlzdHJpbmdOYW1lc1tuYW1lXT1uYW1lO2Zvcih2YXIgbmFtZSBpbiBPYmplY3QucHJvdG90eXBlKWRlbGV0ZSBzdHJpbmdOYW1lc1tuYW1lXTtmb3IodmFyIG5hbWUgaW4gc3RyaW5nTmFtZXMpe3Jlc3VsdHMucHVzaChuYW1lKX1yZXR1cm4gcmVzdWx0c319ZnVuY3Rpb24gRXhwb3J0KHN0cil7cmV0dXJuIG5ldyBTKHN0cil9RXhwb3J0LmV4dGVuZFByb3RvdHlwZT1leHRlbmRQcm90b3R5cGU7RXhwb3J0LnJlc3RvcmVQcm90b3R5cGU9cmVzdG9yZVByb3RvdHlwZTtFeHBvcnQuVkVSU0lPTj1WRVJTSU9OO0V4cG9ydC5UTVBMX09QRU49XCJ7e1wiO0V4cG9ydC5UTVBMX0NMT1NFPVwifX1cIjtFeHBvcnQuRU5USVRJRVM9RU5USVRJRVM7aWYodHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCImJnR5cGVvZiBtb2R1bGUuZXhwb3J0cyE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPUV4cG9ydH1lbHNle2lmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmdW5jdGlvbigpe3JldHVybiBFeHBvcnR9KX1lbHNle3dpbmRvdy5TPUV4cG9ydH19ZnVuY3Rpb24gbXVsdGlBcmdzKGFyZ3MsZm4pe3ZhciByZXN1bHQ9W10saTtmb3IoaT0wO2k8YXJncy5sZW5ndGg7aSsrKXtyZXN1bHQucHVzaChhcmdzW2ldKTtpZihmbilmbi5jYWxsKGFyZ3MsYXJnc1tpXSxpKX1yZXR1cm4gcmVzdWx0fXZhciBlc2NhcGVDaGFycz17bHQ6XCI8XCIsZ3Q6XCI+XCIscXVvdDonXCInLGFwb3M6XCInXCIsYW1wOlwiJlwifTt2YXIgcmV2ZXJzZWRFc2NhcGVDaGFycz17fTtmb3IodmFyIGtleSBpbiBlc2NhcGVDaGFycyl7cmV2ZXJzZWRFc2NhcGVDaGFyc1tlc2NhcGVDaGFyc1trZXldXT1rZXl9RU5USVRJRVM9e2FtcDpcIiZcIixndDpcIj5cIixsdDpcIjxcIixxdW90OidcIicsYXBvczpcIidcIixBRWxpZzoxOTgsQWFjdXRlOjE5MyxBY2lyYzoxOTQsQWdyYXZlOjE5MixBcmluZzoxOTcsQXRpbGRlOjE5NSxBdW1sOjE5NixDY2VkaWw6MTk5LEVUSDoyMDgsRWFjdXRlOjIwMSxFY2lyYzoyMDIsRWdyYXZlOjIwMCxFdW1sOjIwMyxJYWN1dGU6MjA1LEljaXJjOjIwNixJZ3JhdmU6MjA0LEl1bWw6MjA3LE50aWxkZToyMDksT2FjdXRlOjIxMSxPY2lyYzoyMTIsT2dyYXZlOjIxMCxPc2xhc2g6MjE2LE90aWxkZToyMTMsT3VtbDoyMTQsVEhPUk46MjIyLFVhY3V0ZToyMTgsVWNpcmM6MjE5LFVncmF2ZToyMTcsVXVtbDoyMjAsWWFjdXRlOjIyMSxhYWN1dGU6MjI1LGFjaXJjOjIyNixhZWxpZzoyMzAsYWdyYXZlOjIyNCxhcmluZzoyMjksYXRpbGRlOjIyNyxhdW1sOjIyOCxjY2VkaWw6MjMxLGVhY3V0ZToyMzMsZWNpcmM6MjM0LGVncmF2ZToyMzIsZXRoOjI0MCxldW1sOjIzNSxpYWN1dGU6MjM3LGljaXJjOjIzOCxpZ3JhdmU6MjM2LGl1bWw6MjM5LG50aWxkZToyNDEsb2FjdXRlOjI0MyxvY2lyYzoyNDQsb2dyYXZlOjI0Mixvc2xhc2g6MjQ4LG90aWxkZToyNDUsb3VtbDoyNDYsc3psaWc6MjIzLHRob3JuOjI1NCx1YWN1dGU6MjUwLHVjaXJjOjI1MSx1Z3JhdmU6MjQ5LHV1bWw6MjUyLHlhY3V0ZToyNTMseXVtbDoyNTUsY29weToxNjkscmVnOjE3NCxuYnNwOjE2MCxpZXhjbDoxNjEsY2VudDoxNjIscG91bmQ6MTYzLGN1cnJlbjoxNjQseWVuOjE2NSxicnZiYXI6MTY2LHNlY3Q6MTY3LHVtbDoxNjgsb3JkZjoxNzAsbGFxdW86MTcxLG5vdDoxNzIsc2h5OjE3MyxtYWNyOjE3NSxkZWc6MTc2LHBsdXNtbjoxNzcsc3VwMToxODUsc3VwMjoxNzgsc3VwMzoxNzksYWN1dGU6MTgwLG1pY3JvOjE4MSxwYXJhOjE4MixtaWRkb3Q6MTgzLGNlZGlsOjE4NCxvcmRtOjE4NixyYXF1bzoxODcsZnJhYzE0OjE4OCxmcmFjMTI6MTg5LGZyYWMzNDoxOTAsaXF1ZXN0OjE5MSx0aW1lczoyMTUsZGl2aWRlOjI0NyxcIk9FbGlnO1wiOjMzOCxcIm9lbGlnO1wiOjMzOSxcIlNjYXJvbjtcIjozNTIsXCJzY2Fyb247XCI6MzUzLFwiWXVtbDtcIjozNzYsXCJmbm9mO1wiOjQwMixcImNpcmM7XCI6NzEwLFwidGlsZGU7XCI6NzMyLFwiQWxwaGE7XCI6OTEzLFwiQmV0YTtcIjo5MTQsXCJHYW1tYTtcIjo5MTUsXCJEZWx0YTtcIjo5MTYsXCJFcHNpbG9uO1wiOjkxNyxcIlpldGE7XCI6OTE4LFwiRXRhO1wiOjkxOSxcIlRoZXRhO1wiOjkyMCxcIklvdGE7XCI6OTIxLFwiS2FwcGE7XCI6OTIyLFwiTGFtYmRhO1wiOjkyMyxcIk11O1wiOjkyNCxcIk51O1wiOjkyNSxcIlhpO1wiOjkyNixcIk9taWNyb247XCI6OTI3LFwiUGk7XCI6OTI4LFwiUmhvO1wiOjkyOSxcIlNpZ21hO1wiOjkzMSxcIlRhdTtcIjo5MzIsXCJVcHNpbG9uO1wiOjkzMyxcIlBoaTtcIjo5MzQsXCJDaGk7XCI6OTM1LFwiUHNpO1wiOjkzNixcIk9tZWdhO1wiOjkzNyxcImFscGhhO1wiOjk0NSxcImJldGE7XCI6OTQ2LFwiZ2FtbWE7XCI6OTQ3LFwiZGVsdGE7XCI6OTQ4LFwiZXBzaWxvbjtcIjo5NDksXCJ6ZXRhO1wiOjk1MCxcImV0YTtcIjo5NTEsXCJ0aGV0YTtcIjo5NTIsXCJpb3RhO1wiOjk1MyxcImthcHBhO1wiOjk1NCxcImxhbWJkYTtcIjo5NTUsXCJtdTtcIjo5NTYsXCJudTtcIjo5NTcsXCJ4aTtcIjo5NTgsXCJvbWljcm9uO1wiOjk1OSxcInBpO1wiOjk2MCxcInJobztcIjo5NjEsXCJzaWdtYWY7XCI6OTYyLFwic2lnbWE7XCI6OTYzLFwidGF1O1wiOjk2NCxcInVwc2lsb247XCI6OTY1LFwicGhpO1wiOjk2NixcImNoaTtcIjo5NjcsXCJwc2k7XCI6OTY4LFwib21lZ2E7XCI6OTY5LFwidGhldGFzeW07XCI6OTc3LFwidXBzaWg7XCI6OTc4LFwicGl2O1wiOjk4MixcImVuc3A7XCI6ODE5NCxcImVtc3A7XCI6ODE5NSxcInRoaW5zcDtcIjo4MjAxLFwienduajtcIjo4MjA0LFwiendqO1wiOjgyMDUsXCJscm07XCI6ODIwNixcInJsbTtcIjo4MjA3LFwibmRhc2g7XCI6ODIxMSxcIm1kYXNoO1wiOjgyMTIsXCJsc3F1bztcIjo4MjE2LFwicnNxdW87XCI6ODIxNyxcInNicXVvO1wiOjgyMTgsXCJsZHF1bztcIjo4MjIwLFwicmRxdW87XCI6ODIyMSxcImJkcXVvO1wiOjgyMjIsXCJkYWdnZXI7XCI6ODIyNCxcIkRhZ2dlcjtcIjo4MjI1LFwiYnVsbDtcIjo4MjI2LFwiaGVsbGlwO1wiOjgyMzAsXCJwZXJtaWw7XCI6ODI0MCxcInByaW1lO1wiOjgyNDIsXCJQcmltZTtcIjo4MjQzLFwibHNhcXVvO1wiOjgyNDksXCJyc2FxdW87XCI6ODI1MCxcIm9saW5lO1wiOjgyNTQsXCJmcmFzbDtcIjo4MjYwLFwiZXVybztcIjo4MzY0LFwiaW1hZ2U7XCI6ODQ2NSxcIndlaWVycDtcIjo4NDcyLFwicmVhbDtcIjo4NDc2LFwidHJhZGU7XCI6ODQ4MixcImFsZWZzeW07XCI6ODUwMSxcImxhcnI7XCI6ODU5MixcInVhcnI7XCI6ODU5MyxcInJhcnI7XCI6ODU5NCxcImRhcnI7XCI6ODU5NSxcImhhcnI7XCI6ODU5NixcImNyYXJyO1wiOjg2MjksXCJsQXJyO1wiOjg2NTYsXCJ1QXJyO1wiOjg2NTcsXCJyQXJyO1wiOjg2NTgsXCJkQXJyO1wiOjg2NTksXCJoQXJyO1wiOjg2NjAsXCJmb3JhbGw7XCI6ODcwNCxcInBhcnQ7XCI6ODcwNixcImV4aXN0O1wiOjg3MDcsXCJlbXB0eTtcIjo4NzA5LFwibmFibGE7XCI6ODcxMSxcImlzaW47XCI6ODcxMixcIm5vdGluO1wiOjg3MTMsXCJuaTtcIjo4NzE1LFwicHJvZDtcIjo4NzE5LFwic3VtO1wiOjg3MjEsXCJtaW51cztcIjo4NzIyLFwibG93YXN0O1wiOjg3MjcsXCJyYWRpYztcIjo4NzMwLFwicHJvcDtcIjo4NzMzLFwiaW5maW47XCI6ODczNCxcImFuZztcIjo4NzM2LFwiYW5kO1wiOjg3NDMsXCJvcjtcIjo4NzQ0LFwiY2FwO1wiOjg3NDUsXCJjdXA7XCI6ODc0NixcImludDtcIjo4NzQ3LFwidGhlcmU0O1wiOjg3NTYsXCJzaW07XCI6ODc2NCxcImNvbmc7XCI6ODc3MyxcImFzeW1wO1wiOjg3NzYsXCJuZTtcIjo4ODAwLFwiZXF1aXY7XCI6ODgwMSxcImxlO1wiOjg4MDQsXCJnZTtcIjo4ODA1LFwic3ViO1wiOjg4MzQsXCJzdXA7XCI6ODgzNSxcIm5zdWI7XCI6ODgzNixcInN1YmU7XCI6ODgzOCxcInN1cGU7XCI6ODgzOSxcIm9wbHVzO1wiOjg4NTMsXCJvdGltZXM7XCI6ODg1NSxcInBlcnA7XCI6ODg2OSxcInNkb3Q7XCI6ODkwMSxcImxjZWlsO1wiOjg5NjgsXCJyY2VpbDtcIjo4OTY5LFwibGZsb29yO1wiOjg5NzAsXCJyZmxvb3I7XCI6ODk3MSxcImxhbmc7XCI6OTAwMSxcInJhbmc7XCI6OTAwMixcImxvejtcIjo5Njc0LFwic3BhZGVzO1wiOjk4MjQsXCJjbHVicztcIjo5ODI3LFwiaGVhcnRzO1wiOjk4MjksXCJkaWFtcztcIjo5ODMwfX0uY2FsbCh0aGlzKTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIGhvbWUgbW9kdWxlXG5hbmd1bGFyLm1vZHVsZSgnY2VyZXNBbmltYXRpb25CbG9ja0N0cmxNb2R1bGUnLCBbXSkuY29udHJvbGxlcignY2VyZXNBbmltYXRpb25CbG9ja0N0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyR3aW5kb3cnLFxuICAgICckZWxlbWVudCcsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdywgJGVsZW1lbnQpIHtcblxuICAgICAgICAvLyBIRUxQRVJTXG4gICAgICAgIHZhciBnZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNlcmVzX3VpZCA9ICRlbGVtZW50LmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIHJldHVybiAkd2luZG93LmNlcmVzRGF0YVtjZXJlc191aWRdO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZGF0YSA9IGdldERhdGEoKTtcblxuICAgICAgICAvLyBUaGlzIHJvdXRlcyB0byBuZy1zdHlsZVxuICAgICAgICAvLyAkc2NvcGUubXlTdHlsZSA9IHsgLi4uIH1cbiAgICB9XG5dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaG9tZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdjZXJlc0J1dHRvbk91dGxpbmVDdHJsTW9kdWxlJywgW10pLmNvbnRyb2xsZXIoJ2NlcmVzQnV0dG9uT3V0bGluZUN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyR3aW5kb3cnLFxuICAgICckZWxlbWVudCcsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdywgJGVsZW1lbnQpIHtcblxuICAgICAgICAvLyBIRUxQRVJTXG4gICAgICAgIHZhciBnZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNlcmVzX3VpZCA9ICRlbGVtZW50LmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIHJldHVybiAkd2luZG93LmNlcmVzRGF0YVtjZXJlc191aWRdO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZGF0YSA9IGdldERhdGEoKTtcblxuICAgICAgICAvLyBUaGlzIHJvdXRlcyB0byBuZy1zdHlsZVxuICAgICAgICAvLyAkc2NvcGUubXlTdHlsZSA9IHsgLi4uIH1cbiAgICB9XG5dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaG9tZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdjZXJlc0J1dHRvblNvbGlkQ3RybE1vZHVsZScsIFtdKS5jb250cm9sbGVyKCdjZXJlc0J1dHRvblNvbGlkQ3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnJHdpbmRvdycsXG4gICAgJyRlbGVtZW50JyxcbiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93LCAkZWxlbWVudCkge1xuXG4gICAgICAgIC8vIEhFTFBFUlNcbiAgICAgICAgdmFyIGdldERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2VyZXNfdWlkID0gJGVsZW1lbnQuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgcmV0dXJuICR3aW5kb3cuY2VyZXNEYXRhW2NlcmVzX3VpZF07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YSgpO1xuXG4gICAgICAgIC8vIFRoaXMgcm91dGVzIHRvIG5nLXN0eWxlXG4gICAgICAgIC8vICRzY29wZS5teVN0eWxlID0geyAuLi4gfVxuICAgIH1cbl0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHNuYXp6eSA9IHJlcXVpcmUoJy4vc25henp5Jyk7XG52YXIgXyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvbG9kYXNoL2Rpc3QvbG9kYXNoLmNvbXBhdC5qc1wiKTtcblxuLy8gaG9tZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdjZXJlc0dvb2dsZU1hcEN0cmxNb2R1bGUnLCBbXSkuY29udHJvbGxlcignY2VyZXNHb29nbGVNYXBDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckd2luZG93JyxcbiAgICAnJGVsZW1lbnQnLFxuICAgICckbG9nJyxcbiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93LCAkZWxlbWVudCwgJGxvZykge1xuXG4gICAgICAgIC8vIEhFTFBFUlNcbiAgICAgICAgdmFyIGdldERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2VyZXNfdWlkID0gJGVsZW1lbnQuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgcmV0dXJuICR3aW5kb3cuY2VyZXNEYXRhW2NlcmVzX3VpZF07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YSgpO1xuXG4gICAgICAgICRzY29wZS5tYXAgPSB7XG4gICAgICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgICAgICBsYXRpdHVkZTogZGF0YS5sb2NhdGlvbl9sYXQsXG4gICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBkYXRhLmxvY2F0aW9uX2xvbmdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB6b29tOiBkYXRhLm1hcF96b29tLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBkYXRhLmRyYWdnYWJsZVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB2YWx1ZSA9XG4gICAgICAgICAgICBfLmZpbmQoc25henp5LnN0eWxlcywgZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlLm5hbWUgPT0gZGF0YS5zdHlsaW5nO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAkc2NvcGUub3B0aW9ucy5zdHlsZXMgPSB2YWx1ZS5qc29uXG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUub3B0aW9ucy5tYXBUeXBlSWQgPSAkd2luZG93Lmdvb2dsZS5tYXBzLk1hcFR5cGVJZFtkYXRhLm1hcF90eXBlXTtcbiAgICAgICAgJHNjb3BlLm9wdGlvbnMuc2Nyb2xsd2hlZWwgPSAhZGF0YS5kaXNwbGF5X21hcF96b29tX3Njcm9sbDtcbiAgICAgICAgJHNjb3BlLm9wdGlvbnMubWFwVHlwZUNvbnRyb2wgPSBkYXRhLm1hcF90eXBlX2NvbnRyb2w7XG4gICAgICAgICRzY29wZS5vcHRpb25zLnBhbkNvbnRyb2wgPSBkYXRhLnBhbl9jb250cm9sO1xuXG4gICAgICAgICRzY29wZS5vcHRpb25zLnN0cmVldFZpZXdDb250cm9sID0gZGF0YS5zdHJlZXRfdmlld19jb250cm9sO1xuXG4gICAgICAgICRzY29wZS5vcHRpb25zLnpvb21Db250cm9sID0gZGF0YS56b29tX2NvbnRyb2w7XG4gICAgICAgIHZhciB6b29tU2l6ZSA9IGRhdGEuem9vbV9jb250cm9sX3NpemUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgJHNjb3BlLm9wdGlvbnMuem9vbUNvbnRyb2xPcHRpb25zID0ge1xuICAgICAgICAgICAgc3R5bGU6ICR3aW5kb3cuZ29vZ2xlLm1hcHMuWm9vbUNvbnRyb2xTdHlsZVt6b29tU2l6ZV1cbiAgICAgICAgfTtcblxuICAgIH1cbl0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc3R5bGVzOiBbXG4gICAgICAgIHtcIm5hbWVcIjogXCJEZWZhdWx0XCIsIFwianNvblwiOiBbXX0sXG4gICAgICAgIHtcImlkXCI6IDE1LCBcIm5hbWVcIjogXCJTdWJ0bGUgR3JheXNjYWxlXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDY1fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA1MX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDMwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUucHJvdmluY2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI1fSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmYwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI1fSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC05N31cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxLCBcIm5hbWVcIjogXCJQYWxlIERhd25cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYWNiY2M5XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjJlNWQ0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2M1YzZjNlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZTRkN2M2XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmYmZhZjdcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjNWRhYzZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzN9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwifSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDI1LCBcIm5hbWVcIjogXCJCbHVlIHdhdGVyXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNDZiY2VjXCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YyZjJmMlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0NX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNDQ0NDQ0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMzgsIFwibmFtZVwiOiBcIlNoYWRlcyBvZiBHcmV5XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTd9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxN31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjl9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxNn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxNn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAzNn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0MH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTl9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE3fSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMS4yfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDIsIFwibmFtZVwiOiBcIk1pZG5pZ2h0IENvbW1hbmRlclwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAyMTAxOVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzA4MzA0YlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwYzQxNTJcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwYjQzNGZcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwYjNkNTFcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE2fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTN9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzE0NjQ3NFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzE0NGI1M1wifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTR9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAxLjR9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcblxuICAgICAgICB7XCJpZFwiOiAxOCwgXCJuYW1lXCI6IFwiUmV0cm9cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODRhZmEzXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA1Mn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTd9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuMzZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzNmNTE4Y1wifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDI5LCBcIm5hbWVcIjogXCJMaWdodCBNb25vY2hyb21lXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZTllYmVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTc4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjd9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNiYmMwYzRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtOTN9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzMX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZTllYmVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTkwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTh9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2U5ZWJlZFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMmMyZTMzXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogN30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE5fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmJjMGM0XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTkzfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNiYmMwYzRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtOTN9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAzOSwgXCJuYW1lXCI6IFwiUGFwZXJcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNWY5NGZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyNn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogNS44Nn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjZ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTg1fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwifSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDA2NmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNzR9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNDIsIFwibmFtZVwiOiBcIkFwcGxlIE1hcHMtZXNxdWVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYTJkYWYyXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2Y3ZjFkZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2QwZTNiNFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsLnRlcnJhaW5cIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2JkZTZhYlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5tZWRpY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZiZDNkYVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5idXNpbmVzc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZTE1ZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZWZkMTUxXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcImJsYWNrXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uLmFpcnBvcnRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjZmIyZGJcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAyMCwgXCJuYW1lXCI6IFwiR293YWxsYVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubGFuZF9wYXJjZWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ExY2RmY1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDMwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNDl9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmNDk5MzVcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmYWQ5NTlcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA1LCBcIm5hbWVcIjogXCJHcmV5c2NhbGVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjV9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTksIFwibmFtZVwiOiBcIlN1YnRsZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTcwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzd9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDEuMTV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC4yNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTB9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLnByb3ZpbmNlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUucHJvdmluY2VcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5wcm92aW5jZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNTMsIFwibmFtZVwiOiBcIkZsYXQgTWFwXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZlZTM3OVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZWUzNzlcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjNmNGY0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjN2ZjOGVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODNjZWFkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC45fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTMsIFwibmFtZVwiOiBcIk5ldXRyYWwgQmx1ZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxOTMzNDFcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmM1YTcxXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMyOTc2OGFcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0zN31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNDA2ZDgwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM0MDZkODBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjM2U2MDZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAyfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjg0fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC42fSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxYTM1NDFcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMyYzVhNzFcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAyNywgXCJuYW1lXCI6IFwiU2hpZnQgV29ya2VyXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5idXNpbmVzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmJ1c2luZXNzXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGxhY2Vfb2Zfd29yc2hpcFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBsYWNlX29mX3dvcnNoaXBcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDUwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNTBhNWQxXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubmVpZ2hib3Job29kXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMzMzMzMzXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC41fSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMzMzMzMzNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA1MH1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA0NCwgXCJuYW1lXCI6IFwiTWFwQm94XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA0M30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMX0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwODhmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmYwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDk5fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzgwODA4MFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTR9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZWNlMmQ5XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjY2RjYTFcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNzY3Njc2XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2I4Y2I5M1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNwb3J0c19jb21wbGV4XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLm1lZGljYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuYnVzaW5lc3NcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDU0LCBcIm5hbWVcIjogXCJSb3V0ZVhMXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDQwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTYwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTYwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDYwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMzcsIFwibmFtZVwiOiBcIkx1bmFyIExhbmRzY2FwZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmMWEwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJpbnZlcnRfbGlnaHRuZXNzXCI6IHRydWV9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDMzfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMkQzMzNDXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMzUsIFwibmFtZVwiOiBcIkF2b2NhZG8gV29ybGRcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2FlZTJlMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2FiY2U4M1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzc2OUU3MlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzdCODc1OFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjRUJGNEE0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjOGRhYjY4XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzVCNUIzRlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0FCQ0U4M1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjQTRDNjdEXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM5QkJGNzJcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjRUJGNEE0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzg3YWU3OVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjN2YyMjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogNC4xfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNDk1NDIxXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubmVpZ2hib3Job29kXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTcsIFwibmFtZVwiOiBcIkJyaWdodCAmYW1wOyBCdWJibHlcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxOWEwZDhcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiA2fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZTg1MTEzXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZmU5ZTRcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00MH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZmU5ZTRcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCJ9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2VmZTllNFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMxMWZmMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM0Y2ZmMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA1OH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YwZTRkM1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2VmZTllNFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZmU5ZTRcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogODAsIFwibmFtZVwiOiBcIkNvb2wgR3JleVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwYWFmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDIuMTV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyNH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA1N31cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA2LCBcIm5hbWVcIjogXCJDb3VudHJpZXNcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDQzLCBcIm5hbWVcIjogXCJCZW50bGV5XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGMUZGMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMjcuNH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDkuNH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDA5OUZGXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTIwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzYuNH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwRkY0RlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZCMzAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTM4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTEuMn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMEI2RkZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA0LjJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNjMuNH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjOUZGRjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMjIsIFwibmFtZVwiOiBcIk9sZCBUaW1leVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODRhZmEzXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA1Mn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNzd9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwifVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNywgXCJuYW1lXCI6IFwiSWN5IEJsdWVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMyYzNlNTBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAyNTB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDc0LCBcIm5hbWVcIjogXCJiZWNvbWVhZGlub3NhdXJcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmNWY1ZjJcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuYXR0cmFjdGlvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmJ1c2luZXNzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5tZWRpY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wbGFjZV9vZl93b3JzaGlwXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5zY2hvb2xcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNwb3J0c19jb21wbGV4XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNzFjOGQ0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZTVlOGU3XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM4YmExMjlcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNwb3J0c19jb21wbGV4XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2M3YzdjN1wifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhMGQzZDNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzkxYjY1ZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMS41MX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmdvdmVybm1lbnRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIn0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIn0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCJ9XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA2MSwgXCJuYW1lXCI6IFwiQmx1ZSBFc3NlbmNlXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2UwZWZlZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMTkwMGZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2MwZThlOFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwifSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzdkY2RjZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDcwMH1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxMiwgXCJuYW1lXCI6IFwiU25henp5IE1hcHNcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMzMzNzM5XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzJlY2M3MVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzJlY2M3MVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTd9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzJlY2M3MVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmVjYzcxXCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTE1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmVjYzcxXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTh9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzJlY2M3MVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTM0fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMzMzM3MzlcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuOH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzJlY2M3MVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzMzMzczOVwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC4zfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNjAsIFwibmFtZVwiOiBcIkJsdWUgR3JheVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNiNWNiZTRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZmVmZWZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODNhNWIwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNiZGNkZDNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2UzZWVkM1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzM31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCJ9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNTUsIFwibmFtZVwiOiBcIlN1YnRsZSBHcmV5c2NhbGUgTWFwXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2JiYmJiYlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNkZGRkZGRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTN9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDMwLCBcIm5hbWVcIjogXCJDb2JhbHRcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWxsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJpbnZlcnRfbGlnaHRuZXNzXCI6IHRydWV9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzMH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC41fSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNDM1MTU4XCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNzksIFwibmFtZVwiOiBcIkJsYWNrIGFuZCBXaGl0ZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuOH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDMxLCBcIm5hbWVcIjogXCJSZWQgSHVlc1wiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2RkMGQwZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMjEsIFwibmFtZVwiOiBcIkhvcHBlclwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMTY1YzY0XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMzR9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNjl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYjdjYWFhXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTE0fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTE4fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNjYmRhYzFcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC05fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM4ZDliODNcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtODl9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZDRkYWQwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTg4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTR9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmRjNWI2XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTg5fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTN9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmRjNWI2XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTg5fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI2fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2MxNzExOFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDYxfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTQ1fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzhiYTk3NVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC00Nn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yOH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYTQzMjE4XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNzR9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUucHJvdmluY2VcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLm5laWdoYm9yaG9vZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzNhMzkzNVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTd9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kubWVkaWNhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjY2JhOTIzXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNTB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNDZ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDQ3LCBcIm5hbWVcIjogXCJOYXR1cmVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGQTgwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM1M0ZGMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNzN9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0MH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZCRkYwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDBGRkZEXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDMwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwQkZGRlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDZ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA4fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM2Nzk3MTRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAzMy40fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI1LjR9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNzcsIFwibmFtZVwiOiBcIkNsZWFuIEN1dFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0M2RTJGRlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0M1RTNCRlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNEMUQxQjhcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxNiwgXCJuYW1lXCI6IFwiVW5pbXBvc2VkIFRvcG9ncmFwaHlcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzcyN0Q4MlwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTMwfSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC04MH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0YzRjRGNFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogODB9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTgwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDM2LCBcIm5hbWVcIjogXCJGbGF0IGdyZWVuXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmJmZjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjV9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhNGNjNDhcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMS4xNH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTh9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5LmNvbnRyb2xsZWRfYWNjZXNzXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDMwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjc2fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC40fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTh9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM0YWFlY2NcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM3MThlMzJcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuYnVzaW5lc3NcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDY4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTYxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMi43fSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmNGY5ZThcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXkuY29udHJvbGxlZF9hY2Nlc3NcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAxLjV9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2U1MzAxM1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC00Mn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI4fVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDMsIFwibmFtZVwiOiBcIlJlZCBBbGVydFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmRmYTZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYjUyMTI3XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2M1NTMxYlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzc0MDAxYlwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZGEzYzNjXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzc0MDAxYlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2RhM2MzY1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM5OTBjMTlcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNzQwMDFiXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtOH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzZhMGQxMFwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmRmYTZcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuNH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogOCwgXCJuYW1lXCI6IFwiVHVycXVvaXNlIFdhdGVyXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMTZhMDg1XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDE0LCBcIm5hbWVcIjogXCJWaW50YWdlXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmYzNDNiXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzcwMzAzMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmYzNDNiXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAxfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDUyLCBcIm5hbWVcIjogXCJTb3VsZGlzY29cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC44fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNWRmZjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDQuOTd9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNX0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMjgsIFwibmFtZVwiOiBcIkJsdWlzaFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwN2ZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDg5fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUuY291bnRyeVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDgzLCBcIm5hbWVcIjogXCJNdXRlZCBCbHVlXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2U3ZWNmMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC03MH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTYwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDU4LCBcIm5hbWVcIjogXCJTaW1wbGUgTGFiZWxzXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA0NiwgXCJuYW1lXCI6IFwiSG9tYWdlIHRvIFRvbmVyXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZGRkZGXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW119LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubmF0dXJhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzMzMzMzM1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNjl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmF0dHJhY3Rpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5nb3Zlcm5tZW50XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNjUsIFwibmFtZVwiOiBcIkp1c3QgcGxhY2VzXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmYVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDUwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0MH1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA0MCwgXCJuYW1lXCI6IFwiVml0YW1pbiBDXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwNDM1OFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxZjhhNzBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMWY4YTcwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZkNzQwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMWY4YTcwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxZjhhNzBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xN31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjl9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxZjhhNzBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzFmOGE3MFwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC43fVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDgyLCBcIm5hbWVcIjogXCJHcmFzcyBpcyBncmVlbmVyLiBXYXRlciBpcyBibHVlci5cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwOTlkZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2FhZGQ1NVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNzUsIFwibmFtZVwiOiBcIlNoYWRlIG9mIGdyZWVuXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNzZhZWUzXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMzh9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzhkYzc0OVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC00N30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xN30sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNjNmUzYTRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxN30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjY2NjY2NjXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEzfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzVmNTg1NVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDZ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMzF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMjYsIFwibmFtZVwiOiBcIlZpbnRhZ2UgQmx1ZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUucHJvdmluY2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDA0Yjc2XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmNmNiXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUuY291bnRyeVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzdmN2Q3YVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTB9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAxfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDY4LCBcIm5hbWVcIjogXCJBcXVhXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzZjODA4MFwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNkOTgwODBcIn0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2VlZmYwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMS41fVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDg0LCBcIm5hbWVcIjogXCJQYXN0ZWwgVG9uZXNcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDQwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLnByb3ZpbmNlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZjhjMjVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDQwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYjZjNTRjXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0MH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA0MSwgXCJuYW1lXCI6IFwiSGludHMgb2YgR29sZFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzI1MjUyNVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtODF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzY2NjY2NlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTV9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNTU1NTU1XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01N30sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzc3Nzc3N1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNjYzk5MDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM0NDQ0NDRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTY0fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNTU1NTU1XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01N30sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDEwMiwgXCJuYW1lXCI6IFwiQ2xlYW4gR3JleVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmNvdW50cnlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5wcm92aW5jZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZTNlM2UzXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjY2NjY2NcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvbi5haXJwb3J0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb24uYWlycG9ydFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0ZGRkZGRlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogOSwgXCJuYW1lXCI6IFwiQ2hpbGxlZFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiAxNDl9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTc4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogLTMxfSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC00MH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIuOH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiAxNjN9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTI2fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEuMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IDN9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTI0LjI0fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTM4LjU3fVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDI0LCBcIm5hbWVcIjogXCJIb3QgUGlua1wiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmNjFhNlwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiaW52ZXJ0X2xpZ2h0bmVzc1wiOiB0cnVlfSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDQwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTB9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNDgsIFwibmFtZVwiOiBcIkhhcmQgZWRnZXNcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtODZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC03NX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogOTd9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC02OH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA5MX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yMn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjAwNGNcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNDR9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDQsIFwibmFtZVwiOiBcIlRyaXBpdHR5XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMxOTNhNzBcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmM1Y2E1XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMmM1Y2E1XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDUwLCBcIm5hbWVcIjogXCJUaGUgRW5kbGVzcyBBdGxhc1wiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhbGxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWxsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0QxRDNENFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC04OH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC03fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM5Mzk1OThcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtOTF9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMzR9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzQxNDA0MlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC05OH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC02MH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRTNFQkU1XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTYxfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTd9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRTNFQkU1XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDU3fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5jb3VudHJ5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRTNFQkU1XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDgxfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUucHJvdmluY2VcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNFM0VCRTVcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogODF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZGRkZGXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubG9jYWxpdHlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM5Mzk1OThcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAyfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLm5laWdoYm9yaG9vZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzkzOTU5OFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubmVpZ2hib3Job29kXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjOTM5NTk4XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE2fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzkzOTU5OFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzkzOTU5OFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC05OH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC04fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGRkZGRkZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNkQ2RTcxXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTk4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTQzfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZGRkZGXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZGRkZGXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDcwLCBcIm5hbWVcIjogXCJVbnNhdHVyYXRlZCBCcm93bnNcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmY0NDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTY4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTR9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNzJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIn0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDA3N2ZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDMuMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMGNjZmZcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC40NH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMzN9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNDRmZjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTIzfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwN2ZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjc3fSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDY1fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogOTl9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuMTF9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiA1LjZ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogOTl9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDkxZmZcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC04Nn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00OH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmNWUwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxLjJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTIzfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTY0fSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmY5MTAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxNn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC40N30sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDIuN31cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA5MSwgXCJuYW1lXCI6IFwiTXV0ZWQgTW9ub3RvbmVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNTR9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM0ZDQ5NDZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC40OH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDcuMTh9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMzQsIFwibmFtZVwiOiBcIk5lb24gV29ybGRcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjZ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNTksIFwibmFtZVwiOiBcIkxpZ2h0IEdyZWVuXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmFmNGM0XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZmZlZmRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhbGxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxMSwgXCJuYW1lXCI6IFwiQmx1ZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDAwMGIwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImludmVydF9saWdodG5lc3NcIjogXCJ0cnVlXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTMwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDEwLCBcIm5hbWVcIjogXCJNaXhlZFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDBkZDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNkZDAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDAwNDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmYwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogOTAsIFwibmFtZVwiOiBcIkxpZ2h0IEJsdWUgV2F0ZXJcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM3MWQ2ZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNkZWVjZWNcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNzN9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA3Mn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmFiYWJhXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI1fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2UzZTNlM1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNTljZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzR9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDczLCBcIm5hbWVcIjogXCJBIERhcmsgV29ybGRcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzEzMTMxNFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMTMxMzEzXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA3fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI1fVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDc2LCBcIm5hbWVcIjogXCJIYXNodGFnTmluZU5pbmVOaW5lXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjYmJiYmJiXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM5OTk5OTlcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTMzfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjOTk5OTk5XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC02fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNhYWFhYWFcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTE1fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA0NSwgXCJuYW1lXCI6IFwiQ2FuZHkgQ29sb3VycyBcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGRTEwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDM0LjQ4Mjc1ODYyMDY4OTY4fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEuNDkwMTk2MDc4NDMxMzUzfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGRjAwOUFcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMi45NzAyOTcwMjk3MDMwMDV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTcuODE1Njg2Mjc0NTA5ODE1fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZFMTAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogOC42MDAwMDAwMDAwMDAwMDl9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNC40MDAwMDAwMDAwMDAwMDZ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMEMzRkZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAyOS4zMTAzNDQ4Mjc1ODYyMn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0zOC45ODAzOTIxNTY4NjI3MzV9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDA3OEZGXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwRkYxOVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0zMC41MjYzMTU3ODk0NzM2ODV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjIuNTA5ODAzOTIxNTY4NjMzfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDIzLCBcIm5hbWVcIjogXCJCYXRlcyBHcmVlblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzFDQjJCRFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDUzfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTQ0fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMUNCMkJEXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjQkJEQzAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogODB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNjQsIFwibmFtZVwiOiBcIk9sZCBEcnkgTXVkXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGRkFEMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA1MC4yfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTM0Ljh9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGQUQwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xOS44fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEuOH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGQUQwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDcyLjR9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMzIuNn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGQUQwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDc0LjR9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTh9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDBGRkE2XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTYzLjJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzOH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZDMzAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNTQuMn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xNC40fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDUxLCBcIm5hbWVcIjogXCJSb2FkdHJpcCBBdCBOaWdodFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmMWEwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJpbnZlcnRfbGlnaHRuZXNzXCI6IHRydWV9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDMzfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMkQzMzNDXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlZWVlZWVcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogM31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzJEMzMzQ1wifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDcyLCBcIm5hbWVcIjogXCJUcmFuc3BvcnQgZm9yIExvbmRvblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDk5Y2NcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAzMTRlXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YwZjBmMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2FkYmFjOVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYWRiODY2XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjdjNzQyXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhZGI4NjZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZjhkZDNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZjhkZDNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODA4MDgwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA5NSwgXCJuYW1lXCI6IFwiUm9hZGllXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAzMiwgXCJuYW1lXCI6IFwiRGVlcCBHcmVlblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZlMjRkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzE1OGMyOFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMzdiMzRhXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmUyNGRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM4YmM1M2ZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM4MDgwODBcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogOS45MX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNDksIFwibmFtZVwiOiBcIlN1YnRsZSBHcmVlblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwZmZlNlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMGZmY2NcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA1NiwgXCJuYW1lXCI6IFwiRXNwZXJhbnRvXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZjAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDEwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmYwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmYwMDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmYTkxYVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDAwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAzNn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC41NX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDIuMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJpbnZlcnRfbGlnaHRuZXNzXCI6IHRydWV9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMy4wMn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIwfSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDQwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5hdHRyYWN0aW9uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjAwZWVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xM31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuZ292ZXJubWVudFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZWVmZjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNjd9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLm1lZGljYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmYwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTM3fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5tZWRpY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmYwMDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNjaG9vbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjc3MDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA5N30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00MX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuc3BvcnRzX2NvbXBsZXhcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwZmZiM1wifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTcxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA4NH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01N30sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ExZmYwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvbi5haXJwb3J0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC4xMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmYzM1ZVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjM1fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmJ1c2luZXNzXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjM1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5idXNpbmVzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNjlmZmZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBsYWNlX29mX3dvcnNoaXBcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2MzZmZjM1wifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDk5LCBcIm5hbWVcIjogXCJPbGQgTWFwXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2FiYmFhNFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMzZjUxOGNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhZDliOGRcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA1NywgXCJuYW1lXCI6IFwiTWlsaXRhcnkgRmxhdFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwZmY4OFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTR9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzY2NzM0OFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDR9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDEuMTR9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5jb3VudHJ5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMzMTM5MTZcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuOH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzMzNGIxZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLnByb3ZpbmNlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA2OSwgXCJuYW1lXCI6IFwiSG9saWRheVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRkZCMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNzEuNjY2NjY2NjY2NjY2Njl9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjguNDAwMDAwMDAwMDAwMDA2fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNFOEZGMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNzYuNn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDExM30sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGODMwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC03N30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI3LjQwMDAwMDAwMDAwMDAwNn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGOEMwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC02Ni42fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzQuNDAwMDAwMDAwMDAwMDA2fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwQzRGRlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDIyLjc5OTk5OTk5OTk5OTk5N30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMS4zOTk5OTk5OTk5OTk5OTF9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzlGRkYwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjMuMjAwMDAwMDAwMDAwMDAzfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDMzLCBcIm5hbWVcIjogXCJKYW5lIElyZWRhbGVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM4N2JjYmFcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMzd9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTd9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzRmNmI0NlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0yM30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC02MX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2QzOGJjOFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC01NX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEzfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmEyMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNkMzhiYzhcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNTV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMzF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmNjlkOTRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA4NH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZDM4YmM4XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNDV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUuY291bnRyeVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2QzOGJjOFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDQ1fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzZ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxhbmRfcGFyY2VsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZDM4YmM4XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNDV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzNn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmdvdmVybm1lbnRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNkMzhiYzhcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAzNX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xOX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNjaG9vbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2QzOGJjOFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC02fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTE3fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2IyYmE3MFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xOX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yNX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNjMsIFwibmFtZVwiOiBcIkNhcmliYmVhbiBNb3VudGFpblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kubWVkaWNhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmJ1c2luZXNzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wbGFjZV9vZl93b3JzaGlwXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjY2VjNmIzXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YyZWVlOFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDExODZhXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2NlYzZiM1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuZ292ZXJubWVudFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA2NiwgXCJuYW1lXCI6IFwiQmx1ZXByaW50IChObyBMYWJlbHMpXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxN31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE3fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDA0NVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzdiOTRiZVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNTB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE5fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxN30sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDEuMn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA4MSwgXCJuYW1lXCI6IFwiSWx1c3RyYSYjMjMxOyYjMjI3O29cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzcxQUJDM1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yMX0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubmF0dXJhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjN0RDNDVDXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMzd9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNDF9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNDM0UwQjBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAyM30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNBMTlGQTBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtOTh9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGRkZGRkZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDYyLCBcIm5hbWVcIjogXCJOaWdodCB2aXNpb25cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDEyMDRcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtOTV9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwN0YxRVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC03Mn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMEM3MkVcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDJDMEFcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtODd9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwQTkyN1wifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01OH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogNjcsIFwibmFtZVwiOiBcIkJsdWVwcmludFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE3fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDA0NVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTd9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzAwMDA0NVwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDI1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM0ZDg4ZWFcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLmljb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwNDVcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE5fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDQ1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxN30sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDEuMn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA4NywgXCJuYW1lXCI6IFwiUmVkICZhbXA7IEdyZWVuXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxNn0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmMDAxYVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC02MX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmYwMDExXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA1M31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMGZmOTFcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNjN9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjAwMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDU1ZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTA3LCBcIm5hbWVcIjogXCJCbHVlLWlzaFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNDV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxM31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM4ZmE3YjNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzY2Nzc4MFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzMzMzMzM1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjOGZhN2IzXCJ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2EzYmVjY1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzdhOGY5OVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1NTU1NTVcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYTNiZWNjXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjN2E4Zjk5XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzU1NTU1NVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYmJkOWU5XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1MjVmNjZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNiYmQ5ZTlcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhM2FlYjVcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA4OSwgXCJuYW1lXCI6IFwiR3JlZW5cIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYmJkNWM1XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODA4MDgwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmNmOWEyXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYmJkNWM1XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM4MDgwODBcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA5MywgXCJuYW1lXCI6IFwiTG9zdCBpbiB0aGUgZGVzZXJ0XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjQ5ZjUzXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjlkZGM1XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtN31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODEzMDMzXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0M31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuYnVzaW5lc3NcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM2NDVjMjBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDM4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMTk5NGJmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTY5fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjk5fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNDN9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YxOWY1M1wifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMS4zfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE2fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5idXNpbmVzc1wifSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM2NDVjMjBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDM5fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5zY2hvb2xcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhOTU1MjFcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDM1fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLm1lZGljYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM4MTMwMzNcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDM4fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wifSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNwb3J0c19jb21wbGV4XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjOWU1OTE2XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzMn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5nb3Zlcm5tZW50XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjOWU1OTE2XCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0Nn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODEzMDMzXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDM4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YxOWY1M1wifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge31cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDEwMCwgXCJuYW1lXCI6IFwiQnJvd25pZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmODgwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjR9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogOTYsIFwibmFtZVwiOiBcIkJvYmJ5JiMzOTtzIFdvcmxkXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsLmxhbmRjb3ZlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNDR9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMyYmZmMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMGExZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAyOX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC43NH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubmF0dXJhbC50ZXJyYWluXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwZmYwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDU0fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTUxfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjR9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC4yN30sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwNzdmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC05MX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDM2fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjN9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDk5ZmZcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC43MX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuYnVzaW5lc3NcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDA1NWZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogOX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00Nn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMS4wNX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5jb3VudHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC45OX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5wcm92aW5jZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAzNn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNTR9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNzZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubG9jYWxpdHlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzN9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTYxfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxLjIxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLm5laWdoYm9yaG9vZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMi40NH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXkuY29udHJvbGxlZF9hY2Nlc3NcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmYwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA2N30sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZjY2MDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA1Mn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC42NH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwNmVmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjQ2fSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0zfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDc3ZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNDZ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNTh9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC44fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvbi5yYWlsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmMDAwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC00NX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC45fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAwLjU4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDIuMDF9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMGZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDIyfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC04N30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDQ0fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxLjk4fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmJ1c2luZXNzXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuMDZ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwYWFmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTZ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDIuMjF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMy44NH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogOS45OX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuMDF9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogOTIsIFwibmFtZVwiOiBcIkJsdWUgQ3lhblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMzMzMzMzNcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubmF0dXJhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM2NjY2NjZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZGYyZjIzXCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXkuY29udHJvbGxlZF9hY2Nlc3NcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjY2NjY2NjXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5LmNvbnRyb2xsZWRfYWNjZXNzXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM5OTk5OTlcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNhYWFhYWFcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODA4MDgwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2FhYWFhYVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwifSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjNmVlZWVcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge31cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDk4LCBcIm5hbWVcIjogXCJQdXJwbGUgUmFpblwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzVlMDBmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC03OX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC03OH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzY2MDBmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTQ3fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAyMn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjNjYwMGZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTExfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTY1fSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMTkwMGZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMS4zfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMzB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM1ZTAwZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNzJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxMDEsIFwibmFtZVwiOiBcIkJyaWdodCBEZXNzZXJ0XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTd9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDEuMDJ9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmMzMDBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZhYTAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTQ1fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTR9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmFhMDBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA2NH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC45fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTV9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMGY2ZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDAuNzV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMzB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMC41fSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmY4MDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDA3N2ZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDEuMjV9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTIyfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTMxfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDc4LCBcIm5hbWVcIjogXCJQaW5rICZhbXA7IEJsdWVcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjOWRlYmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNlYmViZWJcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1MWRiZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1MWRiZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIn0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmNGU4MFwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAxLjV9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzUxZGJmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNTFkYk5hTlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1MWRiZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuYnVzaW5lc3NcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM5ZGViZmZcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmdvdmVybm1lbnRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNjaG9vbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5tZWRpY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5hdHRyYWN0aW9uXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1MWRiZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGxhY2Vfb2Zfd29yc2hpcFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuc3BvcnRzX2NvbXBsZXhcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5LmNvbnRyb2xsZWRfYWNjZXNzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIn1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDk0LCBcIm5hbWVcIjogXCJTYW4gQW5kcmVhc1wiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDZlZmZcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xOX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMTZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzJiZmYwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTM5fSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDh9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmF0dHJhY3Rpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmJ1c2luZXNzXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5nb3Zlcm5tZW50XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5tZWRpY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wbGFjZV9vZl93b3JzaGlwXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5zY2hvb2xcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnNwb3J0c19jb21wbGV4XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDg1LCBcIm5hbWVcIjogXCJUb3RhbGx5IFBpbmtcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0Y2MDBGRlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNERTAwRkZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNC42MDAwMDAwMDAwMDAwMDg1fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEuNDIxMDg1NDcxNTIwMjAwNGUtMTR9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGRjAwOUFcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMH0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0ZGMDA5OFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI0VDMDBGRlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDcyLjR9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM3MjAwRkZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiA0OX0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDB9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTExLCBcIm5hbWVcIjogXCJUaGUgUHJvcGlhIEVmZmVjdFwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMyYjNmNTdcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmYwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjR9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMS4zfSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNGRkZGRkZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjU1Zjc3XCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAzfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjU1Zjc3XCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAxLjF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmNTVmNzdcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuNH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuOH0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDAuN31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM2YzViN2JcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2YzYjE5MVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDg4LCBcIm5hbWVcIjogXCJPdmVyc2Vhc1wiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwNTU5QlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC02MH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5tYW5fbWFkZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZmZmZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwNTU5QlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01M30sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5zY2hvb2xcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM5OTk5OTlcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTI4fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiM5OTk5OTlcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTIzfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzJDM0U1MFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDI5fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTUyfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiA5NywgXCJuYW1lXCI6IFwibWFudXNoa2FcIiwgXCJqc29uXCI6IFtcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM2ZWJlYWJcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjYjVhMTViXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2Y5ZjlmOVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzgwODA4MFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODA4MDgwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWwudGVycmFpblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2QwZDBkMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTA2LCBcIm5hbWVcIjogXCJEYXJrIEdyZXkgb24gTGlnaHQgR3JleVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmNvdW50cnlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0RDRTdFQlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLnByb3ZpbmNlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNEQ0U3RUJcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uLmFpcnBvcnRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvbi5haXJwb3J0XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjODM4ODhCXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxMTMsIFwibmFtZVwiOiBcIkdvbGRlbiBDcm93blwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZTdjZDc5XCJ9LFxuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiMyODI4MjhcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubmF0dXJhbC5sYW5kY292ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2Q2YmM2OFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZDZiYzY4XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZDZiYzY4XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZDZiYzY4XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uLmFpcnBvcnRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2Q2YmM2OFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwifSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZDZiYzY4XCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn0sXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDF9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2U5ZDlhNlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZTlkOWE2XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2U5ZDlhNlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5idXNpbmVzc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2U5ZDlhNlwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5nb3Zlcm5tZW50XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaS5zY2hvb2xcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLm1lZGljYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLmF0dHJhY3Rpb25cIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjZmI2NjVcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kucGxhY2Vfb2Zfd29yc2hpcFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2kuc3BvcnRzX2NvbXBsZXhcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNjZmI2NjVcIn0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5LmNvbnRyb2xsZWRfYWNjZXNzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIn1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDcxLCBcIm5hbWVcIjogXCJKYXp6eWdyZWVuXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDAwMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNDR9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwRjkzZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00MC45NTI5NDExNzY0NzA1OX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwRjkzZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01MS4xNTI5NDExNzY0NzA1OX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwRjkzZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01MC4zNTI5NDExNzY0NzA1OX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMEY5M2ZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTAuMzUyOTQxMTc2NDcwNTl9LFxuICAgICAgICAgICAgICAgIHtcImdhbW1hXCI6IDF9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwRjkzZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01MC4zNTI5NDExNzY0NzA1OX0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogMX1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxMDUsIFwibmFtZVwiOiBcIlZlaW5zXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjQjYxNTMwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogNjB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNDB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjQjYxNTMwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0I2MTUzMFwifSxcbiAgICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNCNjE1MzBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDZ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjQjYxNTMwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjV9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0I2MTUzMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTEwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNCNjE1MzBcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDcwfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI0I2MTUzMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogOTB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUuY291bnRyeVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvblwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvblwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDEwOCwgXCJuYW1lXCI6IFwiTGVtb24gVHJlZVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVsc1wiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmZmZmZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjZmZlOTRmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNmZmU5NGZcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiA0fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMzMzMzMzXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC03NH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDExMiwgXCJuYW1lXCI6IFwiU3dpc3MgQ2hlZXNlXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiI2ZmZjcwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZGQwMFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNzE4MDk4XCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTM1fSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogMjB9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZGQwMFwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTM4fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmRkMDBcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcIndlaWdodFwiOiAwLjd9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19XG4gICAgICAgIF19LFxuICAgICAgICB7XCJpZFwiOiAxMDksIFwibmFtZVwiOiBcIkJlaWdlIFdoaXRlIGFuZCBCbHVlXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2VjZDVjM1wifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzMyYzRmZVwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2JhYWNhMlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNmZmZmZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNTY1NzU3XCJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzgwODA4MFwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLm5laWdoYm9yaG9vZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM1MzU1NTVcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmZmZmZlXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IDE3fVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7fVxuICAgICAgICBdfSxcbiAgICAgICAge1wiaWRcIjogMTEwLCBcIm5hbWVcIjogXCJtaWtpd2F0XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiMzM2ZDc1XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMxOTAwZmZcIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZDA2NGE0XCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm1hbl9tYWRlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCJ9LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJyb2FkXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJzaW1wbGlmaWVkXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjNmJiMWUxXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5saW5lXCIsIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogNzAwfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDg2LCBcIm5hbWVcIjogXCJOYXR1cmUgSGlnaGxpZ2h0XCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9mZlwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcImFkbWluaXN0cmF0aXZlLmxvY2FsaXR5XCIsIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHNcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZmY0NzAyXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogLTEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcInNpbXBsaWZpZWRcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yNX1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzVmMWJmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMzh9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlLm5hdHVyYWwudGVycmFpblwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwic2ltcGxpZmllZFwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNkM2ZmNDRcIn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0zMn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAzMH1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubmF0dXJhbFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiM3OTc2NzlcIn0sXG4gICAgICAgICAgICAgICAge1wiZ2FtbWFcIjogNC45Mn0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC00N31cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge31cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDExNCwgXCJuYW1lXCI6IFwiQ29sb3JibGluZC1mcmllbmRseVwiLCBcImpzb25cIjogW1xuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzAwNzJCMlwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IDEwMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC01NH0sXG4gICAgICAgICAgICAgICAge1widmlzaWJpbGl0eVwiOiBcIm9uXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwibGFuZHNjYXBlXCIsIFwiZWxlbWVudFR5cGVcIjogXCJhbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjRTY5RjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTQ5fSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJwb2lcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNENTVFMDBcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNDZ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQubG9jYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNDQzc5QTdcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtNTV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMzZ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiNGMEU0NDJcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAtMTV9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtMjJ9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiYWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiaHVlXCI6IFwiIzU2QjRFOVwifSxcbiAgICAgICAgICAgICAgICB7XCJzYXR1cmF0aW9uXCI6IC0yM30sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0yfSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZVwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJodWVcIjogXCIjMDAwMDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMH0sXG4gICAgICAgICAgICAgICAge1wibGlnaHRuZXNzXCI6IC0xMDB9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImFsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImh1ZVwiOiBcIiMwMDlFNzNcIn0sXG4gICAgICAgICAgICAgICAge1wic2F0dXJhdGlvblwiOiAxMDB9LFxuICAgICAgICAgICAgICAgIHtcImxpZ2h0bmVzc1wiOiAtNTl9LFxuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvblwifVxuICAgICAgICAgICAgXX1cbiAgICAgICAgXX0sXG4gICAgICAgIHtcImlkXCI6IDEwNCwgXCJuYW1lXCI6IFwidG93YWxrXCIsIFwianNvblwiOiBbXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcInZpc2liaWxpdHlcIjogXCJvZmZcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZmVhdHVyZVR5cGVcIjogXCJsYW5kc2NhcGUubWFuX21hZGVcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9LFxuICAgICAgICAgICAgICAgIHtcInNhdHVyYXRpb25cIjogMTAwfSxcbiAgICAgICAgICAgICAgICB7XCJsaWdodG5lc3NcIjogLTE3fSxcbiAgICAgICAgICAgICAgICB7XCJnYW1tYVwiOiAxLjE4fSxcbiAgICAgICAgICAgICAgICB7XCJjb2xvclwiOiBcIiNkYTk3YWVcIn1cbiAgICAgICAgICAgIF19LFxuICAgICAgICAgICAge1wiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5maWxsXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjZjA3OTEzXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2ZmZmZmZlwifSxcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC4xfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLCBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiI2QwZjM4MFwifVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ3ZWlnaHRcIjogMC4xfVxuICAgICAgICAgICAgXX0sXG4gICAgICAgICAgICB7XCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIiwgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIiwgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib25cIn0sXG4gICAgICAgICAgICAgICAge1wiY29sb3JcIjogXCIjMDAwMDAwXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHtcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLCBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICAgICAge1wid2VpZ2h0XCI6IDF9LFxuICAgICAgICAgICAgICAgIHtcImNvbG9yXCI6IFwiIzgzODI3ZlwifSxcbiAgICAgICAgICAgICAgICB7XCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJ9XG4gICAgICAgICAgICBdfSxcbiAgICAgICAgICAgIHt9XG4gICAgICAgIF19XG4gICAgXVxufTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIGhvbWUgbW9kdWxlXG5hbmd1bGFyLm1vZHVsZSgnY2VyZXNHb29nbGVNYXBNYXJrZXJDdHJsTW9kdWxlJywgW10pLmNvbnRyb2xsZXIoJ2NlcmVzR29vZ2xlTWFwTWFya2VyQ3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnJHdpbmRvdycsXG4gICAgJyRsb2cnLFxuICAgICckZWxlbWVudCcsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdywgJGxvZywgJGVsZW1lbnQpIHtcbiAgICAgICAgJHNjb3BlLnNob3dXaW5kb3cgPSBmYWxzZTtcbiAgICAgICAgLy8gSEVMUEVSU1xuICAgICAgICB2YXIgY2VyZXNfdWlkID0gJGVsZW1lbnQuYXR0cihcImlkXCIpO1xuICAgICAgICB2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgcmV0dXJuICR3aW5kb3cuY2VyZXNEYXRhW2NlcmVzX3VpZF07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YSgpO1xuXG4gICAgICAgICRzY29wZS5tYXJrZXIgPSB7XG4gICAgICAgICAgICBpZDogY2VyZXNfdWlkLFxuICAgICAgICAgICAgY29vcmRzOiB7XG4gICAgICAgICAgICAgICAgbGF0aXR1ZGU6IGRhdGEubG9jYXRpb25fbGF0LFxuICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogZGF0YS5sb2NhdGlvbl9sb25nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoZGF0YS5pY29uKXtcbiAgICAgICAgICAgICRzY29wZS5tYXJrZXIuaWNvbiA9IGRhdGEuaWNvbjtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5jbGlja2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGRhdGEuY29udGVudCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zaG93V2luZG93ID0gISRzY29wZS5zaG93V2luZG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9XG5dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaG9tZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdjZXJlc0ljb25CbG9ja0N0cmxNb2R1bGUnLCBbXSkuY29udHJvbGxlcignY2VyZXNJY29uQmxvY2tDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckd2luZG93JyxcbiAgICAnJGVsZW1lbnQnLFxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3csICRlbGVtZW50KSB7XG5cbiAgICAgICAgLy8gSEVMUEVSU1xuICAgICAgICB2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjZXJlc191aWQgPSAkZWxlbWVudC5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5jZXJlc0RhdGFbY2VyZXNfdWlkXTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKCk7XG5cbiAgICAgICAgLy8gVGhpcyByb3V0ZXMgdG8gbmctc3R5bGVcbiAgICAgICAgLy8gJHNjb3BlLm15U3R5bGUgPSB7IC4uLiB9XG4gICAgfVxuXSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGhvbWUgbW9kdWxlXG5hbmd1bGFyLm1vZHVsZSgnY2VyZXNJY29uQm94Q3RybE1vZHVsZScsIFtdKS5jb250cm9sbGVyKCdjZXJlc0ljb25Cb3hDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckd2luZG93JyxcbiAgICAnJGVsZW1lbnQnLFxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3csICRlbGVtZW50KSB7XG5cbiAgICAgICAgLy8gSEVMUEVSU1xuICAgICAgICB2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjZXJlc191aWQgPSAkZWxlbWVudC5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5jZXJlc0RhdGFbY2VyZXNfdWlkXTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKCk7XG5cbiAgICAgICAgLy8gVGhpcyByb3V0ZXMgdG8gbmctc3R5bGVcbiAgICAgICAgLy8gJHNjb3BlLm15U3R5bGUgPSB7IC4uLiB9XG4gICAgfVxuXSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGhvbWUgbW9kdWxlXG5hbmd1bGFyLm1vZHVsZSgnY2VyZXNJY29uTGlua0N0cmxNb2R1bGUnLCBbXSkuY29udHJvbGxlcignY2VyZXNJY29uTGlua0N0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyR3aW5kb3cnLFxuICAgICckZWxlbWVudCcsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdywgJGVsZW1lbnQpIHtcblxuICAgICAgICAvLyBIRUxQRVJTXG4gICAgICAgIHZhciBnZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNlcmVzX3VpZCA9ICRlbGVtZW50LmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIHJldHVybiAkd2luZG93LmNlcmVzRGF0YVtjZXJlc191aWRdO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZGF0YSA9IGdldERhdGEoKTtcblxuICAgICAgICAvLyBUaGlzIHJvdXRlcyB0byBuZy1zdHlsZVxuICAgICAgICAvLyAkc2NvcGUubXlTdHlsZSA9IHsgLi4uIH1cbiAgICB9XG5dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaG9tZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdjZXJlc0ljb25MaXN0Q3RybE1vZHVsZScsIFtdKS5jb250cm9sbGVyKCdjZXJlc0ljb25MaXN0Q3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnJHdpbmRvdycsXG4gICAgJyRlbGVtZW50JyxcbiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93LCAkZWxlbWVudCkge1xuXG4gICAgICAgIC8vIEhFTFBFUlNcbiAgICAgICAgdmFyIGdldERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2VyZXNfdWlkID0gJGVsZW1lbnQuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgcmV0dXJuICR3aW5kb3cuY2VyZXNEYXRhW2NlcmVzX3VpZF07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YSgpO1xuXG4gICAgICAgIC8vIFRoaXMgcm91dGVzIHRvIG5nLXN0eWxlXG4gICAgICAgIC8vICRzY29wZS5teVN0eWxlID0geyAuLi4gfVxuICAgIH1cbl0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBob21lIG1vZHVsZVxuYW5ndWxhci5tb2R1bGUoJ2NlcmVzSWNvbkxpc3RJdGVtQ3RybE1vZHVsZScsIFtdKS5jb250cm9sbGVyKCdjZXJlc0ljb25MaXN0SXRlbUN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyR3aW5kb3cnLFxuICAgICckZWxlbWVudCcsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgJHdpbmRvdywgJGVsZW1lbnQpIHtcblxuICAgICAgICAvLyBIRUxQRVJTXG4gICAgICAgIHZhciBnZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNlcmVzX3VpZCA9ICRlbGVtZW50LmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIHJldHVybiAkd2luZG93LmNlcmVzRGF0YVtjZXJlc191aWRdO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZGF0YSA9IGdldERhdGEoKTtcblxuICAgICAgICAvLyBUaGlzIHJvdXRlcyB0byBuZy1zdHlsZVxuICAgICAgICAvLyAkc2NvcGUubXlTdHlsZSA9IHsgLi4uIH1cbiAgICB9XG5dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaG9tZSBtb2R1bGVcbmFuZ3VsYXIubW9kdWxlKCdjZXJlc1NlcGFyYXRvclN0eWxlZEN0cmxNb2R1bGUnLCBbXSkuY29udHJvbGxlcignY2VyZXNTZXBhcmF0b3JTdHlsZWRDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckd2luZG93JyxcbiAgICAnJGVsZW1lbnQnLFxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3csICRlbGVtZW50KSB7XG5cbiAgICAgICAgLy8gSEVMUEVSU1xuICAgICAgICB2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjZXJlc191aWQgPSAkZWxlbWVudC5hdHRyKFwiaWRcIik7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5jZXJlc0RhdGFbY2VyZXNfdWlkXTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKCk7XG5cbiAgICAgICAgLy8gVGhpcyByb3V0ZXMgdG8gbmctc3R5bGVcbiAgICAgICAgLy8gJHNjb3BlLm15U3R5bGUgPSB7IC4uLiB9XG4gICAgfVxuXSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgXyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvbG9kYXNoL2Rpc3QvbG9kYXNoLmNvbXBhdC5qc1wiKTtcbnZhciBTID0gcmVxdWlyZShcIi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zdHJpbmdqcy9saWIvc3RyaW5nLm1pbi5qc1wiKTtcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcpLmRpcmVjdGl2ZSgncGFyYWxsYXgnLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgcGFyYWxsYXhSYXRpbzogJ0AnLFxuICAgICAgICAgICAgICAgIHBhcmFsbGF4VmVydGljYWxPZmZzZXQ6ICdAJyxcbiAgICAgICAgICAgICAgICBwYXJhbGxheEhvcml6b250YWxPZmZzZXQ6ICdAJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtLCAkYXR0cnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhvcml6b250YWwgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5jc3MoJ2xlZnQnLCAkc2NvcGUucGFyYWxsYXhIb3Jpem9udGFsT2Zmc2V0ICsgXCJweFwiKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY1ZhbFkgPSAkd2luZG93LnBhZ2VZT2Zmc2V0ICogKCRzY29wZS5wYXJhbGxheFJhdGlvID8gJHNjb3BlLnBhcmFsbGF4UmF0aW8gOiAxLjEgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGNWYWxZIDw9ICR3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3BWYWwgPSAoY2FsY1ZhbFkgPCAkc2NvcGUucGFyYWxsYXhWZXJ0aWNhbE9mZnNldCA/ICRzY29wZS5wYXJhbGxheFZlcnRpY2FsT2Zmc2V0IDogY2FsY1ZhbFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jc3MoJ3RvcCcsIHRvcFZhbCArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKFwic2Nyb2xsXCIsIHNldFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZChcInRvdWNobW92ZVwiLCBzZXRQb3NpdGlvbik7XG4gICAgICAgICAgICB9ICAvLyBsaW5rIGZ1bmN0aW9uXG4gICAgICAgIH07XG4gICAgfV0pLmRpcmVjdGl2ZSgncGFyYWxsYXhCYWNrZ3JvdW5kJywgWyckd2luZG93JywgZnVuY3Rpb24gKCR3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PicsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBhcmFsbGF4UmF0aW86ICdAJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtLCBhdHRycykge1xuXG4gICAgICAgICAgICAgICAgLy9pZiBkaXJlY3RpdmUgaXMgZGVjbGFyZWQgdmlhIGNsYXNzLFxuICAgICAgICAgICAgICAgIC8vZXZhbHVhdGUgdGhlIG9iamVjdCBwcm92aWRlZCBieSB0aGUgZGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAvL2FuZCBzaG92ZSBpdCBpbnRvIHRoZSBhdHRycyB2YXIgc28gdGhhdCBpdFxuICAgICAgICAgICAgICAgIC8vIGJlaGF2ZXMgbGlrZSB0aGUgb3RoZXIgdHdvIGRlY2xhcmF0aW9uIHR5cGVzLlxuICAgICAgICAgICAgICAgIGlmIChfLmlzU3RyaW5nKGF0dHJzLnBhcmFsbGF4QmFja2dyb3VuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUF0dHMgPSAkc2NvcGUuJGV2YWwoYXR0cnMucGFyYWxsYXhCYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgICAgICAgICAgXy5tZXJnZShhdHRycywgZGlyZWN0aXZlQXR0cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHNldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY1ZhbFkgPSAoZWxlbS5wcm9wKCdvZmZzZXRUb3AnKSAtICR3aW5kb3cucGFnZVlPZmZzZXQpICogKCRzY29wZS5wYXJhbGxheFJhdGlvID8gJHNjb3BlLnBhcmFsbGF4UmF0aW8gOiAxLjEgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCBwb3NpdGlvbmluZ1xuICAgICAgICAgICAgICAgICAgICBlbGVtLmNzcygnYmFja2dyb3VuZC1wb3NpdGlvbicsIFwiNTAlIFwiICsgY2FsY1ZhbFkgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgb3VyIGluaXRpYWwgcG9zaXRpb24gLSBmaXhlcyB3ZWJraXQgYmFja2dyb3VuZCByZW5kZXIgYnVnXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ2xvYWQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZChcInNjcm9sbFwiLCBzZXRQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoXCJ0b3VjaG1vdmVcIiwgc2V0UG9zaXRpb24pO1xuICAgICAgICAgICAgfSAgLy8gbGluayBmdW5jdGlvblxuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBfID0gcmVxdWlyZShcIi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9sb2Rhc2gvZGlzdC9sb2Rhc2guY29tcGF0LmpzXCIpO1xudmFyICQgPSB3aW5kb3cualF1ZXJ5O1xuXG5hbmd1bGFyLm1vZHVsZSgnd2ViQXBwJylcbiAgICAuZGlyZWN0aXZlKCdic0Nhcm91c2VsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwie3sgZWxlbWVudElkIH19XCIgY2xhc3M9XCJjYXJvdXNlbCBzbGlkZVwiIGRhdGEtcmlkZT1cImNhcm91c2VsXCIgPicgK1xuICAgICAgICAgICAgJzxvbCBjbGFzcz1cImNhcm91c2VsLWluZGljYXRvcnNcIj48bGkgbmctcmVwZWF0PVwic2xpZGVzIGluICRzbGlkZXNcIiBkYXRhLXRhcmdldD1cIiN7eyBlbGVtZW50SWQgfX1cIiBkYXRhLXNsaWRlLXRvPVwie3sgJGluZGV4IH19XCIgY2xhc3M9XCJhY3RpdmVcIj48L2xpPjwvb2w+JyArXG4gICAgICAgICAgICAnPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPVwiY2Fyb3VzZWwtaW5uZXJcIiByb2xlPVwibGlzdGJveFwiPjwvZGl2PicgK1xuICAgICAgICAgICAgJzxhIGNsYXNzPVwibGVmdCBjYXJvdXNlbC1jb250cm9sXCIgZGF0YS10YXJnZXQ9XCIje3sgZWxlbWVudElkIH19XCIgcm9sZT1cImJ1dHRvblwiIGRhdGEtc2xpZGU9XCJwcmV2XCI+IDxpIGNsYXNzPVwiZmEgZmEtY2hldnJvbi1sZWZ0XCI+PC9pPjxzcGFuIGNsYXNzPVwic3Itb25seVwiPlByZXZpb3VzPC9zcGFuPjwvYT4nICtcbiAgICAgICAgICAgICc8YSBjbGFzcz1cInJpZ2h0IGNhcm91c2VsLWNvbnRyb2xcIiBkYXRhLXRhcmdldD1cIiN7eyBlbGVtZW50SWQgfX1cIiByb2xlPVwiYnV0dG9uXCIgZGF0YS1zbGlkZT1cIm5leHRcIj48aSBjbGFzcz1cImZhIGZhLWNoZXZyb24tcmlnaHRcIj48L2k+PHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+TmV4dDwvc3Bhbj48L2E+JyxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGd1aWQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9wOChzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KSArIFwiMDAwMDAwMDAwXCIpLnN1YnN0cigyLCA4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzID8gXCItXCIgKyBwLnN1YnN0cigwLCA0KSArIFwiLVwiICsgcC5zdWJzdHIoNCwgNCkgOiBwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9wOCgpICsgX3A4KHRydWUpICsgX3A4KHRydWUpICsgX3A4KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUuZWxlbWVudElkID0gZ3VpZCgpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRWxlbWVudCBJRDogXCIgKyBzY29wZS5lbGVtZW50SWQpO1xuICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRlbCk7XG4gICAgICAgICAgICAgICAgJGVsLmNzcygnYmFja2dyb3VuZCcsICdibGFjaycpO1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuJHNsaWRlcyA9ICRlbC5maW5kKCcuY2Fyb3VzZWwtaW5uZXIgLml0ZW0nKTtcblxuICAgICAgICAgICAgICAgIGlmKCQoJy5hY3RpdmUnLCBzY29wZS4kc2xpZGVzKS5sZW5ndGggPT0gMCAmJiBzY29wZS4kc2xpZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHNsaWRlcy5maXJzdCgpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgXyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvbG9kYXNoL2Rpc3QvbG9kYXNoLmNvbXBhdC5qc1wiKTtcbnZhciBTID0gcmVxdWlyZShcIi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zdHJpbmdqcy9saWIvc3RyaW5nLm1pbi5qc1wiKTtcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcpXG4gICAgLmRpcmVjdGl2ZSgnYnNDYXJvdXNlbFNsaWRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IG5nLXRyYW5zY2x1ZGUgY2xhc3M9XCJpdGVtXCI+PC9kaXY+JyxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIF8gPSByZXF1aXJlKFwiLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2xvZGFzaC9kaXN0L2xvZGFzaC5jb21wYXQuanNcIik7XG52YXIgUyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3RyaW5nanMvbGliL3N0cmluZy5taW4uanNcIik7XG5cbmFuZ3VsYXIubW9kdWxlKCd3ZWJBcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NlcmVzQ2xpY2tBbmltYXRpb24nLCBbJyRsb2cnLCAnJHRpbWVvdXQnLCAnYXBwbHlBbmltYXRpb24nLCBmdW5jdGlvbiAoJGxvZywgJHRpbWVvdXQsIGFwcGx5QW5pbWF0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGF0dHJzLmNlcmVzQ2xpY2tBbmltYXRpb247XG4gICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gYXR0cnMuY2VyZXNDbGlja0FuaW1hdGlvbkRlbGF5O1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGF0dHJzLmNsaWNrQW5pbWF0aW9uRHVyYXRpb247XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IGFwcGx5QW5pbWF0aW9uLmRvQW5pbWF0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5LCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgYXBwbHlBbmltYXRpb24uY2xlYXJBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uLCB0aW1lb3V0KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBfID0gcmVxdWlyZShcIi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9sb2Rhc2gvZGlzdC9sb2Rhc2guY29tcGF0LmpzXCIpO1xudmFyIFMgPSByZXF1aXJlKFwiLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL3N0cmluZ2pzL2xpYi9zdHJpbmcubWluLmpzXCIpO1xudmFyICQgPSB3aW5kb3cualF1ZXJ5O1xudmFyIF9hbmltYXRpb25zID0ge307XG5cbmFuZ3VsYXIubW9kdWxlKCd3ZWJBcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NlcmVzRW50cmFuY2VBbmltYXRpb25UeXBlJywgWyckbG9nJywgJyR0aW1lb3V0JywgJ2FwcGx5QW5pbWF0aW9uJywgZnVuY3Rpb24gKCRsb2csICR0aW1lb3V0LCBhcHBseUFuaW1hdGlvbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgICAgICAgICAvL2FkZCBhIGNvbGxlY3Rpb24gdGhhdCB0cmFja3MgdGhlIGF0dHJzIG9mXG4gICAgICAgICAgICAgICAgLy90aGUgZGlmZmVyZW50IGFuaW1hdGVkIGVsZW1lbnRzIHNvIHRoZXlcbiAgICAgICAgICAgICAgICAvL2FyZSBwcm9wZXJseSBwYXJtZXRlcml6ZWQgb24gdGhlIHRyaWdnZXJBbmltYXRpb25cbiAgICAgICAgICAgICAgICAvL2FjdGlvbnMuXG4gICAgICAgICAgICAgICAgdmFyIHVucWlkID0gXy51bmlxdWVJZCgnYW5pbWF0aW9uLScpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0cignZGF0YS1hbmltYXRpb24taWQnLCB1bnFpZCk7XG4gICAgICAgICAgICAgICAgYXR0cnMuaGFzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfYW5pbWF0aW9uc1t1bnFpZF0gPSBhdHRycztcblxuICAgICAgICAgICAgICAgIHNjb3BlLnRyaWdnZXJJbnZpZXdBbmltYXRpb24gPSBmdW5jdGlvbiAoaW52aWV3LCBpbnZpZXdwYXJ0LCBldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW52aWV3RWxlbWVudCA9ICQoZXZlbnQuaW5WaWV3VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzID0gX2FuaW1hdGlvbnNbaW52aWV3RWxlbWVudC5hdHRyKCdkYXRhLWFuaW1hdGlvbi1pZCcpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKFwiSW52aWV3IEFuaW1hdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXR0cnMuYW5pbWF0ZWRJbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBhdHRycy5jZXJlc0VudHJhbmNlQW5pbWF0aW9uVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSBhdHRycy5lbnRyYW5jZUFuaW1hdGlvbkRlbGF5ID8gYXR0cnMuZW50cmFuY2VBbmltYXRpb25EZWxheSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gYXR0cnMuZW50cmFuY2VBbmltYXRpb25EdXJhdGlvbiA/IGF0dHJzLmVudHJhbmNlQW5pbWF0aW9uRHVyYXRpb24gOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBhcHBseUFuaW1hdGlvbi5kb0FuaW1hdGlvbihpbnZpZXdFbGVtZW50LCBhbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5LCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUFuaW1hdGlvbi5jbGVhckFuaW1hdGlvbihpbnZpZXdFbGVtZW50LCBhbmltYXRpb24sIHRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52aWV3RWxlbWVudC5jc3MoJ29wYWNpdHknLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRycy5hbmltYXRlZEluID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnd2ViQXBwJylcbiAgICAuZGlyZWN0aXZlKCdjZXJlc0ZsaXBib29rJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgICAgIHZhciAkID0galF1ZXJ5O1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnYmItY3VzdG9tLXdyYXBwZXInKTtcbiAgICAgICAgICAgICAgICB2YXIgJGVsID0gJChlbGVtZW50KTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRib29rQmxvY2s6ICRlbC5maW5kKCcuYmItYm9va2Jsb2NrJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAkbmF2TmV4dDogJGVsLmZpbmQoJy5iYi1uYXYtbmV4dCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJG5hdlByZXY6ICRlbC5maW5kKCcuYmItbmF2LXByZXYnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRuYXZGaXJzdDogJGVsLmZpbmQoJy5iYi1uYXYtZmlyc3QnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRuYXZMYXN0OiAkZWwuZmluZCgnLmJiLW5hdi1sYXN0JylcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy4kYm9va0Jsb2NrLmJvb2tibG9jayh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDgwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFkb3dTaWRlczogMC44LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRvd0ZsaXA6IDAuN1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0RXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGluaXRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkc2xpZGVzID0gY29uZmlnLiRib29rQmxvY2suY2hpbGRyZW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIG5hdmlnYXRpb24gZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuJG5hdk5leHQub24oJ2NsaWNrIHRvdWNoc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLiRib29rQmxvY2suYm9va2Jsb2NrKCduZXh0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy4kbmF2UHJldi5vbignY2xpY2sgdG91Y2hzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuJGJvb2tCbG9jay5ib29rYmxvY2soJ3ByZXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLiRuYXZGaXJzdC5vbignY2xpY2sgdG91Y2hzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuJGJvb2tCbG9jay5ib29rYmxvY2soJ2ZpcnN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy4kbmF2TGFzdC5vbignY2xpY2sgdG91Y2hzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuJGJvb2tCbG9jay5ib29rYmxvY2soJ2xhc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHN3aXBlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNsaWRlcy5vbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N3aXBlbGVmdCc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuJGJvb2tCbG9jay5ib29rYmxvY2soJ25leHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N3aXBlcmlnaHQnOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLiRib29rQmxvY2suYm9va2Jsb2NrKCdwcmV2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxuO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSB3aW5kb3cualF1ZXJ5O1xudmFyIF8gPSByZXF1aXJlKFwiLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2xvZGFzaC9kaXN0L2xvZGFzaC5jb21wYXQuanNcIik7XG52YXIgUyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3RyaW5nanMvbGliL3N0cmluZy5taW4uanNcIik7XG5cbmFuZ3VsYXIubW9kdWxlKCd3ZWJBcHAnKS5jb25zdGFudChcImNlcmVzR3JhZGllbnRzXCIsXG4gICAge1xuICAgICAgICBncmFkaWVudHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkVtZXJhbGQgV2F0ZXJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzM0OEY1MFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjNTZCNEQzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJMZW1vbiBUd2lzdFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjM0NBNTVDXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNCNUFDNDlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkhvcml6b25cIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzAwMzk3M1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRTVFNUJFXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJSb3NlIFdhdGVyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNFNTVEODdcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzVGQzNFNFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiRnJvemVuXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM0MDNCNEFcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0U3RTlCQlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiTWFuZ28gUHVscFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRjA5ODE5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNFRERFNURcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkJsb29keSBNYXJ5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNGRjUxMkZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0REMjQ3NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQXViZXJnaW5lXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNBQTA3NkJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzYxMDQ1RlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQXF1YSBNYXJpbmVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzFBMjk4MFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMjZEMENFXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJTdW5yaXNlXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNGRjUxMkZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0YwOTgxOVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiUHVycGxlIFBhcmFkaXNlXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMxRDJCNjRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0Y4Q0REQVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiU2VhIFdlZWRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzRDQjhDNFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjM0NEM0FEXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJQaW5reVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjREQ1RTg5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNGN0JCOTdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkNoZXJyeVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRUIzMzQ5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNGNDVDNDNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIk1vaml0b1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjMUQ5NzZDXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM5M0Y5QjlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkp1aWN5IE9yYW5nZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRkY4MDA4XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNGRkM4MzdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIk1pcmFnZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjMTYyMjJBXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMzQTYwNzNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlN0ZWVsIEdyYXlcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzFGMUMyQ1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjOTI4REFCXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJLYXNobWlyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM2MTQzODVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzUxNjM5NVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiRWxlY3RyaWMgVmlvbGV0XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM0Nzc2RTZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzhFNTRFOVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiVmVuaWNlIEJsdWVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzA4NTA3OFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjODVEOENFXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJCb3JhIEJvcmFcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzJCQzBFNFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRUFFQ0M2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJNb3NzXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMxMzRFNUVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzcxQjI4MFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiU2hyb29tIEhhemVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzVDMjU4RFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjNDM4OUEyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJNeXN0aWNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzc1N0Y5QVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRDdEREU4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJNaWRuaWdodCBDaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMyMzI1MjZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzQxNDM0NVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiU2VhIEJsaXp6XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMxQ0Q4RDJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzkzRURDN1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiT3BhXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMzRDdFQUFcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0ZGRTQ3QVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiVGl0YW5pdW1cIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzI4MzA0OFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjODU5Mzk4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJNYW50bGVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzI0QzZEQ1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjNTE0QTlEXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJEcmFjdWxhXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNEQzI0MjRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzRBNTY5RFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiUGVhY2hcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0VENDI2NFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRkZFREJDXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJNb29ucmlzZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjREFFMkY4XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNENkE0QTRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkNsb3Vkc1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRUNFOUU2XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNGRkZGRkZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlN0ZWxsYXJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzc0NzRCRlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMzQ4QUM3XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJCb3VyYm9uXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNFQzZGNjZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0YzQTE4M1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQ2FsbSBEYXJ5YVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjNWYyYzgyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM0OWEwOWRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkluZmx1ZW56YVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjQzA0ODQ4XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM0ODAwNDhcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlNocmltcHlcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI2U0M2ExNVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjZTY1MjQ1XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJBcm15XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM0MTRkMGJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzcyN2ExN1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiTWlha2FcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0ZDMzU0Q1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMEFCRkJDXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJQaW5vdCBOb2lyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM0YjZjYjdcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzE4Mjg0OFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiRGF5IFRyaXBwZXJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI2Y4NTdhNlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjZmY1ODU4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJOYW1uXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNhNzM3MzdcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzdhMjgyOFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQmx1cnJ5IEJlYWNoXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNkNTMzNjlcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI2NiYWQ2ZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiVmFzaWx5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNlOWQzNjJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzMzMzMzM1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQSBMb3N0IE1lbW9yeVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjREU2MjYyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNGRkI4OENcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlBldHJpY2hvclwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjNjY2NjAwXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM5OTk5NjZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkpvbnF1aWxcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0ZGRUVFRVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRERFRkJCXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJTaXJpdXMgVGFtZWRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0VGRUZCQlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRDREM0REXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJLeW90b1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjYzIxNTAwXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNmZmM1MDBcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIk1pc3R5IE1lYWRvd1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjMjE1ZjAwXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNlNGU0ZDlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkFxdWFsaWNpb3VzXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM1MEM5QzNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzk2REVEQVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiTW9vclwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjNjE2MTYxXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM5YmM1YzNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkFsbW9zdFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjZGRkNmYzXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNmYWFjYThcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkZvcmV2ZXIgTG9zdFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjNUQ0MTU3XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNBOENBQkFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIldpbnRlclwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRTZEQURBXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMyNzQwNDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkF1dHVtblwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjREFEMjk5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNCMERBQjlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkNhbmR5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNEMzk1OUJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0JGRTZCQVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiUmVlZlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjMDBkMmZmXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMzYTdiZDVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlRoZSBTdHJhaW5cIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzg3MDAwMFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMTkwQTA1XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJEaXJ0eSBGb2dcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0I5OTNENlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjOENBNkRCXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJFYXJ0aGx5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM2NDkxNzNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0RCRDVBNFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiVmlyZ2luXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNDOUZGQkZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI0ZGQUZCRFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQXNoXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM2MDZjODhcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzNmNGM2YlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiU2hhZG93IE5pZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzUzMzQ2RFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiQ2hlcnJ5Ymxvc3NvbXNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0ZCRDNFOVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjQkIzNzdEXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJQYXJrbGlmZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjQUREMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM3QjkyMEFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkRhbmNlIFRvIEZvcmdldFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRkY0RTUwXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNGOUQ0MjNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlN0YXJmYWxsXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNGMEMyN0JcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzRCMTI0OFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiUmVkIE1pc3RcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjZTc0YzNjXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJUZWFsIExvdmVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0FBRkZBOVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMTFGRkJEXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJOZW9uIExpZmVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0IzRkZBQlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMTJGRkY3XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJNYW4gb2YgU3RlZWxcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzc4MDIwNlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMDYxMTYxXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJBbWV0aHlzdFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjOUQ1MEJCXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiM2RTQ4QUFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkNoZWVyIFVwIEVtbyBLaWRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzU1NjI3MFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjRkY2QjZCXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJTaG9yZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjNzBlMWY1XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNmZmQxOTRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkZhY2Vib29rIE1lc3NlbmdlclwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjMDBjNmZmXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMwMDcyZmZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlNvdW5kQ2xvdWRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI2ZlOGMwMFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjZjgzNjAwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJCZWhvbmdvXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM1MmMyMzRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzA2MTcwMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiU2VydlF1aWNrXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM0ODU1NjNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzI5MzIzY1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiRnJpZGF5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM4M2E0ZDRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI2I2ZmJmZlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiTWFydGluaVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRkRGQzQ3XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMyNEZFNDFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIk1ldGFsbGljIFRvYWRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI2FiYmFhYlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjZmZmZmZmXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJCZXR3ZWVuIFRoZSBDbG91ZHNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiIzczQzhBOVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMzczQjQ0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJDcmF6eSBPcmFuZ2UgSVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjRDM4MzEyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiNBODMyNzlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIkhlcnNoZXlzXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiMxZTEzMGNcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzlhODQ3OFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiVGFsa2luZyBUbyBNaWNlIEVsZlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjOTQ4RTk5XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMyRTE0MzdcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlB1cnBsZSBCbGlzc1wiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6XCIjMzYwMDMzXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjJcIjpcIiMwYjg3OTNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjpcIlByZWRhd25cIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOlwiI0ZGQTE3RlwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6XCIjMDAyMjNFXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6XCJFbmRsZXNzIFJpdmVyXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiM0M2NlYTJcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiIzE4NWE5ZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOlwiUGFzdGVsIE9yYW5nZSBhdCB0aGUgU3VuXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvcjFcIjpcIiNmZmIzNDdcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOlwiI2ZmY2MzM1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlR3aXRjaFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6IFwiIzY0NDFBNVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6IFwiIzJhMDg0NVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkluc3RhZ3JhbVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6IFwiIzUxN2ZhNFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6IFwiIzI0Mzk0OVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkZsaWNrclwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IxXCI6IFwiI2ZmMDA4NFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3IyXCI6IFwiIzMzMDAxYlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlZpbmVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMVwiOiBcIiMwMGJmOGZcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yMlwiOiBcIiMwMDE1MTBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdfSlcbiAgICAuZGlyZWN0aXZlKCdjZXJlc0dyYWRpZW50QmcnLCBbXG4gICAgICAgICckbG9nJywgJyRpbnRlcnBvbGF0ZScsICdjZXJlc0dyYWRpZW50cycsXG4gICAgICAgIGZ1bmN0aW9uICgkbG9nLCAkaW50ZXJwb2xhdGUsIGNlcmVzR3JhZGllbnRzKSB7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG5cbiAgICAgICAgICAgICAgICAvL2lmIGRpcmVjdGl2ZSBpcyBkZWNsYXJlZCB2aWEgY2xhc3MsXG4gICAgICAgICAgICAgICAgLy9ldmFsdWF0ZSB0aGUgb2JqZWN0IHByb3ZpZGVkIGJ5IHRoZSBkZWNsYXJhdGlvblxuICAgICAgICAgICAgICAgIC8vYW5kIHNob3ZlIGl0IGludG8gdGhlIGF0dHJzIHZhciBzbyB0aGF0IGl0XG4gICAgICAgICAgICAgICAgLy8gYmVoYXZlcyBsaWtlIHRoZSBvdGhlciB0d28gZGVjbGFyYXRpb24gdHlwZXMuXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNTdHJpbmcoYXR0cnMuY2VyZXNHcmFkaWVudEJnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlQXR0cyA9IHNjb3BlLiRldmFsKGF0dHJzLmNlcmVzR3JhZGllbnRCZyk7XG4gICAgICAgICAgICAgICAgICAgIF8ubWVyZ2UoYXR0cnMsIGRpcmVjdGl2ZUF0dHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBncmFkaWVudHNNYXAgPSBfLmluZGV4QnkoY2VyZXNHcmFkaWVudHMuZ3JhZGllbnRzLCBmdW5jdGlvbiAoZ3JhZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUyhncmFkLm5hbWUpLmRhc2hlcml6ZSgpLmNob21wTGVmdCgnLScpLnM7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRHcmFkaWVudFN0eWxlID0gYXR0cnMuZ3JhZGllbnRTdHlsZSA/IGF0dHJzLmdyYWRpZW50U3R5bGUgOiBcImVtZXJhbGQtd2F0ZXJcIjtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRHcmFkaWVudCA9IGdyYWRpZW50c01hcFtzZWxlY3RlZEdyYWRpZW50U3R5bGVdO1xuXG4gICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onLCAnbXMnLCAnbyddO1xuICAgICAgICAgICAgICAgIHZlbmRvcnMgPSBfLm1hcFZhbHVlcyh2ZW5kb3JzLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUyh2KS5lbnN1cmVMZWZ0KCctJykuZW5zdXJlUmlnaHQoJy0nKS5zO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZlbmRvcnMgPSBfLnZhbHVlcyh2ZW5kb3JzKTtcbiAgICAgICAgICAgICAgICB2ZW5kb3JzLnB1c2goJycpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGJhY2tncm91bmQgPSAkaW50ZXJwb2xhdGUoXCJiYWNrZ3JvdW5kOiB7eyB2ZW5kb3IgfX1saW5lYXItZ3JhZGllbnQoe3sgZGVncmVlIH19ZGVnLCB7eyBjb2xvcjEgfX0gMTAlLCB7eyBjb2xvcjIgfX0gOTAlKTtcIik7XG4gICAgICAgICAgICAgICAgdmFyIGJrZ2RSdWxlcyA9IF8ubWFwVmFsdWVzKHZlbmRvcnMsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkR3JhZGllbnQudmVuZG9yID0gdjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRHcmFkaWVudC5kZWdyZWUgPSBhdHRycy5ncmFkaWVudERlZ3JlZSA/IGF0dHJzLmdyYWRpZW50RGVncmVlIDogOTA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYWNrZ3JvdW5kKHNlbGVjdGVkR3JhZGllbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIGJrZ2RTdHJpbmcgPSBfLnJlZHVjZShia2dkUnVsZXMsIGZ1bmN0aW9uIChhbGwsIHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbCArIHJ1bGU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZWxTdHlsZSA9ICRlbC5hdHRyKFwic3R5bGVcIikgKyBia2dkU3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgJGVsLmF0dHIoXCJzdHlsZVwiLCBlbFN0eWxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0FFQycsXG4gICAgICAgICAgICAgICAgbGluazogbGlua1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCA9IHdpbmRvdy5qUXVlcnk7XG52YXIgXyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvbG9kYXNoL2Rpc3QvbG9kYXNoLmNvbXBhdC5qc1wiKTtcbnZhciBTID0gcmVxdWlyZShcIi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zdHJpbmdqcy9saWIvc3RyaW5nLm1pbi5qc1wiKTtcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcpXG4gICAgLmRpcmVjdGl2ZSgnY2VyZXNIb3ZlckFuaW1hdGlvbicsICBbJyRsb2cnLCAnJHRpbWVvdXQnLCAnYXBwbHlBbmltYXRpb24nLCBmdW5jdGlvbiAoJGxvZywgJHRpbWVvdXQsIGFwcGx5QW5pbWF0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGF0dHJzLmNlcmVzSG92ZXJBbmltYXRpb247XG4gICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gYXR0cnMuY2VyZXNIb3ZlckFuaW1hdGlvbkRlbGF5O1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGF0dHJzLmhvdmVyQW5pbWF0aW9uRHVyYXRpb247XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gYXBwbHlBbmltYXRpb24uZG9BbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXksIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlBbmltYXRpb24uY2xlYXJBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uLCB0aW1lb3V0KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSB3aW5kb3cualF1ZXJ5O1xudmFyIF8gPSByZXF1aXJlKFwiLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2xvZGFzaC9kaXN0L2xvZGFzaC5jb21wYXQuanNcIik7XG52YXIgUyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3RyaW5nanMvbGliL3N0cmluZy5taW4uanNcIik7XG5cbmFuZ3VsYXIubW9kdWxlKCd3ZWJBcHAnKVxuICAgIC5kaXJlY3RpdmUoJ2NlcmVzVmlkZW9CZycsIFtcbiAgICAgICAgJyRsb2cnLCAnJGludGVycG9sYXRlJywgJyR3aW5kb3cnLFxuICAgICAgICBmdW5jdGlvbiAoJGxvZywgJGludGVycG9sYXRlLCAkd2luZG93KSB7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG5cbiAgICAgICAgICAgICAgICAvL2lmIGRpcmVjdGl2ZSBpcyBkZWNsYXJlZCB2aWEgY2xhc3MsXG4gICAgICAgICAgICAgICAgLy9ldmFsdWF0ZSB0aGUgb2JqZWN0IHByb3ZpZGVkIGJ5IHRoZSBkZWNsYXJhdGlvblxuICAgICAgICAgICAgICAgIC8vYW5kIHNob3ZlIGl0IGludG8gdGhlIGF0dHJzIHZhciBzbyB0aGF0IGl0XG4gICAgICAgICAgICAgICAgLy8gYmVoYXZlcyBsaWtlIHRoZSBvdGhlciB0d28gZGVjbGFyYXRpb24gdHlwZXMuXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNTdHJpbmcoYXR0cnMuY2VyZXNWaWRlb0JnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlQXR0cyA9IHNjb3BlLiRldmFsKGF0dHJzLmNlcmVzVmlkZW9CZyk7XG4gICAgICAgICAgICAgICAgICAgIF8ubWVyZ2UoYXR0cnMsIGRpcmVjdGl2ZUF0dHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2VyZXMtYmFja2dyb3VuZC12aWRlb1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHZpZGVvIG11dGVkPVwibXV0ZWRcIiBwcmVsb2FkPVwiYXV0b1wiIGF1dG9wbGF5PVwiYXV0b3BsYXlcIiBsb29wPVwibG9vcFwiIHBvc3Rlcj1cInt7IHBvc3RlciB9fVwiIGNsYXNzPVwidmlkZW8tanNcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxzb3VyY2Ugc3JjPVwie3sgbXA0UGF0aCB9fVwiIHR5cGU9XCJ2aWRlby9tcDRcIiAvPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHNvdXJjZSBzcmM9XCJ7eyB3ZWJtUGF0aCB9fVwiIHR5cGU9XCJ2aWRlby93ZWJtXCIgLz4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvdmlkZW8+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICAgICAgICAgIHZhciBjb21waWxlZFRlbXBsYXRlID0gJGludGVycG9sYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICB2YXIgdmlkZW9IdG1sID0gY29tcGlsZWRUZW1wbGF0ZShhdHRycyk7XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdoYXMtY2VyZXMtdmlkZW8tYmcnKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnByZXBlbmQodmlkZW9IdG1sKTtcblxuICAgICAgICAgICAgICAgIHZhciB2aWRlb0VsID0gZWxlbWVudC5maW5kKCcuY2VyZXMtYmFja2dyb3VuZC12aWRlbyA+IHZpZGVvJyk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvRWwuY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvRWwgPSB2aWRlb0VsWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlVmlkZW9TaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxXaWR0aCA9IGVsZW1lbnQud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsSGVpZ2h0ID0gZWxlbWVudC5oZWlnaHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlkV2lkdGggPSB2aWRlb0VsLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWRIZWlnaHQgPSB2aWRlb0VsLmhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlkQXNwZWN0UmF0aW8gPSB2aWRXaWR0aCAvIHZpZEhlaWdodDtcblxuXG4gICAgICAgICAgICAgICAgICAgICQodmlkZW9FbCkuY3NzKCdtaW4td2lkdGgnLCBNYXRoLnJvdW5kKE1hdGgubWF4KGVsV2lkdGgsIGVsSGVpZ2h0ICogdmlkQXNwZWN0UmF0aW8pKSk7XG4gICAgICAgICAgICAgICAgICAgICQodmlkZW9FbCkuY3NzKCdtaW4taGVpZ2h0JywgTWF0aC5yb3VuZChNYXRoLm1heChlbEhlaWdodCwgZWxXaWR0aCAvIHZpZEFzcGVjdFJhdGlvKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vR3JhYiBpdCBhZ2FpbiBiZWNhdXNlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSB2aWRlbyBoYXZlIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgICB2aWRXaWR0aCA9IHZpZGVvRWwud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgdmlkSGVpZ2h0ID0gdmlkZW9FbC5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSB0b3AgYW5kIGxlZnQgb2Zmc2V0cyB0byBjZW50ZXIgdGhlIHZpZGVvXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gTWF0aC5yb3VuZCgodmlkV2lkdGggLSBlbFdpZHRoKSAvIDIpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3AgPSBNYXRoLnJvdW5kKCh2aWRIZWlnaHQgLSBlbEhlaWdodCkgLyAyKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAkKHZpZGVvRWwpLmNzcygnbGVmdCcsIGxlZnQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAgICAgJCh2aWRlb0VsKS5jc3MoJ3RvcCcsIHRvcCArICdweCcpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlkZW9TaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCgkd2luZG93KS5vbihcImRlYm91bmNlZHJlc2l6ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlkZW9TaXplKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdBRUMnLFxuICAgICAgICAgICAgICAgIGxpbms6IGxpbmtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcpXG4gICAgLmRpcmVjdGl2ZSgnY291bnRlcicsIFsnJGxvZycsICckd2luZG93JywgZnVuY3Rpb24gKCRsb2csICR3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBpbi12aWV3PVwiYW5pbWF0ZSgkaW52aWV3KVwiPjwvZGl2PicsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gKCRzY29wZSkge1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF8gPSAkd2luZG93Ll87XG4gICAgICAgICAgICAgICAgdmFyIG51bWVyYWwgPSAkd2luZG93Lm51bWVyYWw7XG4gICAgICAgICAgICAgICAgdmFyIFR3ZWVuTWF4ID0gJHdpbmRvdy5Ud2Vlbk1heDtcbiAgICAgICAgICAgICAgICB2YXIgUG93ZXIyID0gJHdpbmRvdy5Qb3dlcjI7XG5cbiAgICAgICAgICAgICAgICAvL2dldCB0aGUgc3RhcnQgJiBlbmQgdmFsdWVzXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJWYWwgPSBhdHRycy5zdGFydFZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBlbmRWYWwgPSBhdHRycy5lbmRWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJlZml4ID0gYXR0cnMucHJlZml4ID8gYXR0cnMucHJlZml4IDogJyc7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RmaXggPSBhdHRycy5wb3N0Zml4ID8gYXR0cnMucG9zdGZpeCA6ICcnO1xuICAgICAgICAgICAgICAgIHZhciBmb3JtYXQgPSBhdHRycy5udW1iZXJGb3JtYXQgPyBhdHRycy5udW1iZXJGb3JtYXQgOiAnMCwwJztcblxuICAgICAgICAgICAgICAgIC8vYW5pbWF0aW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBhdHRycy5hbmltYXRpb25EdXJhdGlvbiA/IHBhcnNlRmxvYXQoYXR0cnMuYW5pbWF0aW9uRHVyYXRpb24pIDogNTtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uRGVsYXkgPSBhdHRycy5hbmltYXRpb25EZWxheSA/IHBhcnNlRmxvYXQoYXR0cnMuYW5pbWF0aW9uRGVsYXkpIDogMDtcbiAgICAgICAgICAgICAgICB2YXIgZWFzaW5nID0gYXR0cnMuZWFzaW5nID8gYXR0cnMuZWFzaW5nIDogJ1Bvd2VyMi5lYXNlSW5PdXQnO1xuICAgICAgICAgICAgICAgIHZhciBlYXNpbmdQYXJ0cyA9IGVhc2luZy5zcGxpdCgnLicpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGVhc2VPYmogPSAkd2luZG93O1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChlYXNpbmdQYXJ0cywgZnVuY3Rpb24gKGVhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZWFzZU9iaiA9IGVhc2VPYmpbZWFzZV07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWFzaW5nID0gZWFzZU9iajtcblxuICAgICAgICAgICAgICAgIC8vbnVtZXJhbGpzIGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRMYW5nID0gbnVtZXJhbC5sYW5ndWFnZURhdGEoJ2VuJyk7XG4gICAgICAgICAgICAgICAgdmFyIG9sZExhbmcgPSBfLmNsb25lRGVlcChkZWZhdWx0TGFuZyk7XG5cblxuICAgICAgICAgICAgICAgIC8vTk9URTogV2UgaGF2ZSB0byBkaXJlY3RseSBlZGl0IHRoZSBET00gYmVjYXVzZSB0aGUgTkcgYXBwbHlcbiAgICAgICAgICAgICAgICAvL2lzbid0IHN1ZmZpY2llbnQgZm9yIGFuaW1hdGluZyBzdGVwcy5cbiAgICAgICAgICAgICAgICBlbGVtZW50LnRleHQoY3VyclZhbCk7XG5cbiAgICAgICAgICAgICAgICBzY29wZS5nZXRUZXh0VmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChjdXJyVmFsKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldFRleHRWYWwgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy50aG91c2FuZHNEZWxpbWl0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYW5nLmRlbGltaXRlcnMudGhvdXNhbmRzID0gYXR0cnMudGhvdXNhbmRzRGVsaW1pdGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5kZWNpbWFsRGVsaW1pdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFuZy5kZWxpbWl0ZXJzLmRlY2ltYWwgPSBhdHRycy5kZWNpbWFsRGVsaW1pdGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJWYWwgPSBwYXJzZUZsb2F0KHZhbCwgMTApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtU3RyID0gcHJlZml4ICsgbnVtZXJhbChjdXJyVmFsKS5mb3JtYXQoZm9ybWF0KSArIHBvc3RmaXg7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dChudW1TdHIpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzY29wZS5hbmltYXRlID0gZnVuY3Rpb24gKGludmlldykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGVkICYmIGludmlldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgVHdlZW5NYXgudG8oc2NvcGUsIGR1cmF0aW9uLCB7IGRlbGF5OiBhbmltYXRpb25EZWxheSwgc2V0VGV4dFZhbDogZW5kVmFsLCBlYXNlOiBlYXNpbmcsIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc2V0IHRoZSBkZWZhdWx0IG51bWVyYWwuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhbC5sYW5ndWFnZSgnZW4nLCBvbGRMYW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBsb2FkIHNyYyBtb2R1bGVzXG4vLyBBREQgUkVRVUlSRSBTVEFURU1FTlRTIEZPUiBORVcgU0hPUlRDT0RFUyBIRVJFXG5cbi8vIFdBUk5JTkc6IERPIE5PVCBERUxFVEUgVEhFIExJTkUgQkVMT1cgLS0gVEhFIFNIT1JUQ09ERSBHRU5FUkFUT1IgREVQRU5EUyBPTiBJVFxuLy8gW1Nob3J0Y29kZU5nQ29udHJvbGxlclJlcXVpcmVTdGF0ZW1lbnRdXG5yZXF1aXJlKCcuL2NlcmVzU2VwYXJhdG9yU3R5bGVkQ3RybC9jZXJlc1NlcGFyYXRvclN0eWxlZEN0cmwnKTtcbnJlcXVpcmUoJy4vY2VyZXNJY29uTGlzdEl0ZW1DdHJsL2NlcmVzSWNvbkxpc3RJdGVtQ3RybCcpO1xucmVxdWlyZSgnLi9jZXJlc0ljb25MaXN0Q3RybC9jZXJlc0ljb25MaXN0Q3RybCcpO1xucmVxdWlyZSgnLi9jZXJlc0ljb25CbG9ja0N0cmwvY2VyZXNJY29uQmxvY2tDdHJsJyk7XG5yZXF1aXJlKCcuL2NlcmVzSWNvbkxpbmtDdHJsL2NlcmVzSWNvbkxpbmtDdHJsJyk7XG5yZXF1aXJlKCcuL2NlcmVzSWNvbkJveEN0cmwvY2VyZXNJY29uQm94Q3RybCcpO1xucmVxdWlyZSgnLi9jZXJlc0J1dHRvbk91dGxpbmVDdHJsL2NlcmVzQnV0dG9uT3V0bGluZUN0cmwnKTtcbnJlcXVpcmUoJy4vY2VyZXNCdXR0b25Tb2xpZEN0cmwvY2VyZXNCdXR0b25Tb2xpZEN0cmwnKTtcbnJlcXVpcmUoJy4vY2VyZXNBbmltYXRpb25CbG9ja0N0cmwvY2VyZXNBbmltYXRpb25CbG9ja0N0cmwnKTtcbnJlcXVpcmUoJy4vY2VyZXNJY29uTGlzdEl0ZW1DdHJsL2NlcmVzSWNvbkxpc3RJdGVtQ3RybCcpO1xucmVxdWlyZSgnLi9jZXJlc0dvb2dsZU1hcE1hcmtlckN0cmwvY2VyZXNHb29nbGVNYXBNYXJrZXJDdHJsJyk7XG5yZXF1aXJlKCcuL2NlcmVzR29vZ2xlTWFwQ3RybC9jZXJlc0dvb2dsZU1hcEN0cmwnKTtcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcsIFtcbiAgICAvLyBBREQgTU9EVUxFIE5BTUVTIEZPUiBORVcgU0hPUlRDT0RFUyBIRVJFXG4gICAgJ25nQW5pbWF0ZScsXG4gICAgJ2FuZ3VsYXItaW52aWV3JyxcbiAgICAndGltZXInLFxuICAgICdnb29nbGUtbWFwcycsXG4gICAgLy8gV0FSTklORzogRE8gTk9UIERFTEVURSBUSEUgTElORSBCRUxPVyAtLSBUSEUgU0hPUlRDT0RFIEdFTkVSQVRPUiBERVBFTkRTIE9OIElUXG4gICAgLy8gW1Nob3J0Y29kZU5nTW9kdWxlSW1wb3J0XVxuICAgICAgICAnY2VyZXNTZXBhcmF0b3JTdHlsZWRDdHJsTW9kdWxlJyxcbiAgICAgICAgJ2NlcmVzSWNvbkxpc3RJdGVtQ3RybE1vZHVsZScsXG4gICAgICAgICdjZXJlc0ljb25MaXN0Q3RybE1vZHVsZScsXG4gICAgICAgICdjZXJlc0ljb25CbG9ja0N0cmxNb2R1bGUnLFxuICAgICAgICAnY2VyZXNJY29uTGlua0N0cmxNb2R1bGUnLFxuICAgICAgICAnY2VyZXNJY29uQm94Q3RybE1vZHVsZScsXG4gICAgICAgICdjZXJlc0J1dHRvbk91dGxpbmVDdHJsTW9kdWxlJyxcbiAgICAgICAgJ2NlcmVzQnV0dG9uU29saWRDdHJsTW9kdWxlJyxcbiAgICAgICAgJ2NlcmVzQW5pbWF0aW9uQmxvY2tDdHJsTW9kdWxlJyxcbiAgICAgICAgJ2NlcmVzSWNvbkxpc3RJdGVtQ3RybE1vZHVsZScsXG4gICAgJ2NlcmVzR29vZ2xlTWFwTWFya2VyQ3RybE1vZHVsZScsXG4gICAgJ2NlcmVzR29vZ2xlTWFwQ3RybE1vZHVsZSdcbl0pO1xuXG5yZXF1aXJlKCcuL3NlcnZpY2VzL2Jyb3dzZXJ2ZW5kb3JzdHJpbmdzJyk7XG5yZXF1aXJlKCcuL3NlcnZpY2VzL2FwcGx5YW5pbWF0aW9uJyk7XG5cbnJlcXVpcmUoJy4vdmVuZG9ycy9udW1lcmFsJyk7XG5yZXF1aXJlKCcuL3ZlbmRvcnMvYW5ndWxhci1wYXJhbGxheC9zY3JpcHRzL2FuZ3VsYXItcGFyYWxsYXguanMnKTtcbnJlcXVpcmUoJy4vdmVuZG9ycy90b3VjaGVmZmVjdHMnKTtcblxucmVxdWlyZSgnLi9kaXJlY3RpdmVzL2FuZ3VsYXItcGFyYWxsYXgnKTtcbnJlcXVpcmUoJy4vZGlyZWN0aXZlcy9jZXJlc2NsaWNrYW5pbWF0aW9uJyk7XG5yZXF1aXJlKCcuL2RpcmVjdGl2ZXMvY2VyZXNlbnRyYW5jZWFuaW1hdGlvbnR5cGUnKTtcbnJlcXVpcmUoJy4vZGlyZWN0aXZlcy9jZXJlc2hvdmVyYW5pbWF0aW9uJyk7XG5yZXF1aXJlKCcuL2RpcmVjdGl2ZXMvY2VyZXNncmFkaWVudGJnJyk7XG5yZXF1aXJlKCcuL2RpcmVjdGl2ZXMvY2VyZXN2aWRlb2JnJyk7XG5yZXF1aXJlKCcuL2RpcmVjdGl2ZXMvY2VyZXNmbGlwYm9vaycpO1xucmVxdWlyZSgnLi9kaXJlY3RpdmVzL2NvdW50ZXInKTtcbnJlcXVpcmUoJy4vZGlyZWN0aXZlcy9ic2Nhcm91c2VsLmpzJyk7XG5yZXF1aXJlKCcuL2RpcmVjdGl2ZXMvYnNjYXJvdXNlbHNsaWRlLmpzJyk7XG5cblxuXG4vL2FuZ3VsYXIgY29uZmlndXJhdGlvblxuYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgLypzbWFydCB3b3JrcyBnbyBoZXJlKi9cbiAgICB2YXIgJGh0bWwgPSBhbmd1bGFyLmVsZW1lbnQoJ2h0bWwnKTtcbiAgICAvLyBib290c3RyYXAgbW9kZWxcbiAgICBhbmd1bGFyLmJvb3RzdHJhcCgkaHRtbCwgWyd3ZWJBcHAnXSk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICQgPSB3aW5kb3cualF1ZXJ5XG52YXIgXyA9IHJlcXVpcmUoXCIuLy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvbG9kYXNoL2Rpc3QvbG9kYXNoLmNvbXBhdC5qc1wiKTtcbnZhciBTID0gcmVxdWlyZShcIi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zdHJpbmdqcy9saWIvc3RyaW5nLm1pbi5qc1wiKTtcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ2FwcGx5QW5pbWF0aW9uJywgZnVuY3Rpb24gKGJyb3dzZXJWZW5kb3JTdHJpbmdzLCAkbG9nLCAkdGltZW91dCkge1xuXG4gICAgICAgIHZhciBzZXRBbGxWZW5kb3JDU1MgPSBmdW5jdGlvbiAoZWxlbWVudCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgICAgICBfLmZvckVhY2goYnJvd3NlclZlbmRvclN0cmluZ3MsIGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGVQcmVmaXggPSBTKHByZWZpeCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZWZpeCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVByZWZpeC5lbnN1cmVMZWZ0KCctJykuZW5zdXJlUmlnaHQoJy0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGVQcmVmaXguZW5zdXJlUmlnaHQocHJvcGVydHkpLnMsIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFB1YmxpYyBBUEkgaGVyZVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9BbmltYXRpb246IGZ1bmN0aW9uIChlbGVtZW50LCBhbmltYXRpb24sIGRlbGF5LCBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5oYXNDbGFzcygnYW5pbWF0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWxsVmVuZG9yQ1NTKGVsZW1lbnQsICdhbmltYXRpb24tZHVyYXRpb24nLCBTKGR1cmF0aW9uKS5lbnN1cmVSaWdodCgncycpLnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRBbGxWZW5kb3JDU1MoZWxlbWVudCwgJ2FuaW1hdGlvbi1kZWxheScsIFMoZGVsYXkpLmVuc3VyZVJpZ2h0KCdzJykucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKFwiYW5pbWF0ZWQgXCIgKyBhbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhcIkFkZGVkIEFuaW1hdGVkIGNsYXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IHBhcnNlRmxvYXQoZGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHBhcnNlRmxvYXQoZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBkZWxheSA9ICFpc05hTihkZWxheSkgPyBkZWxheSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gIWlzTmFOKGR1cmF0aW9uKSA/IGR1cmF0aW9uIDogMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkZWxheSArIGR1cmF0aW9uKSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFyQW5pbWF0aW9uOiBmdW5jdGlvbiAoZWxlbWVudCwgYW5pbWF0aW9uLCB0aW1lb3V0LCBjYikge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSB0aW1lb3V0ID4gMCA/IHRpbWVvdXQgOiA3NTA7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhcImFuaW1hdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICRsb2cubG9nKFwiUmVtb3ZlZCBBbmltYXRlZCBjbGFzc1wiKTtcblxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3dlYkFwcCcpXG4gIC5jb25zdGFudCgnYnJvd3NlclZlbmRvclN0cmluZ3MnLCBbJ3dlYmtpdCcsICdtb3onLCAnbycsICdtcycsICcnXSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLXBhcmFsbGF4JywgW1xuICAgIF0pLmRpcmVjdGl2ZSgncGFyYWxsYXgnLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgcGFyYWxsYXhSYXRpbzogJ0AnLFxuICAgICAgICAgICAgICAgIHBhcmFsbGF4VmVydGljYWxPZmZzZXQ6ICdAJyxcbiAgICAgICAgICAgICAgICBwYXJhbGxheEhvcml6b250YWxPZmZzZXQ6ICdAJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtLCAkYXR0cnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhvcml6b250YWwgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5jc3MoJ2xlZnQnLCAkc2NvcGUucGFyYWxsYXhIb3Jpem9udGFsT2Zmc2V0ICsgXCJweFwiKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY1ZhbFkgPSAkd2luZG93LnBhZ2VZT2Zmc2V0ICogKCRzY29wZS5wYXJhbGxheFJhdGlvID8gJHNjb3BlLnBhcmFsbGF4UmF0aW8gOiAxLjEgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGNWYWxZIDw9ICR3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3BWYWwgPSAoY2FsY1ZhbFkgPCAkc2NvcGUucGFyYWxsYXhWZXJ0aWNhbE9mZnNldCA/ICRzY29wZS5wYXJhbGxheFZlcnRpY2FsT2Zmc2V0IDogY2FsY1ZhbFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jc3MoJ3RvcCcsIHRvcFZhbCArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKFwic2Nyb2xsXCIsIHNldFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZChcInRvdWNobW92ZVwiLCBzZXRQb3NpdGlvbik7XG4gICAgICAgICAgICB9ICAvLyBsaW5rIGZ1bmN0aW9uXG4gICAgICAgIH07XG4gICAgfV0pLmRpcmVjdGl2ZSgncGFyYWxsYXhCYWNrZ3JvdW5kJywgWyckd2luZG93JywgZnVuY3Rpb24gKCR3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PicsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBhcmFsbGF4UmF0aW86ICdAJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtLCBhdHRycykge1xuXG4gICAgICAgICAgICAgICAgLy9pZiBkaXJlY3RpdmUgaXMgZGVjbGFyZWQgdmlhIGNsYXNzLFxuICAgICAgICAgICAgICAgIC8vZXZhbHVhdGUgdGhlIG9iamVjdCBwcm92aWRlZCBieSB0aGUgZGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAvL2FuZCBzaG92ZSBpdCBpbnRvIHRoZSBhdHRycyB2YXIgc28gdGhhdCBpdFxuICAgICAgICAgICAgICAgIC8vIGJlaGF2ZXMgbGlrZSB0aGUgb3RoZXIgdHdvIGRlY2xhcmF0aW9uIHR5cGVzLlxuICAgICAgICAgICAgICAgIGlmIChfLmlzU3RyaW5nKGF0dHJzLnBhcmFsbGF4QmFja2dyb3VuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUF0dHMgPSAkc2NvcGUuJGV2YWwoYXR0cnMucGFyYWxsYXhCYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgICAgICAgICAgXy5tZXJnZShhdHRycywgZGlyZWN0aXZlQXR0cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHNldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY1ZhbFkgPSAoZWxlbS5wcm9wKCdvZmZzZXRUb3AnKSAtICR3aW5kb3cucGFnZVlPZmZzZXQpICogKCRzY29wZS5wYXJhbGxheFJhdGlvID8gJHNjb3BlLnBhcmFsbGF4UmF0aW8gOiAxLjEgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCBwb3NpdGlvbmluZ1xuICAgICAgICAgICAgICAgICAgICBlbGVtLmNzcygnYmFja2dyb3VuZC1wb3NpdGlvbicsIFwiNTAlIFwiICsgY2FsY1ZhbFkgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgb3VyIGluaXRpYWwgcG9zaXRpb24gLSBmaXhlcyB3ZWJraXQgYmFja2dyb3VuZCByZW5kZXIgYnVnXG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ2xvYWQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZChcInNjcm9sbFwiLCBzZXRQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoXCJ0b3VjaG1vdmVcIiwgc2V0UG9zaXRpb24pO1xuICAgICAgICAgICAgfSAgLy8gbGluayBmdW5jdGlvblxuICAgICAgICB9O1xuICAgIH1dKTtcbiIsIi8qIVxuICogbnVtZXJhbC5qc1xuICogdmVyc2lvbiA6IDEuNS4zXG4gKiBhdXRob3IgOiBBZGFtIERyYXBlclxuICogbGljZW5zZSA6IE1JVFxuICogaHR0cDovL2FkYW13ZHJhcGVyLmdpdGh1Yi5jb20vTnVtZXJhbC1qcy9cbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBDb25zdGFudHNcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgdmFyIG51bWVyYWwsXG4gICAgICAgIFZFUlNJT04gPSAnMS41LjMnLFxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxhbmd1YWdlIGNvbmZpZyBmaWxlc1xuICAgICAgICBsYW5ndWFnZXMgPSB7fSxcbiAgICAgICAgY3VycmVudExhbmd1YWdlID0gJ2VuJyxcbiAgICAgICAgemVyb0Zvcm1hdCA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRGb3JtYXQgPSAnMCwwJyxcbiAgICAvLyBjaGVjayBmb3Igbm9kZUpTXG4gICAgICAgIGhhc01vZHVsZSA9ICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cyk7XG5cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQ29uc3RydWN0b3JzXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG4gICAgICAgIC8vIE51bWVyYWwgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE51bWVyYWwgKG51bWJlcikge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB0b0ZpeGVkKCkgdGhhdCB0cmVhdHMgZmxvYXRzIG1vcmUgbGlrZSBkZWNpbWFsc1xuICAgICAqXG4gICAgICogRml4ZXMgYmluYXJ5IHJvdW5kaW5nIGlzc3VlcyAoZWcuICgwLjYxNSkudG9GaXhlZCgyKSA9PT0gJzAuNjEnKSB0aGF0IHByZXNlbnRcbiAgICAgKiBwcm9ibGVtcyBmb3IgYWNjb3VudGluZy0gYW5kIGZpbmFuY2UtcmVsYXRlZCBzb2Z0d2FyZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ZpeGVkICh2YWx1ZSwgcHJlY2lzaW9uLCByb3VuZGluZ0Z1bmN0aW9uLCBvcHRpb25hbHMpIHtcbiAgICAgICAgdmFyIHBvd2VyID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiksXG4gICAgICAgICAgICBvcHRpb25hbHNSZWdFeHAsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgLy9yb3VuZGluZ0Z1bmN0aW9uID0gKHJvdW5kaW5nRnVuY3Rpb24gIT09IHVuZGVmaW5lZCA/IHJvdW5kaW5nRnVuY3Rpb24gOiBNYXRoLnJvdW5kKTtcbiAgICAgICAgLy8gTXVsdGlwbHkgdXAgYnkgcHJlY2lzaW9uLCByb3VuZCBhY2N1cmF0ZWx5LCB0aGVuIGRpdmlkZSBhbmQgdXNlIG5hdGl2ZSB0b0ZpeGVkKCk6XG4gICAgICAgIG91dHB1dCA9IChyb3VuZGluZ0Z1bmN0aW9uKHZhbHVlICogcG93ZXIpIC8gcG93ZXIpLnRvRml4ZWQocHJlY2lzaW9uKTtcblxuICAgICAgICBpZiAob3B0aW9uYWxzKSB7XG4gICAgICAgICAgICBvcHRpb25hbHNSZWdFeHAgPSBuZXcgUmVnRXhwKCcwezEsJyArIG9wdGlvbmFscyArICd9JCcpO1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2Uob3B0aW9uYWxzUmVnRXhwLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgRm9ybWF0dGluZ1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIHdoYXQgdHlwZSBvZiBmb3JtYXR0aW5nIHdlIG5lZWQgdG8gZG9cbiAgICBmdW5jdGlvbiBmb3JtYXROdW1lcmFsIChuLCBmb3JtYXQsIHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgdmFyIG91dHB1dDtcblxuICAgICAgICAvLyBmaWd1cmUgb3V0IHdoYXQga2luZCBvZiBmb3JtYXQgd2UgYXJlIGRlYWxpbmcgd2l0aFxuICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJyQnKSA+IC0xKSB7IC8vIGN1cnJlbmN5ISEhISFcbiAgICAgICAgICAgIG91dHB1dCA9IGZvcm1hdEN1cnJlbmN5KG4sIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0LmluZGV4T2YoJyUnKSA+IC0xKSB7IC8vIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIG91dHB1dCA9IGZvcm1hdFBlcmNlbnRhZ2UobiwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQuaW5kZXhPZignOicpID4gLTEpIHsgLy8gdGltZVxuICAgICAgICAgICAgb3V0cHV0ID0gZm9ybWF0VGltZShuLCBmb3JtYXQpO1xuICAgICAgICB9IGVsc2UgeyAvLyBwbGFpbiBvbCcgbnVtYmVycyBvciBieXRlc1xuICAgICAgICAgICAgb3V0cHV0ID0gZm9ybWF0TnVtYmVyKG4uX3ZhbHVlLCBmb3JtYXQsIHJvdW5kaW5nRnVuY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIHN0cmluZ1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8vIHJldmVydCB0byBudW1iZXJcbiAgICBmdW5jdGlvbiB1bmZvcm1hdE51bWVyYWwgKG4sIHN0cmluZykge1xuICAgICAgICB2YXIgc3RyaW5nT3JpZ2luYWwgPSBzdHJpbmcsXG4gICAgICAgICAgICB0aG91c2FuZFJlZ0V4cCxcbiAgICAgICAgICAgIG1pbGxpb25SZWdFeHAsXG4gICAgICAgICAgICBiaWxsaW9uUmVnRXhwLFxuICAgICAgICAgICAgdHJpbGxpb25SZWdFeHAsXG4gICAgICAgICAgICBzdWZmaXhlcyA9IFsnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInLCAnRUInLCAnWkInLCAnWUInXSxcbiAgICAgICAgICAgIGJ5dGVzTXVsdGlwbGllciA9IGZhbHNlLFxuICAgICAgICAgICAgcG93ZXI7XG5cbiAgICAgICAgaWYgKHN0cmluZy5pbmRleE9mKCc6JykgPiAtMSkge1xuICAgICAgICAgICAgbi5fdmFsdWUgPSB1bmZvcm1hdFRpbWUoc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzdHJpbmcgPT09IHplcm9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBuLl92YWx1ZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5kZWxpbWl0ZXJzLmRlY2ltYWwgIT09ICcuJykge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFwuL2csJycpLnJlcGxhY2UobGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uZGVsaW1pdGVycy5kZWNpbWFsLCAnLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNlZSBpZiBhYmJyZXZpYXRpb25zIGFyZSB0aGVyZSBzbyB0aGF0IHdlIGNhbiBtdWx0aXBseSB0byB0aGUgY29ycmVjdCBudW1iZXJcbiAgICAgICAgICAgICAgICB0aG91c2FuZFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ1teYS16QS1aXScgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5hYmJyZXZpYXRpb25zLnRob3VzYW5kICsgJyg/OlxcXFwpfChcXFxcJyArIGxhbmd1YWdlc1tjdXJyZW50TGFuZ3VhZ2VdLmN1cnJlbmN5LnN5bWJvbCArICcpPyg/OlxcXFwpKT8pPyQnKTtcbiAgICAgICAgICAgICAgICBtaWxsaW9uUmVnRXhwID0gbmV3IFJlZ0V4cCgnW15hLXpBLVpdJyArIGxhbmd1YWdlc1tjdXJyZW50TGFuZ3VhZ2VdLmFiYnJldmlhdGlvbnMubWlsbGlvbiArICcoPzpcXFxcKXwoXFxcXCcgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5jdXJyZW5jeS5zeW1ib2wgKyAnKT8oPzpcXFxcKSk/KT8kJyk7XG4gICAgICAgICAgICAgICAgYmlsbGlvblJlZ0V4cCA9IG5ldyBSZWdFeHAoJ1teYS16QS1aXScgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5hYmJyZXZpYXRpb25zLmJpbGxpb24gKyAnKD86XFxcXCl8KFxcXFwnICsgbGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uY3VycmVuY3kuc3ltYm9sICsgJyk/KD86XFxcXCkpPyk/JCcpO1xuICAgICAgICAgICAgICAgIHRyaWxsaW9uUmVnRXhwID0gbmV3IFJlZ0V4cCgnW15hLXpBLVpdJyArIGxhbmd1YWdlc1tjdXJyZW50TGFuZ3VhZ2VdLmFiYnJldmlhdGlvbnMudHJpbGxpb24gKyAnKD86XFxcXCl8KFxcXFwnICsgbGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uY3VycmVuY3kuc3ltYm9sICsgJyk/KD86XFxcXCkpPyk/JCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gc2VlIGlmIGJ5dGVzIGFyZSB0aGVyZSBzbyB0aGF0IHdlIGNhbiBtdWx0aXBseSB0byB0aGUgY29ycmVjdCBudW1iZXJcbiAgICAgICAgICAgICAgICBmb3IgKHBvd2VyID0gMDsgcG93ZXIgPD0gc3VmZml4ZXMubGVuZ3RoOyBwb3dlcisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVzTXVsdGlwbGllciA9IChzdHJpbmcuaW5kZXhPZihzdWZmaXhlc1twb3dlcl0pID4gLTEpID8gTWF0aC5wb3coMTAyNCwgcG93ZXIgKyAxKSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlc011bHRpcGxpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZG8gc29tZSBtYXRoIHRvIGNyZWF0ZSBvdXIgbnVtYmVyXG4gICAgICAgICAgICAgICAgbi5fdmFsdWUgPSAoKGJ5dGVzTXVsdGlwbGllcikgPyBieXRlc011bHRpcGxpZXIgOiAxKSAqICgoc3RyaW5nT3JpZ2luYWwubWF0Y2godGhvdXNhbmRSZWdFeHApKSA/IE1hdGgucG93KDEwLCAzKSA6IDEpICogKChzdHJpbmdPcmlnaW5hbC5tYXRjaChtaWxsaW9uUmVnRXhwKSkgPyBNYXRoLnBvdygxMCwgNikgOiAxKSAqICgoc3RyaW5nT3JpZ2luYWwubWF0Y2goYmlsbGlvblJlZ0V4cCkpID8gTWF0aC5wb3coMTAsIDkpIDogMSkgKiAoKHN0cmluZ09yaWdpbmFsLm1hdGNoKHRyaWxsaW9uUmVnRXhwKSkgPyBNYXRoLnBvdygxMCwgMTIpIDogMSkgKiAoKHN0cmluZy5pbmRleE9mKCclJykgPiAtMSkgPyAwLjAxIDogMSkgKiAoKChzdHJpbmcuc3BsaXQoJy0nKS5sZW5ndGggKyBNYXRoLm1pbihzdHJpbmcuc3BsaXQoJygnKS5sZW5ndGgtMSwgc3RyaW5nLnNwbGl0KCcpJykubGVuZ3RoLTEpKSAlIDIpPyAxOiAtMSkgKiBOdW1iZXIoc3RyaW5nLnJlcGxhY2UoL1teMC05XFwuXSsvZywgJycpKTtcblxuICAgICAgICAgICAgICAgIC8vIHJvdW5kIGlmIHdlIGFyZSB0YWxraW5nIGFib3V0IGJ5dGVzXG4gICAgICAgICAgICAgICAgbi5fdmFsdWUgPSAoYnl0ZXNNdWx0aXBsaWVyKSA/IE1hdGguY2VpbChuLl92YWx1ZSkgOiBuLl92YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbi5fdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0Q3VycmVuY3kgKG4sIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICB2YXIgc3ltYm9sSW5kZXggPSBmb3JtYXQuaW5kZXhPZignJCcpLFxuICAgICAgICAgICAgb3BlblBhcmVuSW5kZXggPSBmb3JtYXQuaW5kZXhPZignKCcpLFxuICAgICAgICAgICAgbWludXNTaWduSW5kZXggPSBmb3JtYXQuaW5kZXhPZignLScpLFxuICAgICAgICAgICAgc3BhY2UgPSAnJyxcbiAgICAgICAgICAgIHNwbGljZUluZGV4LFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZSBiZWZvcmUgb3IgYWZ0ZXIgY3VycmVuY3lcbiAgICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCcgJCcpID4gLTEpIHtcbiAgICAgICAgICAgIHNwYWNlID0gJyAnO1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJyAkJywgJycpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdC5pbmRleE9mKCckICcpID4gLTEpIHtcbiAgICAgICAgICAgIHNwYWNlID0gJyAnO1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJyQgJywgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJyQnLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JtYXQgdGhlIG51bWJlclxuICAgICAgICBvdXRwdXQgPSBmb3JtYXROdW1iZXIobi5fdmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbik7XG5cbiAgICAgICAgLy8gcG9zaXRpb24gdGhlIHN5bWJvbFxuICAgICAgICBpZiAoc3ltYm9sSW5kZXggPD0gMSkge1xuICAgICAgICAgICAgaWYgKG91dHB1dC5pbmRleE9mKCcoJykgPiAtMSB8fCBvdXRwdXQuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuc3BsaXQoJycpO1xuICAgICAgICAgICAgICAgIHNwbGljZUluZGV4ID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoc3ltYm9sSW5kZXggPCBvcGVuUGFyZW5JbmRleCB8fCBzeW1ib2xJbmRleCA8IG1pbnVzU2lnbkluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHN5bWJvbCBhcHBlYXJzIGJlZm9yZSB0aGUgXCIoXCIgb3IgXCItXCJcbiAgICAgICAgICAgICAgICAgICAgc3BsaWNlSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXRwdXQuc3BsaWNlKHNwbGljZUluZGV4LCAwLCBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5jdXJyZW5jeS5zeW1ib2wgKyBzcGFjZSk7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LmpvaW4oJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5jdXJyZW5jeS5zeW1ib2wgKyBzcGFjZSArIG91dHB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvdXRwdXQuaW5kZXhPZignKScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuc3BsaXQoJycpO1xuICAgICAgICAgICAgICAgIG91dHB1dC5zcGxpY2UoLTEsIDAsIHNwYWNlICsgbGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uY3VycmVuY3kuc3ltYm9sKTtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuam9pbignJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIHNwYWNlICsgbGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uY3VycmVuY3kuc3ltYm9sO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRQZXJjZW50YWdlIChuLCBmb3JtYXQsIHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgdmFyIHNwYWNlID0gJycsXG4gICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICB2YWx1ZSA9IG4uX3ZhbHVlICogMTAwO1xuXG4gICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZSBiZWZvcmUgJVxuICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJyAlJykgPiAtMSkge1xuICAgICAgICAgICAgc3BhY2UgPSAnICc7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnICUnLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCA9IGZvcm1hdE51bWJlcih2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKTtcblxuICAgICAgICBpZiAob3V0cHV0LmluZGV4T2YoJyknKSA+IC0xICkge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnNwbGl0KCcnKTtcbiAgICAgICAgICAgIG91dHB1dC5zcGxpY2UoLTEsIDAsIHNwYWNlICsgJyUnKTtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5qb2luKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIHNwYWNlICsgJyUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRUaW1lIChuKSB7XG4gICAgICAgIHZhciBob3VycyA9IE1hdGguZmxvb3Iobi5fdmFsdWUvNjAvNjApLFxuICAgICAgICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IoKG4uX3ZhbHVlIC0gKGhvdXJzICogNjAgKiA2MCkpLzYwKSxcbiAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLnJvdW5kKG4uX3ZhbHVlIC0gKGhvdXJzICogNjAgKiA2MCkgLSAobWludXRlcyAqIDYwKSk7XG4gICAgICAgIHJldHVybiBob3VycyArICc6JyArICgobWludXRlcyA8IDEwKSA/ICcwJyArIG1pbnV0ZXMgOiBtaW51dGVzKSArICc6JyArICgoc2Vjb25kcyA8IDEwKSA/ICcwJyArIHNlY29uZHMgOiBzZWNvbmRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmZvcm1hdFRpbWUgKHN0cmluZykge1xuICAgICAgICB2YXIgdGltZUFycmF5ID0gc3RyaW5nLnNwbGl0KCc6JyksXG4gICAgICAgICAgICBzZWNvbmRzID0gMDtcbiAgICAgICAgLy8gdHVybiBob3VycyBhbmQgbWludXRlcyBpbnRvIHNlY29uZHMgYW5kIGFkZCB0aGVtIGFsbCB1cFxuICAgICAgICBpZiAodGltZUFycmF5Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgLy8gaG91cnNcbiAgICAgICAgICAgIHNlY29uZHMgPSBzZWNvbmRzICsgKE51bWJlcih0aW1lQXJyYXlbMF0pICogNjAgKiA2MCk7XG4gICAgICAgICAgICAvLyBtaW51dGVzXG4gICAgICAgICAgICBzZWNvbmRzID0gc2Vjb25kcyArIChOdW1iZXIodGltZUFycmF5WzFdKSAqIDYwKTtcbiAgICAgICAgICAgIC8vIHNlY29uZHNcbiAgICAgICAgICAgIHNlY29uZHMgPSBzZWNvbmRzICsgTnVtYmVyKHRpbWVBcnJheVsyXSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGltZUFycmF5Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgLy8gbWludXRlc1xuICAgICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgKyAoTnVtYmVyKHRpbWVBcnJheVswXSkgKiA2MCk7XG4gICAgICAgICAgICAvLyBzZWNvbmRzXG4gICAgICAgICAgICBzZWNvbmRzID0gc2Vjb25kcyArIE51bWJlcih0aW1lQXJyYXlbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIoc2Vjb25kcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0TnVtYmVyICh2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIHZhciBuZWdQID0gZmFsc2UsXG4gICAgICAgICAgICBzaWduZWQgPSBmYWxzZSxcbiAgICAgICAgICAgIG9wdERlYyA9IGZhbHNlLFxuICAgICAgICAgICAgYWJiciA9ICcnLFxuICAgICAgICAgICAgYWJicksgPSBmYWxzZSwgLy8gZm9yY2UgYWJicmV2aWF0aW9uIHRvIHRob3VzYW5kc1xuICAgICAgICAgICAgYWJick0gPSBmYWxzZSwgLy8gZm9yY2UgYWJicmV2aWF0aW9uIHRvIG1pbGxpb25zXG4gICAgICAgICAgICBhYmJyQiA9IGZhbHNlLCAvLyBmb3JjZSBhYmJyZXZpYXRpb24gdG8gYmlsbGlvbnNcbiAgICAgICAgICAgIGFiYnJUID0gZmFsc2UsIC8vIGZvcmNlIGFiYnJldmlhdGlvbiB0byB0cmlsbGlvbnNcbiAgICAgICAgICAgIGFiYnJGb3JjZSA9IGZhbHNlLCAvLyBmb3JjZSBhYmJyZXZpYXRpb25cbiAgICAgICAgICAgIGJ5dGVzID0gJycsXG4gICAgICAgICAgICBvcmQgPSAnJyxcbiAgICAgICAgICAgIGFicyA9IE1hdGguYWJzKHZhbHVlKSxcbiAgICAgICAgICAgIHN1ZmZpeGVzID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJywgJ0VCJywgJ1pCJywgJ1lCJ10sXG4gICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICBtYXgsXG4gICAgICAgICAgICBwb3dlcixcbiAgICAgICAgICAgIHcsXG4gICAgICAgICAgICBwcmVjaXNpb24sXG4gICAgICAgICAgICB0aG91c2FuZHMsXG4gICAgICAgICAgICBkID0gJycsXG4gICAgICAgICAgICBuZWcgPSBmYWxzZTtcblxuICAgICAgICAvLyBjaGVjayBpZiBudW1iZXIgaXMgemVybyBhbmQgYSBjdXN0b20gemVybyBmb3JtYXQgaGFzIGJlZW4gc2V0XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCAmJiB6ZXJvRm9ybWF0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gemVyb0Zvcm1hdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNlZSBpZiB3ZSBzaG91bGQgdXNlIHBhcmVudGhlc2VzIGZvciBuZWdhdGl2ZSBudW1iZXIgb3IgaWYgd2Ugc2hvdWxkIHByZWZpeCB3aXRoIGEgc2lnblxuICAgICAgICAgICAgLy8gaWYgYm90aCBhcmUgcHJlc2VudCB3ZSBkZWZhdWx0IHRvIHBhcmVudGhlc2VzXG4gICAgICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJygnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbmVnUCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0LmluZGV4T2YoJysnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvXFwrL2csICcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2VlIGlmIGFiYnJldmlhdGlvbiBpcyB3YW50ZWRcbiAgICAgICAgICAgIGlmIChmb3JtYXQuaW5kZXhPZignYScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhYmJyZXZpYXRpb24gaXMgc3BlY2lmaWVkXG4gICAgICAgICAgICAgICAgYWJicksgPSBmb3JtYXQuaW5kZXhPZignYUsnKSA+PSAwO1xuICAgICAgICAgICAgICAgIGFiYnJNID0gZm9ybWF0LmluZGV4T2YoJ2FNJykgPj0gMDtcbiAgICAgICAgICAgICAgICBhYmJyQiA9IGZvcm1hdC5pbmRleE9mKCdhQicpID49IDA7XG4gICAgICAgICAgICAgICAgYWJiclQgPSBmb3JtYXQuaW5kZXhPZignYVQnKSA+PSAwO1xuICAgICAgICAgICAgICAgIGFiYnJGb3JjZSA9IGFiYnJLIHx8IGFiYnJNIHx8IGFiYnJCIHx8IGFiYnJUO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHNwYWNlIGJlZm9yZSBhYmJyZXZpYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJyBhJykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBhYmJyID0gJyAnO1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnIGEnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ2EnLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFicyA+PSBNYXRoLnBvdygxMCwgMTIpICYmICFhYmJyRm9yY2UgfHwgYWJiclQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpbGxpb25cbiAgICAgICAgICAgICAgICAgICAgYWJiciA9IGFiYnIgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5hYmJyZXZpYXRpb25zLnRyaWxsaW9uO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gTWF0aC5wb3coMTAsIDEyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFicyA8IE1hdGgucG93KDEwLCAxMikgJiYgYWJzID49IE1hdGgucG93KDEwLCA5KSAmJiAhYWJickZvcmNlIHx8IGFiYnJCKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJpbGxpb25cbiAgICAgICAgICAgICAgICAgICAgYWJiciA9IGFiYnIgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5hYmJyZXZpYXRpb25zLmJpbGxpb247XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyBNYXRoLnBvdygxMCwgOSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhYnMgPCBNYXRoLnBvdygxMCwgOSkgJiYgYWJzID49IE1hdGgucG93KDEwLCA2KSAmJiAhYWJickZvcmNlIHx8IGFiYnJNKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1pbGxpb25cbiAgICAgICAgICAgICAgICAgICAgYWJiciA9IGFiYnIgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5hYmJyZXZpYXRpb25zLm1pbGxpb247XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyBNYXRoLnBvdygxMCwgNik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhYnMgPCBNYXRoLnBvdygxMCwgNikgJiYgYWJzID49IE1hdGgucG93KDEwLCAzKSAmJiAhYWJickZvcmNlIHx8IGFiYnJLKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRob3VzYW5kXG4gICAgICAgICAgICAgICAgICAgIGFiYnIgPSBhYmJyICsgbGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uYWJicmV2aWF0aW9ucy50aG91c2FuZDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAvIE1hdGgucG93KDEwLCAzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNlZSBpZiB3ZSBhcmUgZm9ybWF0dGluZyBieXRlc1xuICAgICAgICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCdiJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZSBiZWZvcmVcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJyBiJykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBieXRlcyA9ICcgJztcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJyBiJywgJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdiJywgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAocG93ZXIgPSAwOyBwb3dlciA8PSBzdWZmaXhlcy5sZW5ndGg7IHBvd2VyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5wb3coMTAyNCwgcG93ZXIpO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLnBvdygxMDI0LCBwb3dlcisxKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gbWluICYmIHZhbHVlIDwgbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBieXRlcyA9IGJ5dGVzICsgc3VmZml4ZXNbcG93ZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gbWluO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNlZSBpZiBvcmRpbmFsIGlzIHdhbnRlZFxuICAgICAgICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCdvJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZSBiZWZvcmVcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJyBvJykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBvcmQgPSAnICc7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCcgbycsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnbycsICcnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvcmQgPSBvcmQgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5vcmRpbmFsKHZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCdbLl0nKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgb3B0RGVjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnWy5dJywgJy4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdyA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVswXTtcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IGZvcm1hdC5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgdGhvdXNhbmRzID0gZm9ybWF0LmluZGV4T2YoJywnKTtcblxuICAgICAgICAgICAgaWYgKHByZWNpc2lvbikge1xuICAgICAgICAgICAgICAgIGlmIChwcmVjaXNpb24uaW5kZXhPZignWycpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uLnJlcGxhY2UoJ10nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbi5zcGxpdCgnWycpO1xuICAgICAgICAgICAgICAgICAgICBkID0gdG9GaXhlZCh2YWx1ZSwgKHByZWNpc2lvblswXS5sZW5ndGggKyBwcmVjaXNpb25bMV0ubGVuZ3RoKSwgcm91bmRpbmdGdW5jdGlvbiwgcHJlY2lzaW9uWzFdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9IHRvRml4ZWQodmFsdWUsIHByZWNpc2lvbi5sZW5ndGgsIHJvdW5kaW5nRnVuY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHcgPSBkLnNwbGl0KCcuJylbMF07XG5cbiAgICAgICAgICAgICAgICBpZiAoZC5zcGxpdCgnLicpWzFdLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkID0gbGFuZ3VhZ2VzW2N1cnJlbnRMYW5ndWFnZV0uZGVsaW1pdGVycy5kZWNpbWFsICsgZC5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSAnJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0RGVjICYmIE51bWJlcihkLnNsaWNlKDEpKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3ID0gdG9GaXhlZCh2YWx1ZSwgbnVsbCwgcm91bmRpbmdGdW5jdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZvcm1hdCBudW1iZXJcbiAgICAgICAgICAgIGlmICh3LmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdyA9IHcuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgbmVnID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRob3VzYW5kcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdyA9IHcudG9TdHJpbmcoKS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyg/IVxcZCkpL2csICckMScgKyBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXS5kZWxpbWl0ZXJzLnRob3VzYW5kcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JtYXQuaW5kZXhPZignLicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdyA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gKChuZWdQICYmIG5lZykgPyAnKCcgOiAnJykgKyAoKCFuZWdQICYmIG5lZykgPyAnLScgOiAnJykgKyAoKCFuZWcgJiYgc2lnbmVkKSA/ICcrJyA6ICcnKSArIHcgKyBkICsgKChvcmQpID8gb3JkIDogJycpICsgKChhYmJyKSA/IGFiYnIgOiAnJykgKyAoKGJ5dGVzKSA/IGJ5dGVzIDogJycpICsgKChuZWdQICYmIG5lZykgPyAnKScgOiAnJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIFRvcCBMZXZlbCBGdW5jdGlvbnNcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgbnVtZXJhbCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICBpZiAobnVtZXJhbC5pc051bWVyYWwoaW5wdXQpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09IDAgfHwgdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaW5wdXQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKCFOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IG51bWVyYWwuZm4udW5mb3JtYXQoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBOdW1lcmFsKE51bWJlcihpbnB1dCkpO1xuICAgIH07XG5cbiAgICAvLyB2ZXJzaW9uIG51bWJlclxuICAgIG51bWVyYWwudmVyc2lvbiA9IFZFUlNJT047XG5cbiAgICAvLyBjb21wYXJlIG51bWVyYWwgb2JqZWN0XG4gICAgbnVtZXJhbC5pc051bWVyYWwgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBOdW1lcmFsO1xuICAgIH07XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsYW5ndWFnZXMgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbGFuZ3VhZ2UuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbGFuZ3VhZ2Uga2V5LlxuICAgIG51bWVyYWwubGFuZ3VhZ2UgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50TGFuZ3VhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ICYmICF2YWx1ZXMpIHtcbiAgICAgICAgICAgIGlmKCFsYW5ndWFnZXNba2V5XSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBsYW5ndWFnZSA6ICcgKyBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudExhbmd1YWdlID0ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlcyB8fCAhbGFuZ3VhZ2VzW2tleV0pIHtcbiAgICAgICAgICAgIGxvYWRMYW5ndWFnZShrZXksIHZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVtZXJhbDtcbiAgICB9O1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGxvYWRlZCBsYW5ndWFnZSBkYXRhLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50XG4gICAgLy8gZ2xvYmFsIGxhbmd1YWdlIG9iamVjdC5cbiAgICBudW1lcmFsLmxhbmd1YWdlRGF0YSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYW5ndWFnZXNbY3VycmVudExhbmd1YWdlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbGFuZ3VhZ2VzW2tleV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBsYW5ndWFnZSA6ICcgKyBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlc1trZXldO1xuICAgIH07XG5cbiAgICBudW1lcmFsLmxhbmd1YWdlKCdlbicsIHtcbiAgICAgICAgZGVsaW1pdGVyczoge1xuICAgICAgICAgICAgdGhvdXNhbmRzOiAnLCcsXG4gICAgICAgICAgICBkZWNpbWFsOiAnLidcbiAgICAgICAgfSxcbiAgICAgICAgYWJicmV2aWF0aW9uczoge1xuICAgICAgICAgICAgdGhvdXNhbmQ6ICdrJyxcbiAgICAgICAgICAgIG1pbGxpb246ICdtJyxcbiAgICAgICAgICAgIGJpbGxpb246ICdiJyxcbiAgICAgICAgICAgIHRyaWxsaW9uOiAndCdcbiAgICAgICAgfSxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMDtcbiAgICAgICAgICAgIHJldHVybiAofn4gKG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgIHN5bWJvbDogJyQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIG51bWVyYWwuemVyb0Zvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgemVyb0Zvcm1hdCA9IHR5cGVvZihmb3JtYXQpID09PSAnc3RyaW5nJyA/IGZvcm1hdCA6IG51bGw7XG4gICAgfTtcblxuICAgIG51bWVyYWwuZGVmYXVsdEZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgZGVmYXVsdEZvcm1hdCA9IHR5cGVvZihmb3JtYXQpID09PSAnc3RyaW5nJyA/IGZvcm1hdCA6ICcwLjAnO1xuICAgIH07XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEhlbHBlcnNcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgZnVuY3Rpb24gbG9hZExhbmd1YWdlKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIGxhbmd1YWdlc1trZXldID0gdmFsdWVzO1xuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgRmxvYXRpbmctcG9pbnQgaGVscGVyc1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvLyBUaGUgZmxvYXRpbmctcG9pbnQgaGVscGVyIGZ1bmN0aW9ucyBhbmQgaW1wbGVtZW50YXRpb25cbiAgICAvLyBib3Jyb3dzIGhlYXZpbHkgZnJvbSBzaW5mdWwuanM6IGh0dHA6Ly9ndWlwbi5naXRodWIuaW8vc2luZnVsLmpzL1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkucHJvdG90eXBlLnJlZHVjZSBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGl0XG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvUmVkdWNlI0NvbXBhdGliaWxpdHlcbiAgICAgKi9cbiAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpIHtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgb3B0X2luaXRpYWxWYWx1ZSkge1xuICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gdGhpcyB8fCAndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGUgbW9tZW50IGFsbCBtb2Rlcm4gYnJvd3NlcnMsIHRoYXQgc3VwcG9ydCBzdHJpY3QgbW9kZSwgaGF2ZVxuICAgICAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZiBBcnJheS5wcm90b3R5cGUucmVkdWNlLiBGb3IgaW5zdGFuY2UsIElFOFxuICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IHN1cHBvcnQgc3RyaWN0IG1vZGUsIHNvIHRoaXMgY2hlY2sgaXMgYWN0dWFsbHkgdXNlbGVzcy5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUucmVkdWNlIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjYWxsYmFjayArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGluZGV4LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoID4+PiAwLFxuICAgICAgICAgICAgICAgIGlzVmFsdWVTZXQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBvcHRfaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgICAgIGlzVmFsdWVTZXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgbGVuZ3RoID4gaW5kZXg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsdWVTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIHRoaXNbaW5kZXhdLCBpbmRleCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWx1ZVNldCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNWYWx1ZVNldCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG11bHRpcGxpZXIgbmVjZXNzYXJ5IHRvIG1ha2UgeCA+PSAxLFxuICAgICAqIGVmZmVjdGl2ZWx5IGVsaW1pbmF0aW5nIG1pc2NhbGN1bGF0aW9ucyBjYXVzZWQgYnlcbiAgICAgKiBmaW5pdGUgcHJlY2lzaW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG11bHRpcGxpZXIoeCkge1xuICAgICAgICB2YXIgcGFydHMgPSB4LnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnBvdygxMCwgcGFydHNbMV0ubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIHJldHVybnMgdGhlIG1heGltdW1cbiAgICAgKiBtdWx0aXBsaWVyIHRoYXQgbXVzdCBiZSB1c2VkIHRvIG5vcm1hbGl6ZSBhbiBvcGVyYXRpb24gaW52b2x2aW5nXG4gICAgICogYWxsIG9mIHRoZW0uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29ycmVjdGlvbkZhY3RvcigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBtcCA9IG11bHRpcGxpZXIocHJldiksXG4gICAgICAgICAgICAgICAgbW4gPSBtdWx0aXBsaWVyKG5leHQpO1xuICAgICAgICAgICAgcmV0dXJuIG1wID4gbW4gPyBtcCA6IG1uO1xuICAgICAgICB9LCAtSW5maW5pdHkpO1xuICAgIH1cblxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBOdW1lcmFsIFByb3RvdHlwZVxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuICAgIG51bWVyYWwuZm4gPSBOdW1lcmFsLnByb3RvdHlwZSA9IHtcblxuICAgICAgICBjbG9uZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1lcmFsKHRoaXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvcm1hdCA6IGZ1bmN0aW9uIChpbnB1dFN0cmluZywgcm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE51bWVyYWwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dFN0cmluZyA/IGlucHV0U3RyaW5nIDogZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgICAgICAgICAocm91bmRpbmdGdW5jdGlvbiAhPT0gdW5kZWZpbmVkKSA/IHJvdW5kaW5nRnVuY3Rpb24gOiBNYXRoLnJvdW5kXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVuZm9ybWF0IDogZnVuY3Rpb24gKGlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0U3RyaW5nKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRTdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5mb3JtYXROdW1lcmFsKHRoaXMsIGlucHV0U3RyaW5nID8gaW5wdXRTdHJpbmcgOiBkZWZhdWx0Rm9ybWF0KTtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZU9mIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldCA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY29yckZhY3RvciA9IGNvcnJlY3Rpb25GYWN0b3IuY2FsbChudWxsLCB0aGlzLl92YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgZnVuY3Rpb24gY2JhY2soYWNjdW0sIGN1cnIsIGN1cnJJLCBPKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtICsgY29yckZhY3RvciAqIGN1cnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFt0aGlzLl92YWx1ZSwgdmFsdWVdLnJlZHVjZShjYmFjaywgMCkgLyBjb3JyRmFjdG9yO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3VidHJhY3QgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjb3JyRmFjdG9yID0gY29ycmVjdGlvbkZhY3Rvci5jYWxsKG51bGwsIHRoaXMuX3ZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBmdW5jdGlvbiBjYmFjayhhY2N1bSwgY3VyciwgY3VyckksIE8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW0gLSBjb3JyRmFjdG9yICogY3VycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gW3ZhbHVlXS5yZWR1Y2UoY2JhY2ssIHRoaXMuX3ZhbHVlICogY29yckZhY3RvcikgLyBjb3JyRmFjdG9yO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbXVsdGlwbHkgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNiYWNrKGFjY3VtLCBjdXJyLCBjdXJySSwgTykge1xuICAgICAgICAgICAgICAgIHZhciBjb3JyRmFjdG9yID0gY29ycmVjdGlvbkZhY3RvcihhY2N1bSwgY3Vycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhY2N1bSAqIGNvcnJGYWN0b3IpICogKGN1cnIgKiBjb3JyRmFjdG9yKSAvXG4gICAgICAgICAgICAgICAgKGNvcnJGYWN0b3IgKiBjb3JyRmFjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gW3RoaXMuX3ZhbHVlLCB2YWx1ZV0ucmVkdWNlKGNiYWNrLCAxKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpdmlkZSA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gY2JhY2soYWNjdW0sIGN1cnIsIGN1cnJJLCBPKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvcnJGYWN0b3IgPSBjb3JyZWN0aW9uRmFjdG9yKGFjY3VtLCBjdXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFjY3VtICogY29yckZhY3RvcikgLyAoY3VyciAqIGNvcnJGYWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbdGhpcy5fdmFsdWUsIHZhbHVlXS5yZWR1Y2UoY2JhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlmZmVyZW5jZSA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKG51bWVyYWwodGhpcy5fdmFsdWUpLnN1YnRyYWN0KHZhbHVlKS52YWx1ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgRXhwb3NpbmcgTnVtZXJhbFxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvLyBDb21tb25KUyBtb2R1bGUgaXMgZGVmaW5lZFxuICAgIGlmIChoYXNNb2R1bGUpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBudW1lcmFsO1xuICAgIH1cblxuICAgIC8qZ2xvYmFsIGVuZGVyOmZhbHNlICovXG4gICAgaWYgKHR5cGVvZiBlbmRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gaGVyZSwgYHRoaXNgIG1lYW5zIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZ2xvYmFsYCBvbiB0aGUgc2VydmVyXG4gICAgICAgIC8vIGFkZCBgbnVtZXJhbGAgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLFxuICAgICAgICAvLyBmb3IgQ2xvc3VyZSBDb21waWxlciAnYWR2YW5jZWQnIG1vZGVcbiAgICAgICAgdGhpc1snbnVtZXJhbCddID0gbnVtZXJhbDtcbiAgICB9XG5cbiAgICAvKmdsb2JhbCBkZWZpbmU6ZmFsc2UgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWVyYWw7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pKCk7IC8vIEtSIC0tIEhhZCB0byBjaGFuZ2UgdGhpcyBsaW5lIGZyb20gdGhlIGZvbGxvd2luZzpcbi8vIH0pLmNhbGwodGhpcyk7XG4vLyBPdGhlcndpc2UgdGhlIGZ1bmN0aW9uIHdhc24ndCBiZWluZyBydW5cbi8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5XG4iLCIvKiogVXNlZCBPbmx5IEZvciBUb3VjaCBEZXZpY2VzICoqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xuXHRcblx0Ly8gZm9yIHRvdWNoIGRldmljZXM6IGFkZCBjbGFzcyBjcy1ob3ZlciB0byB0aGUgZmlndXJlcyB3aGVuIHRvdWNoaW5nIHRoZSBpdGVtc1xuXHRpZiggTW9kZXJuaXpyLnRvdWNoICkge1xuXG5cdFx0Ly8gY2xhc3NpZS5qcyBodHRwczovL2dpdGh1Yi5jb20vZGVzYW5kcm8vY2xhc3NpZS9ibG9iL21hc3Rlci9jbGFzc2llLmpzXG5cdFx0Ly8gY2xhc3MgaGVscGVyIGZ1bmN0aW9ucyBmcm9tIGJvbnpvIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvYm9uem9cblxuXHRcdGZ1bmN0aW9uIGNsYXNzUmVnKCBjbGFzc05hbWUgKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFJlZ0V4cChcIihefFxcXFxzKylcIiArIGNsYXNzTmFtZSArIFwiKFxcXFxzK3wkKVwiKTtcblx0XHR9XG5cblx0XHQvLyBjbGFzc0xpc3Qgc3VwcG9ydCBmb3IgY2xhc3MgbWFuYWdlbWVudFxuXHRcdC8vIGFsdGhvIHRvIGJlIGZhaXIsIHRoZSBhcGkgc3Vja3MgYmVjYXVzZSBpdCB3b24ndCBhY2NlcHQgbXVsdGlwbGUgY2xhc3NlcyBhdCBvbmNlXG5cdFx0dmFyIGhhc0NsYXNzLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3M7XG5cblx0XHRpZiAoICdjbGFzc0xpc3QnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRcdGhhc0NsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyggYyApO1xuXHRcdFx0fTtcblx0XHRcdGFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG5cdFx0XHRcdGVsZW0uY2xhc3NMaXN0LmFkZCggYyApO1xuXHRcdFx0fTtcblx0XHRcdHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG5cdFx0XHRcdGVsZW0uY2xhc3NMaXN0LnJlbW92ZSggYyApO1xuXHRcdFx0fTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRoYXNDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xuXHRcdFx0XHRyZXR1cm4gY2xhc3NSZWcoIGMgKS50ZXN0KCBlbGVtLmNsYXNzTmFtZSApO1xuXHRcdFx0fTtcblx0XHRcdGFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG5cdFx0XHRcdGlmICggIWhhc0NsYXNzKCBlbGVtLCBjICkgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyAnICsgYztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG5cdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWUucmVwbGFjZSggY2xhc3NSZWcoIGMgKSwgJyAnICk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKCBlbGVtLCBjICkge1xuXHRcdFx0dmFyIGZuID0gaGFzQ2xhc3MoIGVsZW0sIGMgKSA/IHJlbW92ZUNsYXNzIDogYWRkQ2xhc3M7XG5cdFx0XHRmbiggZWxlbSwgYyApO1xuXHRcdH1cblxuXHRcdHZhciBjbGFzc2llID0ge1xuXHRcdFx0Ly8gZnVsbCBuYW1lc1xuXHRcdFx0aGFzQ2xhc3M6IGhhc0NsYXNzLFxuXHRcdFx0YWRkQ2xhc3M6IGFkZENsYXNzLFxuXHRcdFx0cmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuXHRcdFx0dG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuXHRcdFx0Ly8gc2hvcnQgbmFtZXNcblx0XHRcdGhhczogaGFzQ2xhc3MsXG5cdFx0XHRhZGQ6IGFkZENsYXNzLFxuXHRcdFx0cmVtb3ZlOiByZW1vdmVDbGFzcyxcblx0XHRcdHRvZ2dsZTogdG9nZ2xlQ2xhc3Ncblx0XHR9O1xuXG5cdFx0Ly8gdHJhbnNwb3J0XG5cdFx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG5cdFx0XHQvLyBBTURcblx0XHRcdGRlZmluZSggY2xhc3NpZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBicm93c2VyIGdsb2JhbFxuXHRcdFx0d2luZG93LmNsYXNzaWUgPSBjbGFzc2llO1xuXHRcdH1cblxuXHRcdFtdLnNsaWNlLmNhbGwoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICd1bC5ncmlkID4gbGkgPiBmaWd1cmUnICkgKS5mb3JFYWNoKCBmdW5jdGlvbiggZWwsIGkgKSB7XG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yKCAnZmlnY2FwdGlvbiA+IGEnICkuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9LCBmYWxzZSApO1xuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGNsYXNzaWUudG9nZ2xlKCB0aGlzLCAnY3MtaG92ZXInICk7XG5cdFx0XHR9LCBmYWxzZSApO1xuXHRcdH0gKTtcblxuXHR9XG5cbn0pKCB3aW5kb3cgKTsiXX0=
